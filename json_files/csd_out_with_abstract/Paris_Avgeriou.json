[{
    "name": "Paris Avgeriou",
    "romanize name": "Paris Avgeriou",
    "School-Department": "Johann Bernoulli Institute for Mathematics and Computer Science",
    "University": "University of Groningen",
    "Rank": "\u039a\u03b1\u03b8\u03b7\u03b3\u03b7\u03c4\u03ae\u03c2",
    "Apella_id": 6029,
    "Scholar name": "Paris Avgeriou",
    "Scholar id": "OlYdiYMAAAAJ",
    "Affiliation": "Full Professor of Software Engineering, University of Groningen",
    "Citedby": 8164,
    "Interests": [
        "Software Engineering",
        "Software Architecture",
        "Empirical Software Engineering"
    ],
    "Scholar url": "https://scholar.google.com/citations?user=OlYdiYMAAAAJ&hl=en",
    "Publications": [
        {
            "Title": "Key factors for adopting inner source",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2533685",
            "Abstract": "A number of organizations have adopted Open Source Software (OSS) development practices to support or augment their software development processes, a phenomenon frequently referred to as Inner Source. However the adoption of Inner Source is not a straightforward issue. Many organizations are struggling with the question of whether Inner Source is an appropriate approach to software development for them in the first place. This article presents a framework derived from the literature on Inner Source, which identifies nine important factors that need to be considered when implementing Inner Source. The framework can be used as a probing instrument to assess an organization on these nine factors so as to gain an understanding of whether or not Inner Source is suitable. We applied the framework in three case studies at Philips Healthcare, Neopost Technologies, and Rolls-Royce, which are all large \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:MLfJN-KU85MC",
            "Publisher": "ACM"
        },
        {
            "Title": "Architectural patterns for collaborative applications",
            "Publication year": 2006,
            "Publication url": "https://www.inderscienceonline.com/doi/abs/10.1504/IJCAT.2006.009062",
            "Abstract": "There is currently little reuse of either design or code in the development of collaborative applications. Though there are some application frameworks for this domain, they tend to be rather inflexible in the functionality they offer. This paper seeks to provide design reuse in the form of architectural patterns that focus on low-level horizontal issues: distribution, message exchange, functional decomposition, sharing data, concurrency and synchronisation. We base these patterns on a number of well-established patterns in the domain of distributed applications, concentrating on the specific issues that are encountered in the domain of collaborative applications. We also outline the relation between these low-level architectural patterns and the high-level functionality that collaborative applications offer. By codifying this knowledge and experience in the form of patterns, we hope for a wider support of low-level \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:dhFuZR0502QC",
            "Publisher": "Inderscience Publishers"
        },
        {
            "Title": "Structural quality metrics as indicators of the long method bad smell: An empirical study",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8498213/",
            "Abstract": "Empirical evidence has pointed out that Extract Method refactorings are among the most commonly applied refactorings by software developers. The identification of Long Method code smells and the ranking of the associated refactoring opportunities is largely based on the use of metrics, primarily with measures of cohesion, size and coupling. Despite the relevance of these proper-ties to the presence of large, complex and non-cohesive pieces of code, the empirical validation of these metrics has exhibited relatively low accuracy (max precision: 66%) regarding their predictive power for long methods or extract method opportunities. In this work we perform an empirical validation of the ability of cohesion, coupling and size metrics to predict the existence and the intensity of long method occurrences. According to the statistical analysis, the existence and the intensity of the Long Method smell can be effectively \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:LPtt_HFRSbwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A comparative study of architecture knowledge management tools",
            "Publication year": 2010,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121209002295",
            "Abstract": "Recent research suggests that architectural knowledge, such as design decisions, is important and should be recorded alongside the architecture description. Different approaches have emerged to support such architectural knowledge (AK) management activities. However, there are different notions of and emphasis on what and how architectural activities should be supported. This is reflected in the design and implementation of existing AK tools. To understand the current status of software architecture knowledge engineering and future research trends, this paper compares five architectural knowledge management tools and the support they provide in the architecture life-cycle. The comparison is based on an evaluation framework defined by a set of 10 criteria. The results of the comparison provide insights into the current focus of architectural knowledge management support, their advantages, deficiencies \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Tyk-4Ss8FVUC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Architectural debt management in value-oriented architecting",
            "Publication year": 2014,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B978012410464800009X",
            "Abstract": "Architectural technical debt (ATD) may be incurred when making architecture decisions. In most cases, ATD is not effectively managed in the architecting process: It is not made explicit, and architecture decision making does not consider the ATD incurred by the different design options. This chapter proposes a conceptual model of ATD and an architectural technical debt management process applying this ATD conceptual model in order to facilitate decision making in a value-oriented perspective of architecting. We also demonstrate how ATD management can be employed in architectural synthesis and evaluation in a case study. The contribution of this work provides a controllable and predictable balance between the value and cost of architecture design in the long term.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:oNZyr7d5Mn4C",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "The perception of Architectural Smells in industrial practice",
            "Publication year": 2021,
            "Publication url": "https://arxiv.org/abs/2110.06750",
            "Abstract": "Architectural Technical Debt (ATD) is considered as the most significant type of TD in industrial practice. In this study, we interview 21 software engineers and architects to investigate a specific type of ATD, namely architectural smells (AS). Our goal is to understand the phenomenon of AS better and support practitioners to better manage it and researchers to offer relevant support. The findings of this study provide insights on how practitioners perceive AS and how they introduce them, the maintenance and evolution issues they experienced and associated to the presence of AS, and what practices and tools they adopt to manage AS.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ghEM2AJqZyQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Empirical studies on software traceability: A mapping study",
            "Publication year": 2021,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2294",
            "Abstract": "During the last decades, software traceability has been studied in a large number of studies, from different perspectives (e.g., how to create traces and what are its benefits). This large body of knowledge needs to be better explored and exploited by both practitioners and researchers: We need an overview of different aspects of traceability and a structured way to assess and compare existing work in order to extend it with new research or apply it in practice, Thus, we have conducted a secondary study on this large corpus of primary studies, focusing on empirical studies on software traceability, without setting any further restrictions in terms of investigating a specific domain or concrete artifacts. The study explores the goals of existing approaches and the empirical methods used for their evaluation. Its main contributions are the investigation of (a) the type of artifacts linked through traceability approaches; (b) the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:kzcSZmkxUKAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "CRITON: A hypermedia design tool",
            "Publication year": 2005,
            "Publication url": "https://link.springer.com/article/10.1007/s11042-005-2712-x",
            "Abstract": "The WWW has turned into a development and run-time environment for large-scale and complex applications. Such sophisticated applications are being deployed in increasing numbers without having been developed according to appropriate methodologies, tools and quality standards. The reason is not only that the hypermedia industry resists to utilize formal methods, but also that these methods and corresponding tools are very few and of dubious standards. The consequence is that the hypermedia applications being developed are of poor functionality and lack qualities such as modifiability, usability and maintainability. Especially the design phase is one of the phases that lack sufficient support from methods and CASE tools. This paper presents CRITON, a cross platform tool, built to support a hypermedia design method within an integrated environment. CRITON manages all three aspects of \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:O3NaXMp0MMsC",
            "Publisher": "Kluwer Academic Publishers"
        },
        {
            "Title": "Variability in software architecture: views and beyond",
            "Publication year": 2013,
            "Publication url": "https://www.diva-portal.org/smash/record.jsf?pid=diva2:623894",
            "Abstract": "Variability (the ability of a software system or software artifact to be adapted for use in a specific context) is reflected in and facilitated through the software architecture. The Second International Workshop on Variability in Software Architecture (VARSA) was held in conjunction with the Joint 10th Working IEEE/IFIP Conference on Software Architecture & 6th European Conference on Software Architecture 2012 in Helsinki, Finland. The workshop aimed at exploring current and emerging methods, languages, notations, technologies and tools to model, implement, and manage variability in the software architecture. It featured one industrial talk, five research paper presentations, and three working group discussions. Working groups discussed topics that emerged during the workshop. This report summarizes the themes of the workshop and presents the results of the working group discussions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:yB1At4FlUx8C",
            "Publisher": "ACM Press"
        },
        {
            "Title": "Modeling Architectural Pattern Variants.",
            "Publication year": 2008,
            "Publication url": "http://ceur-ws.org/Vol-610/paper23.pdf",
            "Abstract": "Systematic modeling of architectural patterns is a challenging task mostly because of the inherent pattern variability and because pattern elements do not match the architectural abstractions of modeling languages. In this paper, we describe an approach for systematic modeling of architectural patterns using a set of architectural primitives and a vocabulary of pattern-specific architectural elements. These architectural primitives can be used as the basic building blocks for modeling a number of architectural patterns. We introduce profiles for the UML2 meta-model to express the architectural primitives. The use of the primitives along with the stereotyping scheme is capable of handling some of the challenges for the systematic modeling of architectural patterns, such as expressing pattern participants in software design.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:BUYA1_V_uYcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Run-time reconfiguration of service-centric systems",
            "Publication year": 2006,
            "Publication url": "https://core.ac.uk/download/pdf/232379106.pdf",
            "Abstract": "Service-centric systems are driven more and more towards self-adaptation in order to satisfy QoS in highly dynamic environments. However, the young age and immaturity of this domain, combined with the increasing size and complexity of these systems, hinder the architects from designing effectively self-adaptive systems. This paper addresses the process of run-time reconfiguration with respect to high level issues such as monitoring, evaluation of QoS, reconfiguring and structuring the service-centric system. All patterns relate their solutions partially to well-established architectural patterns, adapted to the domain of servicecentric systems. The aim is to compose a unified framework in the form of a pattern language that will help architects in taking the major design decisions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:k_IJM867U9cC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "A Process Framework for Embedded Systems Engineering: 2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications",
            "Publication year": 2014,
            "Publication url": "https://research.rug.nl/en/publications/a-process-framework-for-embedded-systems-engineering-2014-40th-eu",
            "Abstract": "Engineering of embedded systems is considered highly complex, due to the need for integrating multi-site, multi-lifecycle, multi-disciplinary, and multi-organization approaches. However, such challenges have not been comprehensively addressed in existing engineering processes. To this end, this study proposes a process framework to tackle these challenges, focusing on its meta-model, ie A set of elements used for process instantiation. As an exploratory validation of the proposed meta-model we conducted two focus groups with experts on embedded systems, resulting in positive feedback and industrial acceptance.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:QsaTk4IG4EwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Identifying extract method refactoring opportunities based on functional relevance",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7801138/",
            "Abstract": "`Extract Method' is considered one of the most frequently applied and beneficial refactorings, since the corresponding Long Method smell is among the most common and persistent ones. Although Long Method is conceptually related to the implementation of diverse functionalities within a method, until now, this relationship has not been utilized while identifying refactoring opportunities. In this paper we introduce an approach (accompanied by a tool) that aims at identifying source code chunks that collaborate to provide a specific functionality, and propose their extraction as separate methods. The accuracy of the proposed approach has been empirically validated both in an industrial and an open-source setting. In the former case, the approach was capable of identifying functionally related statements within two industrial long methods (approx. 500 LoC each), with a recall rate of 93 percent. In the latter case \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:4xDN1ZYqzskC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software Architecture Description & UML Workshop",
            "Publication year": 2004,
            "Publication url": "https://research.rug.nl/en/publications/software-architecture-description-amp-uml-workshop",
            "Abstract": "Software Architecture Description & UML Workshop \u2014 the University of Groningen research \nportal Skip to main navigation Skip to search Skip to main content the University of \nGroningen research portal Logo Help & FAQ English Nederlands Home Profiles Research \nUnits Research output Projects Datasets Prizes Activities Press / Media Search by expertise, \nname or affiliation Software Architecture Description & UML Workshop Nenad Medvidovic, \nParis Avgeriou, Nicolas Guelfi Software Engineering Research output: Book/Report \u203a Book \u203a \nAcademic 120 Downloads (Pure) Overview Original language English Publisher University \nof Groningen, Johann Bernoulli Institute for Mathematics and Computer Science Number of \npages 90 Publication status Published - 2004 Access to Document \n2004ProcUMLMedvidovic.pdfFinal publisher's version, 1.87 MB Cite this APA Author \nBIBTEX Harvard Standard RIS Vancouver , N., , \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:aIdbFUkbNIkC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Comparing The Accumulation Of Technical Debt Between Two Applications Developed With Spring Web MVC And Apache Struts 2.",
            "Publication year": 2016,
            "Publication url": "http://ceur-ws.org/Vol-1791/paper-05.pdf",
            "Abstract": "This paper presents the results of an observational study that investigates the differences between two widely used software development frameworks for Java EE applications. Also, it presents the accumulation of Technical Debt and the evolution of code quality metrics of software developed using these frameworks. Considering that web applications hold the lion\u2019s share of today\u2019s IT industry, this study focuses on two widely popular Java EE frameworks, namely Spring Web MVC Framework and Apache Struts 2. In particular, we have developed one system over four versions in both frameworks while monitoring Technical Debt and code quality metrics. The findings indicate that software developed based on these frameworks is relatively free of Technical Debt. Moreover, we have not noticed any significant differences between the two frameworks in terms of Technical Debt, from the perspective of source code metrics. Finally, conducting this study, we realized that if the framework is properly used it can potentiality lead to high quality and maintainable systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:48xauSegjOkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Documenting after the fact: Recovering architectural design decisions",
            "Publication year": 2008,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S016412120700194X",
            "Abstract": "Software architecture documentation helps people in understanding the software architecture of a system. In practice, software architectures are often documented after the fact, i.e. they are maintained or created after most of the design decisions have been made and implemented. To keep the architecture documentation up-to-date an architect needs to recover and describe these decisions.This paper presents ADDRA, an approach an architect can use for recovering architectural design decisions after the fact. ADDRA uses architectural deltas to provide the architect with clues about these design decisions. This allows the architect to systematically recover and document relevant architectural design decisions. The recovered architectural design decisions improve the documentation of the architecture, which increases traceability, communication, and general understanding of a system.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Y0pCki6q_DkC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Design and evaluation of a process for identifying architecture patterns in open source software",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-23798-0_15",
            "Abstract": "Architecture patterns have a direct effect (positive or negative) on a system\u2019s quality attributes (e.g., performance). Therefore, information about patterns used in a product can provide valuable insights to, e.g., component integrators who wish to evaluate a software product. Unfortunately, this information is often not readily available, in particular for Open Source Software (OSS) products, which are increasingly used in component-based development. This paper presents the design and evaluation of a process for Identifying Architecture Patterns in OSS (\u201cIDAPO\u201d). The results of the evaluation suggest that IDAPO is helpful to identify potentially present patterns, and that a process framework may provide better opportunities for tailoring to the users\u2019 needs.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:dshw04ExmUIC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Modelling web-based instructional systems",
            "Publication year": 2002,
            "Publication url": "https://www.learntechlib.org/p/111585/",
            "Abstract": "The size and complexity of modern instructional systems, which are based on the World Wide Web, bring about great intricacy in their crafting, as there is not enough knowledge or experience in this field. This imposes the use of new instructional design models in order to achieve risk-mitigation, cost and time efficiency, high pedagogical quality of the end product, which will capitalise on the potential of the networked technologies. This paper presents a model for constructing such systems, using a problem solving approach that defines the solution of an instructional problem in both a pedagogical and a technical manner in a holistic view. This model tries to standardise the development of such systems supporting reusability at the design as well as the implementation level. The pedagogical or non-technical solution is comprised of five interconnected sets of learning elements: the learning objectives, the didactic \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:W7OEmFMy1HYC",
            "Publisher": "Informing Science Institute"
        },
        {
            "Title": "An empirical study on self-fixed technical debt",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3387906.3388621",
            "Abstract": "Technical Debt (TD) can be paid back either by those that incurred it or by others. We call the former self-fixed TD, and it is particularly effective, as developers are experts in their own code and are best-suited to fix the corresponding TD issues. To what extent is TD self-fixed, which types of TD are more likely to be self-fixed and is the remediation time of self-fixed TD shorter than non-self-fixed TD? This paper attempts to answer these questions. It reports on an empirical study that analyzes the self-fixed issues of five types of TD (ie, Code, Defect, Design, Documentation and Test), captured via static analysis, in more than 17,000 commits from 20 Python projects of the Apache Software Foundation. The results show that more than two thirds of the issues are self-fixed and that the self-fixing rate is negatively correlated with the number of commits, developers and project size. Furthermore, the survival time of self-fixed \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:EPG8bYD4jVwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Software architecture",
            "Publication year": 2009,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=WHMksQOj6ScC&oi=fnd&pg=PR9&dq=info:3ggAQZeOpI4J:scholar.google.com&ots=WC449ZwheQ&sig=fTRW1Snid7DEXP-NNpFj8yZ3noc",
            "Abstract": "Part of the new series, Advanced Topics in Science and Technology in China, this book aims to introduce the theoretical foundations, various sub-fields, current research, and practical methods of software architecture. Readers can acquire basic knowledge of software architecture, including why software architecture is necessary, how we can describe a system\u2019s architecture with formal language, what architecture styles are popular in practice, and how we can apply software architecture to the development of systems. Case studies, data, illustrations, and other materials released within the past 5 years will be used to show the latest developments in software architecture. Dr. Qin Zheng is doctoral mentor of the computer science and technology departments at Tsinghua and Xi\u2019an Jiaotong Universities. He has been Associate Dean of the School of Software, Tsinghua University, and Chair of the Institute of E-commerce, Xi\u2019an Jiaotong University. He has been a visiting scholar at several universities in the United States.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:RGFaLdJalmkC",
            "Publisher": "Springer Science & Business Media"
        },
        {
            "Title": "Empirically Validating an Analytical Method for Assessing the Impact of Design Patterns on Software Quality: Three Case Studies",
            "Publication year": 2013,
            "Publication url": "https://core.ac.uk/download/pdf/232458399.pdf",
            "Abstract": "This technical report has been created as support material for the paper entitled \u201cEmpirically Validating an Analytical Method for Assessing the Impact of Design Patterns on Software Quality: A Case Study\u201d that has been submitted in ACM Transactions on Software Engineering. The corresponding paper aims at validating an analytical approach that can be used for comparing object-oriented design structures. In this technical report we present in detail the three case studies that are reported in the paper. The references of the technical report correspond to the papers reference list.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:a9-T7VOCCH8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "The evolution of technical debt in the apache ecosystem",
            "Publication year": 2017,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-65831-5_4",
            "Abstract": "Software systems must evolve over time or become increasingly irrelevant says one of Lehman\u2019s laws of software evolution. Many studies have been presented in the literature that investigate the evolution of software systems but few have focused on the evolution of technical debt. In this paper we study sixty-six Java open-source software projects from the Apache ecosystem focusing on the evolution of technical debt. We analyze the evolution of these systems over the past five years at the temporal granularity level of weekly snapshots. We calculate the trends of the technical debt time series but we also investigate the lower-level constituent components of this technical debt. We aggregate some of the information to the ecosystem level.Our findings show that the technical debt together with source code metrics increase for the majority of the systems. However, technical debt normalized to the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:7BrZ7Jt4UNcC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Mature architecting-a survey about the reasoning process of professional architects",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5959780/",
            "Abstract": "Architecting is to a large extent a decision-making process. While many approaches and tools exist to support architects during the various activities of architecting, little guidance exists to support the reasoning part of decision-making. This is partly due to our limited understanding of how professional architects make decisions. We report on findings of a survey that we have conducted with 53 industrial software architects to find out how they reason in real projects. The results of the survey are interpreted with respect to the industrial context and the architecture literature. We derive reasoning best practices that can support especially inexperienced architects with optimizing their decision-making process.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:JoZmwDi-zQgC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Evolution of the Unix system architecture: an exploratory case study",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8704965/",
            "Abstract": "Unix has evolved for almost five decades, shaping modern operating systems, key software technologies, and development practices. Studying the evolution of this remarkable system from an architectural perspective can provide insights on how to manage the growth of large, complex, and long-lived software systems. Along main Unix releases leading to the FreeBSD lineage we examine core architectural design decisions, the number of features, and code complexity, based on the analysis of source code, reference documentation, and related publications. We report that the growth in size has been uniform, with some notable outliers, while cyclomatic complexity has been religiously safeguarded. A large number of Unix-defining design decisions were implemented right from the very early beginning, with most of them still playing a major role. Unix continues to evolve from an architectural perspective, but the rate \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:ce2CqMG-AY4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Design approaches for critical embedded systems: A systematic mapping study",
            "Publication year": 2017,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-94135-6_12",
            "Abstract": " Critical Embedded Systems (CES) are systems in which failures are potentially catastrophic and, therefore, hard constraints are imposed on them. In the last years the amount of software accommodated within CES has considerably changed. For example, in smart cars the amount of software has grown about 100 times compared to previous years. This change means that software design for these systems is also bounded to hard constraints (e.g., high security and performance). Along the evolution of CES, the approaches for designing them are also changing rapidly, so as to fit the specialized needs of CES. Thus, a broad understanding of such approaches is missing. Therefore, this study aims to establish a fair overview on CESs design approaches. For that, we conducted a Systematic Mapping Study (SMS), in which we collected 1,673 papers from five digital libraries, filtered 269 primary studies, and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:CdxZDUztZiMC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Mining relationships between the participants of architectural patterns",
            "Publication year": 2010,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-15114-9_34",
            "Abstract": "Architectural patterns are often combined with other, relevant architectural patterns during software architecture design. However, combining patterns effectively remains a challenging task: first because the integration of any two architectural patterns can take several forms; second because existing pattern languages only mention generic pattern-to-pattern relationships and do not go into the details of their combination. In this paper, we propose to address this problem by discovering and defining a handful of recurring pattern relationships at the level of the participants of patterns. We have studied 32 industrial case studies and mined a number of relationships between participants of different patterns. We present a few of these relationships and outline some examples of their appearance.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:blknAaTinKkC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Correlating pattern grime and quality attributes",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8347015/",
            "Abstract": "The gang of four design patterns are widely adopted in industry as best practices and their effect on software quality has been long investigated in academia, with both positive and negative consequences being observed. One important parameter that relates to the effect of patterns on quality is the deterioration of pattern instances due to the buildup of artifacts unrelated to the pattern structure. This is called pattern grime and can potentially diminish some of the benefits of using patterns in the first place. In this paper we investigate the relation between pattern grime and three qualities, namely performance, security, and correctness. To this end, we conducted a case study with five industrial projects (approx. 260 000 lines of code) implemented by 16 developers. Our findings suggest a correlation between the accumulation of grime and decreased levels of performance, security, and correctness. Moreover, factors \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:hsZV8lGYWTMC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Evolution through architectural reconciliation",
            "Publication year": 2005,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1571066105001477",
            "Abstract": "One of the possible scenarios in a system evolution cycle, is to translate an emergent set of new requirements into software architecture design and subsequently to update the system implementation. In this paper, we argue that this form of forward engineering, even though addresses the new system requirements, tends to overlook the implementation constraints. An architect must also reverse-engineer the system, in order to make these constraints explicit. Thus, we propose an approach where we reconcile two architectural models, one that is forward-engineered from the requirements and another that is reverse-engineered from the implementation. The final reconciled model is optimally adapted to the emergent set of requirements and to the actual system implementation. The contribution of this paper is twofold: the application of architectural reconciliation in the context of software evolution and an approach to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:r0BpntZqJG4C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Variability in Web services",
            "Publication year": 2013,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-36583-6_18",
            "Abstract": "Service-based computing and associated development paradigms, including service-oriented architecture (SOA), web services, or the idea of \u201cSoftware as a Service,\u201d have gained significant attention in software engineering industry and research. The aim of this chapter is to provide an introduction to variability in service-based systems. Within this chapter, we use the term \u201cservice-based\u201d for systems that are largely or entirely built from web services [4], with SOA as the primary architectural style.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:0KyAp5RtaNEC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "How do architecture patterns and tactics interact? A model and annotation",
            "Publication year": 2010,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S016412121000141X",
            "Abstract": "Software architecture designers inevitably work with both architecture patterns and tactics. Architecture patterns describe the high-level structure and behavior of software systems as the solution to multiple system requirements, whereas tactics are design decisions that improve individual quality attribute concerns. Tactics that are implemented in existing architectures can have significant impact on the architecture patterns in the system. Similarly, tactics that are selected during initial architecture design significantly impact the architecture of the system to be designed: which patterns to use, and how they must be changed to accommodate the tactics. However, little is understood about how patterns and tactics interact. In this paper, we develop a model for the interaction of patterns and tactics that enables software architects to annotate architecture diagrams with information about the tactics used and their impact on \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:BqipwSGYUEgC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Industrial implementation of a documentation framework for architectural decisions",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6827122/",
            "Abstract": "Architecture decisions are often not explicitly documented in practice but reside in the architect's mind as tacit knowledge, even though explicit capturing and documentation of architecture decisions has been associated with a multitude of benefits. As part of a research collaboration with ABB, we developed a tool to document architecture decisions. This tool is an add-in for Enterprise Architect and is an implementation of a viewpoint-based decision documentation framework. To validate the add-in, we conducted an exploratory case study with ABB architects. In the study, we assessed the status quo of architecture decision documentation, identified architects' expectations of the ideal decision documentation tool, and evaluated the new add-in. We found that although awareness of decision documentation is increasing at ABB, several barriers exist that limit the use of decisions in practice. Regarding their ideal tool \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:LI9QrySNdTsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A mapping study on documentation in Continuous Software Development",
            "Publication year": 2021,
            "Publication url": "Unknown",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:1tZ8xJnm2c8C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Focus Group Report: Capturing Architectural Knowledge with Architectural Patterns.",
            "Publication year": 2006,
            "Publication url": "https://core.ac.uk/download/pdf/232379043.pdf",
            "Abstract": "In the field of Software Architecture, there is a shift away from the paradigm of describing Components and Connectors, and towards regarding Architecture as a set of design decisions. Unfortunately such decisions are rarely documented explicitly in the Software Architecture Document, which leads to inevitable loss of valuable architectural knowledge. This in turn results in increasing the complexity of the system, and hindering its ability to manage continuous change. The choice and application of architectural patterns during software architecting is in fact a decision-making process, and the patterns themselves represent one of the most significant type of architectural design decisions. These decisions aim at satisfying the architectural key drivers and addressing the stakeholders concerns. In fact, these decisions are very rich in semantics, since architectural patterns by definition are accompanied by the system context, the problem forces, the way to resolve the forces (or not), the rationale, and the benefits and liabilities. Therefore architectural patterns can be considered as first-class candidates for capturing architectural knowledge: they make architectural design decisions explicit, they provide rich context for these decisions and they facilitate sharing these decisions with the relevant stakeholders.It is clear that an understanding of the decisions made in designing an architecture is crucial to understanding and maintaining the system effectively. But how are these decisions made, and more particularly, how are they documented during the course of architecture design? We believe that teams can use architecture patterns to capture and record \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:qUcmZB5y_30C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Advanced quality prediction model for software architectural knowledge sharing",
            "Publication year": 2011,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121210003468",
            "Abstract": "In the field of software architecture, a paradigm shift is occurring from describing the outcome of architecting process to describing the Architectural Knowledge (AK) created and used during architecting. Many AK models have been defined to represent domain concepts and their relationships, and they can be used for sharing and reusing AK across organizations, especially in geographically distributed contexts. However, different AK domain models can represent concepts that are different, thereby making effective AK sharing challenging. In order to understand the mapping quality from one AK model to another when more than one AK model coexists, AK sharing quality prediction based on the concept differences across AK models is necessary. Previous works in this area lack validation in the actual practice of AK sharing. In this paper, we carry out validation using four AK sharing case studies. We also improve \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:5awf1xo2G04C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "A case of quality prediction of architecture knowledge sharing through model mapping",
            "Publication year": 2008,
            "Publication url": "https://core.ac.uk/download/pdf/148193206.pdf",
            "Abstract": "In this report, we introduce the AK sharing activity with a query-based scenario, and the motivation for the prediction of AK sharing quality prediction. In the end, a concrete case of quality prediction of AK sharing through model mapping was presented with assumptions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:70eg2SAEIzsC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "A systematic mapping on quality attributes and quality models for ambient assisted living systems.",
            "Publication year": 2016,
            "Publication url": "http://repositorio.icmc.usp.br/bitstream/handle/RIICMC/6646/Relat%C3%B3rios%20T%C3%A9cnicos_410_2016.pdf?sequence=1",
            "Abstract": "Population ageing is currently taking place across the globe and it is already a reality in many developed countries.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Bg7qf7VwUHIC",
            "Publisher": "S\u00e3o Carlos, SP, Brasil."
        },
        {
            "Title": "A documentation framework for architecture decisions",
            "Publication year": 2012,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121211002755",
            "Abstract": "In this paper, we introduce a documentation framework for architecture decisions. This framework consists of four viewpoint definitions using the conventions of ISO/IEC/IEEE 42010, the new international standard for the description of system and software architectures. The four viewpoints, a Decision Detail viewpoint, a Decision Relationship viewpoint, a Decision Chronology viewpoint, and a Decision Stakeholder Involvement viewpoint satisfy several stakeholder concerns related to architecture decision management.With the exception of the Decision Stakeholder Involvement viewpoint, the framework was evaluated in an industrial case study. The results are promising, as they show that decision views can be created with reasonable effort while satisfying many of the stakeholder concerns in decision documentation.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ldfaerwXgEUC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "A catalog of architectural primitives for modeling architectural patterns",
            "Publication year": 2008,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584907001073",
            "Abstract": "Architectural patterns are a fundamental aspect of the architecting process and subsequently the architectural documentation. Unfortunately, there is only poor support for modeling architectural patterns for two reasons. First, patterns describe recurring design solutions and hence do not directly match the elements in modeling languages. Second, they support an inherent variability in the solution space that is hard to model using a single modeling solution. This paper proposes to address this problem by finding and representing architectural primitives: fundamental, formalized modeling elements in representing patterns. In particular, we examined architectural patterns from the components and connectors architectural view, and we discovered recurring primitive abstractions among the patterns, that also demonstrate a degree of variability for each pattern. We used UML 2 as the language for representing these \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:YOwf2qJgpHMC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Relating software requirements and architectures",
            "Publication year": 2011,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=aMbhIEvIDBgC&oi=fnd&pg=PR3&dq=info:M3nPWj1ZcAIJ:scholar.google.com&ots=bWNyRGynv-&sig=2BA37pEBsmIzouVpxcLYzysr6HU",
            "Abstract": "Why have a book about the relation between requirements and software architecture? Understanding the relation between requirements and architecture is important because the requirements, be they explicit or implicit, represent the function, whereas the architecture determines the form. While changes to a set of requirements may impact on the realization of the architecture, choices made for an architectural solution may impact on requirements, eg, in terms of revising functional or non-functional requirements that cannot actually be met. Although research in both requirements engineering and software architecture is quite active, it is in their combination that understanding is most needed and actively sought. Presenting the current state of the art is the purpose of this book. The editors have divided the contributions into four parts: Part 1 \u201cTheoretical Underpinnings and Reviews\u201d addresses the issue of requirements change management in architectural design through traceability and reasoning. Part 2 \u201cTools and Techniques\u201d presents approaches, tools, and techniques for bridging the gap between software requirements and architecture. Part 3 \u201cIndustrial Case Studies\u201d then reports industrial experiences, while part 4 on \u201cEmerging Issues\u201d details advanced topics such as synthesizing architecture from requirements or the role of middleware in architecting for non-functional requirements. The final chapter is a conclusions chapter identifying key contributions and outstanding areas for future research and improvement of practice. The book is targeted at academic and industrial researchers in requirements engineering or software architecture \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:uJ-U7cs_P_0C",
            "Publisher": "Springer Science & Business Media"
        },
        {
            "Title": "Evolution of technical debt remediation in Python: A case study on the Apache Software Ecosystem",
            "Publication year": 2021,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2319",
            "Abstract": "In recent years, the evolution of software ecosystems and the detection of technical debt received significant attention by researchers from both industry and academia. While a few studies that analyze various aspects of technical debt evolution already exist, to the best of our knowledge, there is no large\u2010scale study that focuses on the remediation of technical debt over time in Python projects\u2014that is, one of the most popular programming languages at the moment. In this paper, we analyze the evolution of technical debt in 44 Python open\u2010source software projects belonging to the Apache Software Foundation. We focus on the type and amount of technical debt that is paid back. The study required the mining of over 60K commits, detailed code analysis on 3.7K system versions, and the analysis of almost 43K fixed issues. The findings show that most of the repayment effort goes into testing, documentation \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:HJSXoJQnj-YC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Engineering e-learning systems(ELS)",
            "Publication year": 2004,
            "Publication url": "https://scholar.google.com/scholar?cluster=4341891273912933494&hl=en&oi=scholarr",
            "Abstract": "not available.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:NhqRSupF_l8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Sharing architecture knowledge through models: quality and cost",
            "Publication year": 2009,
            "Publication url": "https://www.cambridge.org/core/journals/knowledge-engineering-review/article/sharing-architecture-knowledge-through-models-quality-and-cost/4819015C4619B8276AEB616A8CE67851",
            "Abstract": "In the field of software architecture, there has been a paradigm shift from describing structural information, such as components and connectors, to documenting architectural knowledge (AK), such as design decisions and rationale. To this end, a series of industrial and academic domain models have been proposed for defining the concepts and their relationships in the field of AK. To a large extent the merit of this new paradigm is to share and reuse AK across organizations, especially in geographically distributed settings. However, the employment of different AK domain models by different parties makes effective AK sharing challenging, as it needs to be mapped from one domain model to another. In this paper, we investigate two different approaches for sharing AK, based on either direct or indirect mapping between different AK domain models. We compare the cost and quality of these two approaches, with \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:hqOjcs7Dif8C",
            "Publisher": "Cambridge University Press"
        },
        {
            "Title": "A decision model for cyber-foraging systems",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7516811/",
            "Abstract": "Cyber-foraging is a technique to enable mobile devices to extend their computing power and storage by offloading computation or data to more powerful servers located in the cloud or in single-hop proximity. While there is a large amount of research in this area, the reality is that there are not many deployed, operational cyber-foraging systems. As these systems become more prevalent due to their proven benefits, combined with the emergence of micro data centers and edge clouds, a need will arise for guidance on their architecture and development. To provide this guidance, we present a decision model based on a mapping of functional and non-functional requirements for cyber-foraging systems to a set of architectural tactics. The decision model was validated by developers to obtain an expert opinion on its correctness and usefulness for guiding the architecture, design, and evolution of cyber-foraging systems \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:_OXeSy2IsFwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A mapping study on design-time quality attributes and metrics",
            "Publication year": 2017,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S016412121730016X",
            "Abstract": "Developing a plan for monitoring software quality is a non-trivial task, in the sense that it requires: (a) the selection of relevant quality attributes, based on application domain and development phase, and (b) the selection of appropriate metrics to quantify quality attributes. The metrics selection process is further complicated due to the availability of various metrics for each quality attribute, and the constraints that impact metric selection (e.g., development phase, metric validity, and available tools). In this paper, we shed light on the state-of-research of design-time quality attributes by conducting a mapping study. We have identified 154 papers that have been included as primary studies. The study led to the following outcomes: (a) low-level quality attributes (e.g., cohesion, coupling, etc.) are more frequently studied than high-level ones (e.g., maintainability, reusability, etc.), (b) maintainability is the most frequently \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:CaZNVDsoPx4C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Guidelines for Managing Threats to Validity of Secondary Studies in Software Engineering",
            "Publication year": 2020,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-030-32489-6_15",
            "Abstract": "Secondary studies review and compile data retrieved from primary studies and are vulnerable to factors that threaten their validity as any other research method. Considering that secondary studies are often used to support the evidence-based paradigm, it is crucial to properly manage their threats, i.e., identify, categorize, mitigate, and report them. In this chapter, we build upon the outcomes of a systematic review of secondary studies in software engineering, which has identified (a) the most common threats to validity and corresponding mitigation actions and (b) the categories in which threats to validity can be classified, so as to guide the authors of future secondary studies in managing the threats to validity of their work. To achieve this goal, we describe (a) a classification schema for reporting threats to validity and possible mitigation actions and (b) a checklist, which authors of secondary studies can use for \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:DkZNVXde3BIC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Integrating agile practices into architectural assumption management: An industrial survey",
            "Publication year": 2019,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3319008.3319027",
            "Abstract": "Although managing architectural assumptions can benefit software development in several aspects (eg, reducing architectural misunderstanding and mismatch), the effort required is a key obstacle towards employing architectural assumption management in practice. One potential solution is to apply agile practices in order to reduce this effort. To this end, we conducted a survey with 91 practitioners to investigate the possibility of integrating agile practices into architectural assumption management in industrial practice. The results offer an overview of which agile practices can be integrated in architectural assumption management and how. Six agile practices were selected by more than half of the subjects:\" Backlog\",\" Iterative and Incremental Development\",\" Refactoring\",\" Continuous Integration\",\" Effective Communication\", and\" Just Enough Work\". Twelve agile practices were further elaborated by the subjects \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:QyXJ3EUuO1IC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Building Quality Into Learning Management Systems\u2013An Architecture-Centric Approach",
            "Publication year": 2002,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-45275-1_28",
            "Abstract": "The design and development of contemporary Learning Management Systems (LMS), is largely focused on satisfying functional requirements, rather than quality requirements, thus resulting in inefficient systems of poor software and business quality. In order to remedy this problem there is a research trend into specifying and evaluating software architectures for LMS, since quality at-tributes in a system depend profoundly on its architecture. This paper presents a case study of appraising the software architecture of a Learning Management through experience-based assessment and the use of an architectural prototype. The framework of the evaluation conducted, concerns run-time, development and business qualities. The paper concludes with the lessons learned from the evaluation, emphasizing on the compromise between them.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:R3hNpaxXUhUC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Pattern-based architecture reviews",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5661759/",
            "Abstract": "Software architecture reviews are effective in identifying potential problems in architectures, however, are expensive, time-consuming, and generally rely on extensive architecture documentation. An architecture review that accommodates projects with very short development cycles, minimal documentation, or frequently changing requirements could be useful if it identifies important architectural issues. We developed a useful, inexpensive architecture review method that uses the architecture patterns in a system to identify important issues in the achievement of quality attributes.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:L8Ckcad2t8MC",
            "Publisher": "IEEE"
        },
        {
            "Title": "SOA in variability-intensive environments: Pitfalls and best practices",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6420845/",
            "Abstract": "Software solution providers face numerous pitfalls when using standardized SOA-based solutions. One cause is variability between customer organizations\u2014for example, variability occurs in local e-government because of municipalities\u2019 autonomy when it comes to implementing national laws. This autonomy results in variations in business processes, which then cause variability in the information systems that implement them. This article presents pitfalls the authors observed in Dutch e-government, an example of a variability-intensive environment. They also present best practices that help deal with these pitfalls and organize them in an architecture pattern. Applying the pattern at more than 20 Dutch municipalities led to successful SOA implementations. Because such pitfalls are not just applicable to e-government, the proposed pattern can also be applied to other domains.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Fu2w8maKXqMC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A systematic mapping study on technical debt and its management",
            "Publication year": 2015,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121214002854",
            "Abstract": "Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system.This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM.A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013.Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected.The term \u201cdebt\u201d has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:HbR8gkJAVGIC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Exploring Technology Design Decisions in Issue Tracking Systems",
            "Publication year": 2021,
            "Publication url": "https://fse.studenttheses.ub.rug.nl/25456/1/bCS_2021_DekkerAJ.pdf",
            "Abstract": "Issue tracking systems are a means of communication for software developers, where some of the issues are about architectural design decisions. This project is focused on two types of design decisions, structural design decisions and technology design decisions. Using a self-developed program to gather issues about technology design decisions and by using a set of issues about structural design decisions, we are able to annotate the architectural knowledge concepts that are used inside the decisions. This step is followed by an extensive comparison of the architectural knowledge usage in the two issue types. This project contributes to both knowledge exploration, by giving insight in the knowledge usage, and knowledge capturing, by providing data sets that can be used for eg machine learning.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:wE-fMHVdjMkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Stories from the Front",
            "Publication year": 2018,
            "Publication url": "https://research.rug.nl/en/publications/stories-from-the-front",
            "Abstract": "Stories from the Front \u2014 the University of Groningen research portal Skip to main navigation \nSkip to search Skip to main content the University of Groningen research portal Logo Help & \nFAQ English Nederlands Home Profiles Research Units Research output Projects Datasets \nPrizes Activities Press / Media Search by expertise, name or affiliation Stories from the Front \nDavid C. Shepherd * , Paris Avgeriou * Corresponding author for this work Software Engineering \nResearch output: Contribution to journal \u203a Editorial \u203a Academic \u203a peer-review Overview Original \nlanguage English Pages (from-to) A1-A1 Number of pages 1 Journal Journal of Systems and \nSoftware Volume 146 DOIs https://doi.org/10.1016/j.jss..Publication status Published - \nDec-2018 Access to Document 10.1016/j.jss..Embargoed Document Stories from the Front \nFinal publisher's version, 309 KB Request copy Cite this APA Author BIBTEX Harvard RIS , , , '\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:AXkvAH5U_nMC",
            "Publisher": "ELSEVIER SCIENCE INC"
        },
        {
            "Title": "Modeling the variability of architectural patterns",
            "Publication year": 2010,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1774088.1774572",
            "Abstract": "Architectural patterns provide proven solutions to recurring design problems that arise in a system context. A major challenge for modeling patterns in a system design is effectively expressing pattern variability. However, modeling pattern variability in a system design remains a challenging task mainly because of the infinite pattern variants addressed by each architectural pattern. This paper is an attempt to solve this problem by categorizing the solution participants of patterns. More precisely, we identify variable participants that lead to specializations within individual pattern variants and participants that appear over and over again in the solution specified by several patterns. With examples and a case study, we demonstrate the successful applicability of this approach for designing systems. Using the UML extension mechanism, we offer extensible architectural modeling constructs that can be used for modeling \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:M05iB0D1s5AC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Using patterns to capture architectural decisions",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4267601/",
            "Abstract": "Throughout the software design process, developers must make decisions and reify them in code. The decisions made during software architecting are particularly significant in that they have system-wide implications, especially on the quality attributes. However, architects often fail to adequately document their decisions because they don't appreciate the benefits, don't know how to document decisions, or don't recognize that they're making decisions. This lack of thorough documentation. This paper provides information about a decision's rationale and consequences, architecture patterns can help architects better understand and more easily record their decisions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:2osOgNQ5qMEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Forces on architecture decisions-a viewpoint",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6337708/",
            "Abstract": "In this paper, the notion of forces as influences upon architecture decisions is introduced. To facilitate the documentation of forces as a part of architecture descriptions, we specify a decision forces viewpoint, which extends our existing framework for architecture decisions, following the conventions of the international architecture description standard ISO/IEC/IEEE 42010. The applicability of the viewpoint was validated in three case studies, in which senior software engineering students used it to document decisions in software projects, two of which conducted for industrial customers. The results show that the forces viewpoint is a well-received documentation approach, satisfying stakeholder concerns related to traceability between decision forces and architecture decisions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:JQOojiI6XY0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Patterns for Adaptive Service-Centric Systems.",
            "Publication year": 2006,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.95.8654&rep=rep1&type=pdf",
            "Abstract": "Service-centric systems are driven more and more towards self-adaptation in order to satisfy QoS in highly dynamic environments. However, the young age and immaturity of this domain, combined with the increasing size and complexity of these systems, hinder the architects from designing effectively self-adaptive systems. This paper addresses the main problems that architects face with respect to high level issues such as monitoring, evaluation of QoS, and dynamic re-configuration. All patterns relate their solutions partially to wellestablished architectural patterns, adapted to the domain of service-centric systems. The aim is to compose a unified framework in the form of a pattern language that will help architects in taking the major design decisions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:2P1L_qKh6hAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Architectural patterns in practice",
            "Publication year": 2005,
            "Publication url": "https://research.rug.nl/en/publications/architectural-patterns-in-practice",
            "Abstract": "Architectural Patterns in Practice \u2014 the University of Groningen research portal Skip to main \nnavigation Skip to search Skip to main content the University of Groningen research portal Logo \nHelp & FAQ English Nederlands Home Profiles Research Units Research output Projects \nDatasets Prizes Activities Press / Media Search by expertise, name or affiliation Architectural \nPatterns in Practice Paris Avgeriou, Uwe Zdun Software Engineering Research output: Chapter \nin Book/Report/Conference proceeding \u203a Chapter \u203a Academic 93 Downloads (Pure) Overview \nOriginal language English Title of host publication EPRINTS-BOOK-TITLE Publisher University of \nGroningen, Johann Bernoulli Institute for Mathematics and Computer Science Number of pages \n4 Publication status Published - 2005 Access to Document 2005ProcEuroPLoPAvgeriou.pdfFinal \npublisher's version, 55.6 KB Cite this APA Author BIBTEX Harvard RIS , P\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:8AbLer7MMksC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "A reference architecture for healthcare supportive home systems",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7167518/",
            "Abstract": "Ambient Assisted Living (AAL) has become focus of attention for governmental organisations, and healthcare and ICT researchers. AAL includes methods, products, services, and software systems to support the everyday lives of elders. To develop AAL software systems, reference architectures (i.e., a special software architecture that guides the development, standardization, and evolution of systems architectures) have been proposed. Despite of the existing reference architectures, their use is a difficult task, due their high level of abstraction. Moreover, these architectures do not support the development of systems for telemonitoring and self-management of chronic diseases at home. The main objective of this project is to propose a reference architecture for Healthcare Supportive Home (HSH) systems. With this project we will contribute in promoting and reusing the knowledge of expertise and in supporting the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:YohjEiUPhakC",
            "Publisher": "IEEE"
        },
        {
            "Title": "WOnDA: An extensible multi-platform hypermedia design model",
            "Publication year": 2002,
            "Publication url": "https://link.springer.com/chapter/10.1007/3-540-46105-1_25",
            "Abstract": "The design and development of hypermedia applications that are deployed on the Web and other delivery platforms is largely conducted on an intuitive, ad hoc basis, thus resulting in inefficient systems that are hard to modify, maintain and port to alternative platforms. There are now justifiable research and development efforts that attempt to formalize the engineering process of such systems in order to achieve certain quality attributes like modifiability, maintainability and portability. This paper presents such an attempt for designing a conceptual model of a hypermedia application that allows for easy update and alteration of its content as well as its presentation and also allows for deployment in various platforms. In specific this model explicitly separates the hypermedia content from its presentation to the user, by employing XML content storage and XSL transformations. Our work is based upon the empirical \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:_Qo2XoVZTnwC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "A practice-driven systematic review of dependency analysis solutions",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-011-9158-8",
            "Abstract": "When following architecture-driven strategies to develop large software-intensive systems, the analysis of the dependencies is not an easy task. In this paper, we report a systematic literature review on dependency analysis solutions. Dependency analysis concerns making dependencies due to interconnections between programs or system components explicit. The review is practice-driven because its research questions, execution, and reporting were influenced by the practice of a group of software architects at Philips Healthcare MRI. The review results in an overview and assessment of the state-of-the-art and applicability of dependency analysis. The overview provides insights about definitions related to dependency analysis, the sort of development activities that need dependency analysis, and the classification and description of a number of dependency analysis solutions. The contribution of this \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:eflP2zaiRacC",
            "Publisher": "Springer US"
        },
        {
            "Title": "Combining architectural patterns and software technologies in one design language",
            "Publication year": 2011,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.456.4638&rep=rep1&type=pdf",
            "Abstract": "Software technologies like frameworks, APIs, or libraries are pieces of software that can be used to solve recurring problems in particular domains. Just like patterns, they can be documented in a way that explicitly describes the context, in which they can be used; the problems they solve, and the solutions they imply. Based on this assumption, software technologies and patterns can be treated equally as architectural solutions capturing reusable architectural knowledge. In this paper, we describe the idea of relating patterns and technologies from a specific domain in one design language that provides useful guidance for software engineers who need to become familiar with the domain.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:UxriW0iASnsC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Empirical evaluation of a process to increase consensus in group architectural decision making",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584915002049",
            "Abstract": "Many software architectural decisions are group decisions rather than decisions made by individuals. Consensus in a group of decision makers increases the acceptance of a decision among decision makers and their confidence in that decision. Furthermore, going through the process of reaching consensus means that decision makers understand better the decision (including the decision topic, decision options, rationales, and potential outcomes). Little guidance exists on how to increase consensus in group architectural decision making.We evaluate how a newly proposed process (named GADGET) helps architects increase consensus when making group architectural decisions. Specifically, we investigate how well GADGET increases consensus in group architectural decision making, by understanding its practical applicability, and by comparing GADGET against group architectural decision \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:bKqednn6t2AC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Incorporating fault tolerance tactics in software architecture patterns",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1479772.1479775",
            "Abstract": "One important way that an architecture impacts fault tolerance is by making it easy or hard to implement measures that improve fault tolerance. Many such measures are described as fault tolerance tactics. We studied how various fault tolerance tactics can be implemented in the best-known architecture patterns. This shows that certain patterns are better suited to implementing fault tolerance tactics than others, and that certain alternate tactics are better matches than others for a given pattern. System architects can use this data to help select architecture patterns and tactics for reliable systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:qxL8FJ1GzNcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Industrial Evaluation of an architectural assumption Documentation tool: a Case Study",
            "Publication year": 2021,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=T19CEAAAQBAJ&oi=fnd&pg=PA253&dq=info:o_FS8Dbo_rgJ:scholar.google.com&ots=kXFfX-q-3l&sig=mwpGzg5jTPkaBzo1xTjAYkfgbxU",
            "Abstract": "According to Kruchten et al.[1], the concept of architectural knowledge consists of architecture design as well as the design decisions, assumptions, context, and other factors that together determine why a particular solution is the way it is. In this work we adopt the definition of architectural assumption (AA) from our previous work: AAs are architectural knowledge taken for granted or accepted as true without evidence [2]. This definition of AA emphasizes the characteristic of uncertainty in architectural knowledge: stakeholders believe but cannot prove, for instance, the importance, impact, or correctness of specific architectural knowledge. In addition to being a type of architectural knowledge, assumptions are also a type of artifact. As defined by Kroll and",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:SnGPuo6Feq8C",
            "Publisher": "Auerbach Publications"
        },
        {
            "Title": "Variability in quality attributes of service-based software systems: A systematic literature review",
            "Publication year": 2013,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584912001772",
            "Abstract": "Variability is the ability of a software artifact (e.g., a system, component) to be adapted for a specific context, in a preplanned manner. Variability not only affects functionality, but also quality attributes (e.g., security, performance). Service-based software systems consider variability in functionality implicitly by dynamic service composition. However, variability in quality attributes of service-based systems seems insufficiently addressed in current design practices.We aim at (a) assessing methods for handling variability in quality attributes of service-based systems, (b) collecting evidence about current research that suggests implications for practice, and (c) identifying open problems and areas for improvement.A systematic literature review with an automated search was conducted. The review included studies published between the year 2000 and 2011. We identified 46 relevant studies \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:ZuybSZzF8UAC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Towards a pattern language for learning management systems",
            "Publication year": 2003,
            "Publication url": "https://www.jstor.org/stable/pdf/jeductechsoci.6.2.11.pdf",
            "Abstract": "Learning Management Systems are sophisticated web-based applications that are being engineered today in increasing numbers by numerous institutions and companies that want to get involved in e-learning either for providing services to third parties, or for educating and training their own people. Even though the construction of such systems has been taking place for many years, they are still designed and developed from scratch. The reason is that experience from previous Learning Management Systems, is not codified or documented, resulting in forcing the development teams to \u2018re-invent the wheel\u2019. This paper presents an approach of recording design experience in the form of design patterns for Learning Management Systems and aims at developing a pattern language for these systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:u5HHmVD_uO8C",
            "Publisher": "International Forum of Educational Technology & Society"
        },
        {
            "Title": "The financial aspect of managing technical debt: A systematic literature review",
            "Publication year": 2015,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584915000762",
            "Abstract": "Technical debt is a software engineering metaphor, referring to the eventual financial consequences of trade-offs between shrinking product time to market and poorly specifying, or implementing a software product, throughout all development phases. Based on its inter-disciplinary nature, i.e. software engineering and economics, research on managing technical debt should be balanced between software engineering and economic theories.The aim of this study is to analyze research efforts on technical debt, by focusing on their financial aspect. Specifically, the analysis is carried out with respect to: (a) how financial aspects are defined in the context of technical debt and (b) how they relate to the underlying software engineering concepts.In order to achieve the abovementioned goals, we employed a standard method for SLRs and applied it on studies retrieved from seven general-scope \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:rmuvC79q63oC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Collaborative software architecting through knowledge sharing",
            "Publication year": 2010,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-10294-3_17",
            "Abstract": "In the field of software architecture, there has been a paradigm shift from describing the outcome of the architecting process to documenting architectural knowledge, such as design decisions and rationale. Moreover, in a global, distributed setting, software architecting is essentially a collaborative process in which sharing and reusing architectural knowledge is a crucial and indispensible part. Although the importance of architectural knowledge has been recognized for a considerable period of time, there is still no systematic process emphasizing the use of architectural knowledge in a collaborative context. In this chapter, we present a two-part solution to this problem: a collaborative architecting process based on architectural knowledge and an accompanying tool suite that demonstrates one way to support the process.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:8k81kl-MbHgC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Investigating the effect of design patterns on energy consumption",
            "Publication year": 2017,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1851",
            "Abstract": "Gang of Four (GoF) patterns are well\u2010known best practices for the design of object\u2010oriented systems. In this paper, we aim at empirically assessing their relationship to energy consumption, ie, a performance indicator that has recently attracted the attention of both researchers and practitioners. To achieve this goal, we investigate pattern\u2010participating methods (ie, those that play a role within the pattern) and compare their energy consumption to the consumption of functionally equivalent alternative (nonpattern) solutions. We obtained the alternative solution by refactoring the pattern instances using well\u2010known transformations (eg, replace polymorphism with conditional statements). The comparison is performed on 169 methods of 2 GoF patterns (namely, State/Strategy and Template Method), retrieved from 2 well\u2010known open source projects. The results suggest that for the majority of cases the alternative design \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:uDGL6kOW6j0C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Architecture-centric evolution: new issues and trends",
            "Publication year": 2006,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-71774-4_11",
            "Abstract": "Software evolution has largely been focused on low-level implementation artefacts through refactoring techniques rather than the architectural level. However code-centric evolution techniques have not managed to effectively solve the problems that software evolution entails. Instead a paradigm shift is emerging, where the evolution approaches put software architecture on the spotlight. This shift focuses on effectively documenting and modifying the architectural design decisions during system evolution, while synchronizing them with both the requirements and the implementation. The second workshop on the theme of Architecture-Centric Evolution attempted to explore the issues that such evolution approaches are dealing with, as well as the trends that emerge in this area. The workshop delved into this field, by presenting the latest research advances and by facilitating discussions between experts.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:g5m5HwL7SMYC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Can Clean New Code reduce Technical Debt Density",
            "Publication year": 2020,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9234106/",
            "Abstract": "While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt. In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density. Furthermore, we study whether there is a relation between code quality practices and the \u201ccleanness\u201d of new code. To obtain the required data, we have performed \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:TlpoogIpr_IC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A variability viewpoint for enterprise software systems",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6337733/",
            "Abstract": "Many of today's enterprise software systems are subject to variability. For example, enterprise software systems often run in different business units of an organization, with each unit having its own detailed requirements. Systematic handling of variability allows a software system to be adjusted for different contexts, by planning for adaptation during architecture design. As variability is system-wide, it is reflected in the software architecture. To facilitate the representation and analysis of variability in the architecture of enterprise software systems, we propose an architecture viewpoint. To define a reusable variability viewpoint, we elicited stakeholders and concerns through exploratory studies. We also show how the viewpoint was applied for describing variability in a large-scale e-government system.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:UHK10RUVsp4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Knowledge architect: A tool suite for managing software architecture knowledge",
            "Publication year": 2009,
            "Publication url": "https://core.ac.uk/download/pdf/148192683.pdf",
            "Abstract": "Management of software architecture knowledge (AK) is vital for improving an organization\u2019s architectural capabilities. To support the architecting process within our industrial partner: Astron, the Dutch radio astronomy institute, we implemented the Knowledge Architect (KA): a tool suite for creating, using, translating, sharing and managing AK. The KA tool suite entails specialized support for integrating the various process activities and supporting collaboration between the stakeholders. This report discusses the tools included and features of KA. We also discuss different usages of the KA for capturing and using AK to support the architecture process.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:4TOpqqG69KYC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Improving Architectural Knowledge Management in Public Sector Organizations-an Interview Study (S).",
            "Publication year": 2013,
            "Publication url": "http://www.cs.rug.nl/paris/papers/SEKE13.pdf",
            "Abstract": "Architecting software systems is a knowledge-intensive activity. It requires significant knowledge about architecting in general, but also about domains and technologies. Such knowledge should be managed systematically to make it available throughout the whole software development cycle (eg to facilitate maintenance). Architectural knowledge management (AKM) literature covers organizations in the private sector (eg software vendors). However, there is a lack of studies on AKM practices in public sector organizations (eg municipalities), even though AKM practices in the public sector are immature. Therefore, we propose applying lessons from AKM practices found in the private sector to address AKM challenges in the public sector. Thus, we conducted an interview study with four public and four private sector organizations. We identified challenges for AKM in the public sector. Then, we derived solutions from the private sector to the challenges in the public sector. The main challenges in the public sector are vaporization of architectural knowledge, insufficient knowledge sharing, and organizational cultures that do not encourage AKM. Solutions to these challenges include community building, improved tool support, quality control and management support. The results help improve AKM practices in the public sector.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ML0RJ9NH7IQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Tool support for architectural decisions",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4077021/",
            "Abstract": "In contrast to software architecture models, architectural decisions are often not explicitly documented, and therefore eventually lost. This contributes to major problems such as high-cost system evolution, stakeholders mis-communication, and limited reusability of core system assets. An approach is outlined that systematically and semi-automatically documents architectural decisions and allows them to be effectively shared by the stakeholders. A first attempt is presented that partially implements the approach by binding architectural decisions, models and the system implementation. The approach is demonstrated with an example demonstrating its usefulness with regards to some industrial use cases.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:d1gkVwhDpl0C",
            "Publisher": "Ieee"
        },
        {
            "Title": "Do practitioners intentionally repay their own Technical Debt and why?",
            "Publication year": 2021,
            "Publication url": "https://research.rug.nl/en/publications/do-practitioners-intentionally-repay-their-own-technical-debt-and",
            "Abstract": "The impact of Technical Debt (TD) on software maintenance and evolution is of great concern, but recent evidence shows that a considerable amount of TD is fixed by the same developers who introduced it; this is termed self-fixed TD. This characteristic of TD management can potentially impact team dynamics and practices in managing TD. However, the initial evidence is based on low-level source code analysis; this casts some doubt whether practitioners repay their own debt intentionally and under what circumstances. To address this gap, we conducted an online survey on 17 well-known Java and Python open-source software communities to investigate practitioners\u2019 intent and rationale for self-fixing technical debt. We also investigate the relationship between human-related factors (eg, experience) and self-fixing. The results, derived from the responses of 181 participants, show that a majority addresses their own debt consciously and often. Moreover, those with a higher level of involvement (eg, more experience in the project and number of contributions) tend to be more concerned about self-fixing TD. We also learned that the sense of responsibility is a common self-fixing driver and that decisions to fix TD are not superficial but consider balancing costs and benefits, among other factors. The findings in this paper can lead to improving TD prevention and management strategies.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:2ywjKiB__4kC",
            "Publisher": "Unknown"
        },
        {
            "Title": "An industrial case study on variability handling in large enterprise software systems",
            "Publication year": 2015,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584914002572",
            "Abstract": "Enterprise software systems (e.g., enterprise resource planning software) are often deployed in different contexts (e.g., different organizations or different business units or branches of one organization). However, even though organizations, business units or branches have the same or similar business goals, they may differ in how they achieve these goals. Thus, many enterprise software systems are subject to variability and adapted depending on the context in which they are used.Our goal is to provide a snapshot of variability in large scale enterprise software systems. We aim at understanding the types of variability that occur in large industrial enterprise software systems. Furthermore, we aim at identifying how variability is handled in such systems.We performed an exploratory case study in two large software organizations, involving two large enterprise software systems. Data were \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:foquWX3nUaYC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "An enhanced architectural knowledge metamodel linking architectural design decisions to other artifacts in the software engineering lifecycle",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-23798-0_33",
            "Abstract": "Software architects create and consume many interrelated artifacts during the architecting process. These artifacts may represent functional and nonfunctional requirements, architectural patterns, infrastructure topology units, code, and deployment descriptors as well as architecturally significant design decisions. Design decisions have to be linked to chunks of architecture description in order to achieve a fine-grained control when a design is modified. Moreover, it is imperative to identify quickly the key decisions affected by a runtime change that are critical for a system\u2019s mission. This paper extends previous work on architectural knowledge with a metamodel for architectural decision capturing and sharing to: (i) create and maintain fine-grained dependency links between the entities during decision identification, making, and enforcement, (ii) keep track of the evolution of the decisions, and (iii) support \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:V3AGJWp-ZtQC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Fifth International Workshop on Sharing and Reusing Architectural Knowledge (SHARK 2010)",
            "Publication year": 2010,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1810295.1810417",
            "Abstract": "Architectural Knowledge (AK) is defined as the integrated representation of the software architecture of a software-intensive system or family of systems along with architectural decisions and their rationale, external influence and the development environment. The SHARK workshop series focuses on current methods, languages, and tools that can be used to extract, represent, share, apply, and reuse AK, and the experimentation and/or exploitation thereof. This fifth edition of SHARK will discuss, among other topics, the contributions of this community to a Body of Knowledge on software architecture.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:PELIpwtuRlgC",
            "Publisher": "Unknown"
        },
        {
            "Title": "QRS 2018 Keynote Speeches",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8431941/",
            "Abstract": "We may not all agree on the precise semantics of the term Technical Debt, but it is undeniably part of the everyday vocabulary of software engineers. We know that it concerns compromises to the internal quality of a system, made either deliberately or inadvertently. We understand that it's not all bad, as it may have served the purpose of expediency at some point. But, a perfect storm is brewing for large complex systems: if we do not manage Technical Debt, it is threatening to \u201cbankrupt\u201d those systems. In this talk we revisit the state of the art to discuss the challenges and examine what theories and practices are offered to help manage Technical Debt. Finally, we discuss some promising future directions in the field, including relations to run-time qualities.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:SjuI4pbJlxcC",
            "Publisher": "IEEE"
        },
        {
            "Title": "REI: An integrated measure for software reusability",
            "Publication year": 2019,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2216",
            "Abstract": "To capitalize upon the benefits of software reuse, an efficient selection among candidate reusable assets should be performed in terms of functional fitness and adaptability. The reusability of assets is usually measured through reusability indices. However, these do not capture all facets of reusability, such as structural characteristics, external quality attributes, and documentation. In this paper, we propose a reusability index (REI) as a synthesis of various software metrics and evaluate its ability to quantify reuse, based on IEEE Standard on Software Metrics Validity. The proposed index is compared with existing ones through a case study on 80 reusable open\u2010source assets. To illustrate the applicability of the proposed index, we performed a pilot study, where real\u2010world reuse decisions have been compared with decisions imposed by the use of metrics (including REI). The results of the study suggest that the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:-95Q15plzcUC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Towards a pattern language for networked learning",
            "Publication year": 2004,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.711.8886&rep=rep1&type=pdf",
            "Abstract": "The work of designing a useful, convivial networked learning environment is complex and demanding. People new to designing for networked learning face a number of major challenges when they try to draw on the experience of others\u2013whether that experience is shared informally, in the everyday language of educational practice, or through published research and evaluation studies, or through sets of action-oriented guidelines. In this paper we present a novel approach to sharing educational design experience, making use of an organisational and communicative framework derived from Christopher Alexander\u2019s work on pattern languages. We describe the structure and purpose of design patterns, show how they fit together in a pattern language, and illustrate the approach with reference to some design patterns for networked learning. For clarity, our presentation is set within a specific conception of the nature of designing for networked learning, but we aim to show how the patterns-based approach transcends such particularities. We suggest that design patterns offer a useful method for sharing design ideas in participatory educational design work.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:9yKSN-GCB0IC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Exploring Web Search Engines to Find Architectural Knowledge",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9426740/",
            "Abstract": "Software engineers need relevant and up-to-date architectural knowledge (AK), in order to make well-founded design decisions. However, finding such AK is quite challenging. One pragmatic approach is to search for AK on the web using traditional search engines (e.g. Google); this is common practice among software engineers. Still, we know very little about what AK is retrieved, from where, and how useful it is. In this paper, we conduct an empirical study with 53 software engineers, who used Google to make design decisions using the AttributeDriven-Design method. Based on how the subjects assessed the nature and relevance of the retrieved results, we determined how effective web search engines are to find relevant architectural information. Moreover, we identified the different sources of AK on the web and their associated AK concepts.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:CYCckWUYoCcC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Decision architect\u2013A decision documentation tool for industry",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121215002290",
            "Abstract": "Architecture decisions are often not explicitly documented in practice, even though explicit capturing and documentation of architecture decisions has been associated with a multitude of benefits. Several decision documentation tools have been proposed but they often do not meet the expectations and needs of the industry. As part of a research collaboration with ABB, we developed a decision documentation tool that aims to ensure industrial applicability. This tool is an add-in for Enterprise Architect and is an implementation of a viewpoint-based decision documentation framework. To validate the add-in, we conducted a case study with architects from ABB. In this study, we assessed to what extent and why software architects intend to use our approach. We therefore investigated the perceived usefulness, perceived ease-of-use, and contextual factors threat influence the architect\u2019s intention to use the tool. We \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:DJbcl8HfkQkC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Sharing the architectural knowledge of quantitative analysis",
            "Publication year": 2008,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-87879-7_14",
            "Abstract": "Sharing the architectural knowledge of architectural analysis among stakeholders proves to be troublesome. This causes problems in and with architectural analysis, which can have serious consequences for the quality of a system being developed, as this quality might be incompletely or wrongly assessed. This paper presents a domain model, which can be used as a common ground among analysts and architects to capture and explicitly share such knowledge. This enables a way to overcome some of the obstacles imposed by the multi-disciplinary context in which architectural analysis takes place. To apply the domain model in practice, we have created a tool implementing (part of) this domain model for capturing and using explicit architectural knowledge during analysis. We validate the tool and domain model in the context of an industrial case study.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:WF5omc3nYNoC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "m-WOnDA: The\u201d Write Once \u2018n\u2019Deliver Anywhere \u201cModel for Mobile Users",
            "Publication year": 2002,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-45275-1_18",
            "Abstract": "The design and development of hypermedia applications that are deployed on the Wireless World Wide Web is a daunting task because of the various available platforms and the restrictions and capabilities imposed by the lack of established standards and the exponentially increasing number of emerging platforms. There are now justifiable research and development efforts that attempt to formalize the engineering process of such applications in order to achieve certain quality attributes like modifiability, maintainability and portability. This paper presents such an attempt for designing a conceptual model for hypermedia applications that allows for easy update and alteration of its content as well as its presentation and also allows for deployment in various mobile platforms. In specific this model explicitly separates the hypermedia content from its presentation to the user, by employing XML content storage \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:NaGl4SEjCO4C",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Describing, instantiating and evaluating a reference architecture: A case study",
            "Publication year": 2003,
            "Publication url": "https://core.ac.uk/download/pdf/148284222.pdf",
            "Abstract": "The result of a domain maturing is the emergence of reference architectures that offer numerous advantages to software architects and other stakeholders. However there is no straightforward way to describe a reference architecture and in sequence to design instances for specific systems, while at the same time assuring the quality of the end product. This paper presents an approach of describing a reference architecture, instantiating it into a software architecture by making implementation decisions and evaluating it with respect to quality attributes. A case study for the approach is drawn from the domain of Learning Management Systems which is maturing and would greatly benefit from a reference architecture. This work is based upon the IEEE standard for architectural description, on wellestablished software engineering practices, and on the empirical results of designing, developing and evaluating Learning Management Systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:M3NEmzRMIkIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Introduction: Relating requirements and architectures",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-21001-3_1",
            "Abstract": "This book describes current understanding and use of the relationship between software requirements and software architectures.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:7T2F9Uy0os0C",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "The effect of GoF design patterns on stability: a case study",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7066925/",
            "Abstract": "Stability refers to a software system's resistance to the \u201cripple effect\u201d, i.e., propagation of changes. In this paper, we investigate the stability of classes that participate in instances/occurrences of GoF design patterns. We examine whether the stability of such classes is affected by (a) the pattern type, (b) the role that the class plays in the pattern, (c) the number of pattern occurrences in which the class participates, and (d) the application domain. To this end, we conducted a case study on about 65.000 Java open-source classes, where we performed change impact analysis on classes that participate in zero, one (single pattern), or more than one (coupled) pattern occurrences. The results suggest that, the application of design patterns can provide the expected \u201cshielding\u201d of certain pattern-participating classes against changes, depending on their role in the pattern. Moreover, classes that participate in coupled pattern \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:PVjk1bu6vJQC",
            "Publisher": "IEEE"
        },
        {
            "Title": "On the temporality of introducing code technical debt",
            "Publication year": 2020,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-030-58793-2_6",
            "Abstract": "Code Technical Debt (TD) is intentionally or unintentionally created when developers introduce inefficiencies in the codebase. This can be attributed to various reasons such as heavy work-load, tight delivery schedule, unawareness of good practices, etc. To shed light into the context that leads to technical debt accumulation, in this paper we investigate: (a) the temporality of code technical debt introduction in new methods, i.e., whether the introduction of technical debt is stable across the lifespan of the project, or if its evolution presents spikes; and (b) the relation of technical debt introduction and the development team\u2019s workload in a given period. To answer these questions, we perform a case study on twenty-seven Apache projects, and inspect the number of Technical Debt Items introduced in 6-month sliding temporal windows. The results of the study suggest that: (a) overall, the number of Technical \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:rTD5ala9j4wC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Application of knowledge-based approaches in software architecture: A systematic mapping study",
            "Publication year": 2013,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584912002315",
            "Abstract": "Knowledge management technologies have been employed across software engineering activities for more than two decades. Knowledge-based approaches can be used to facilitate software architecting activities (e.g., architectural evaluation). However, there is no comprehensive understanding on how various knowledge-based approaches (e.g., knowledge reuse) are employed in software architecture.This work aims to collect studies on the application of knowledge-based approaches in software architecture and make a classification and thematic analysis on these studies, in order to identify the gaps in the existing application of knowledge-based approaches to various architecting activities, and promising research directions.A systematic mapping study is conducted for identifying and analyzing the application of knowledge-based approaches in software architecture, covering the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:uLbwQdceFCQC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Defining execution viewpoints for a large and complex software-intensive system",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5290784/",
            "Abstract": "An execution view is an important asset for developing large and complex systems. An execution view helps practitioners to describe, analyze, and communicate what a software system does at runtime and how it does it. In this paper, we present an approach to define execution viewpoints for an existing large and complex software intensive system. This definition approach enables the customization and extension of a set of predefined viewpoints to address the requirements of a specific development organization. The application of this approach has helped us to identify a set of execution viewpoints that we are currently using to construct execution views of an MRI system, a large software-intensive system in the healthcare domain.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:MXK_kJrjxJIC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Leveraging architecture patterns to satisfy quality attributes",
            "Publication year": 2007,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-75132-8_21",
            "Abstract": "Architectural design has been characterized as making a series of decisions that have system-wide impact. These decisions have side effects which can have significant impact on the system. However, the impact may be first understood much later; when the system architecture is difficult to change. Architecture patterns can help architects understand the impact of the architectural decisions at the time these decisions are made, because patterns contain information about consequences and context of the pattern usage. However, this information has been of limited use because it is not presented consistently or systematically. We discuss the current limitations of patterns on evaluating their impact on quality attributes, and propose integrating the information of patterns\u2019 impact on quality attributes in order to increase the usefulness of architecture patterns.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:_FxGoFyzp5QC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Do practitioners intentionally self-fix Technical Debt and why?",
            "Publication year": 2021,
            "Publication url": "https://arxiv.org/abs/2106.11904",
            "Abstract": "The impact of Technical Debt (TD) on software maintenance and evolution is of great concern, but recent evidence shows that a considerable amount of TD is fixed by the same developers who introduced it; this is termed self-fixed TD. This characteristic of TD management can potentially impact team dynamics and practices in managing TD. However, the initial evidence is based on low-level source code analysis; this casts some doubt whether practitioners repay their own debt intentionally and under what circumstances. To address this gap, we conducted an online survey on 17 well-known Java and Python open-source software communities to investigate practitioners' intent and rationale for self-fixing technical debt. We also investigate the relationship between human-related factors (e.g., experience) and self-fixing. The results, derived from the responses of 181 participants, show that a majority addresses their own debt consciously and often. Moreover, those with a higher level of involvement (e.g., more experience in the project and number of contributions) tend to be more concerned about self-fixing TD. We also learned that the sense of responsibility is a common self-fixing driver and that decisions to fix TD are not superficial but consider balancing costs and benefits, among other factors. The findings in this paper can lead to improving TD prevention and management strategies.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:YlPif8NxrbYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Naive architecting-understanding the reasoning process of students",
            "Publication year": 2010,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-15114-9_5",
            "Abstract": "Software architecting entails making architecture decisions, which requires a lot of experience and expertise. Current literature contains several methods and processes to support architects with architecture design, documentation and evaluation but not with the design reasoning involved in decision-making. In order to derive a systematic reasoning process we need to understand the current state of practice and propose ways to improve it. In this paper we present the results of a survey that was conducted with undergraduate software engineering students, aiming to find out the innate reasoning process during architecting. The results of the survey are compared to the existing architecture literature in order to identify promising directions towards systematic reasoning processes.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ns9cj8rnVeAC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Variability in software architecture: current practice and challenges",
            "Publication year": 2011,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2020976.2020978",
            "Abstract": "Variability in software-intensive systems is usually understood as the ability of a software artifact to be changed in order to fit different contexts, environments, or purposes. Software architecture on the other hand determines the structure of a software system, and is described in an architecture description. This description includes the major stakeholders of a software system and their concerns. Variability is reflected in and facilitated through the software architecture. The First International Workshop on Variability in Software Architecture (VARSA) was held jointly with WICSA 2011 in Boulder, Colorado. The goal of the workshop was to explore and advance the state-of-the art in variability in software architecture. It featured four research paper presentations, two invited talks, and three working groups that discussed specific topics. This report summarizes the themes of the workshop, presents the results of the working \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:5Ul4iDaHHb8C",
            "Publisher": "ACM"
        },
        {
            "Title": "Proceedings of the 6th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems (SESoS 2018) at the 40th International Conference on Software Engineering (ICSE 2018)",
            "Publication year": 2018,
            "Publication url": "https://hal.archives-ouvertes.fr/hal-02570260/",
            "Abstract": "UNIV-TLSE3| UT1-CAPITOLE| UNIV-RENNES1| INRIA| UNIV-TLSE2| INSA-TOULOUSE| UNIV-RENNES| INSA-GROUPE| LAAS| IRISA| CNRS| CENTRALESUPELEC| IRISA_UBS| UR1-UFR-ISTIC| UBS| LAAS-RISC| LAAS-SARA| LAAS-RESEAUX-ET-COMMUNICATIONS| INSTITUT-TELECOM| INSA-RENNES",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:WAzi4Gm8nLoC",
            "Publisher": "ACM"
        },
        {
            "Title": "Applying Patterns in Embedded Systems Design for Managing Quality Attributes and Their Trade-offs",
            "Publication year": 2019,
            "Publication url": "https://core.ac.uk/download/pdf/232523186.pdf",
            "Abstract": "Embedded systems comprise one of the most important types of software-intensive systems, as they are pervasive and used in daily life more than any other type, eg, in cars or in electrical appliances. When these systems operate under hard constraints, the violation of which can lead to catastrophic events, the system is classified as a critical embedded system (CES). The quality attributes related to these hard constraints are named critical quality attributes. For example, the performance and security of the software for cruise-control, automatic braking, or self-driving in a car are critical as they can potentially relate to harming human lives. Despite the growing body of knowledge on engineering CESs, there is still a lack of approaches that can support the design of CES, while managing critical quality attributes and their trade-offs with noncritical ones. To address this gap, this dissertation explored the state of research and practice on designing CES and managing quality trade-offs, identified approaches to improve the design of CES with regards to managing quality attributes and their trade-offs, and empirically investigated the merit of these approaches.To investigate the state-of-practice, we explored the actual trade-offs between quality attributes (both critical and noncritical) in real systems. The results showed that trade-offs favor certain critical quality attributes against noncritical ones (eg, security for extendibility) or other critical quality attributes (eg, correctness for performance). In addition, these trade-offs between critical and noncritical quality attributes are more recurrent in the domain of CESs. These observations suggest that certain trade \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:PkcyUWeTMh0C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Qualitative analysis of the impact of soa patterns on quality attributes",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6319243/",
            "Abstract": "Software architecture patterns are proven and reusable solutions to common architecture design problems. One characteristic of architecture patterns is that they affect quality attributes (e.g., performance, reliability). Over the past years, architecture patterns for service-based systems have been proposed. In this paper we report initial findings about the impact of architecture patterns for service-based systems on quality attributes of service-based systems. We related more than 70 SOA patterns from a patterns catalogue to a quality model for service-based systems. Based on the description of the patterns in the catalogue, we characterized the interaction of patterns and quality attributes. We found several patterns which do not seem to explicitly address quality attributes. Our findings can be used to select SOA patterns for architecture design. Also, our findings point to directions for further research: Our preliminary \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:hkOj_22Ku90C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Architecture-centric evolution",
            "Publication year": 2006,
            "Publication url": "https://core.ac.uk/download/pdf/232379179.pdf",
            "Abstract": "Despite the general acceptance of software architecture as a pivotal player in software engineering, software evolution techniques have been traditionally concentrated on the code level. The state-of-the-practice is comprised of refactoring and re-engineering techniques that focus on code artefacts. However, recent advances have shifted the focus of evolution from the code level towards higher levels of abstraction and particularly the architectural level. The grounds behind this trend is that architecture captures the architectural knowledge (and particularly the design decisions and their rationale) for the whole system. Architecture can thus facilitate making new design decisions during evolution cycles, having full knowledge of past decisions. Furthermore the revision of nonfunctional requirements and especially cross-cutting issues can only be managed efficiently at an architectural level. The Workshop on Architecture-Centric Evolution (ACE 2005) attempted to explore the evolution of software systems based on their architecture. The workshop delved into this field, by presenting the latest research advances and by facilitating discussions between experts.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:SeFeTyx0c_EC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "The use of pattern participants relationships for integrating patterns: a controlled experiment",
            "Publication year": 2013,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.1121",
            "Abstract": "Architectural patterns are often applied in combination with related patterns within software architectures. The relationships among architectural patterns must be considered when applying a combination of patterns into a system; for example the way the Model\u2010View\u2010Controller uses the Observer pattern to implement the change propagation mechanism needs to be carefully designed. However, effective integration of architectural patterns within software architectures remains a challenging task. This is because the integration of any two architectural patterns can take several forms. Furthermore, existing pattern languages define generic and abstract relationships between architectural patterns without going into detail about associations among the participants of architectural patterns. In this paper, we propose to address the pattern integration issue by discovering and defining a set of pattern participants \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:35N4QoGY0k4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "The risk of generating technical debt interest: a case study",
            "Publication year": 2021,
            "Publication url": "https://link.springer.com/article/10.1007/s42979-020-00406-6",
            "Abstract": "Technical Debt (TD) interest refers to the extra maintenance costs incurred by the very existence of TD items in a system. The generation of TD interest can make or break a system: too little interest and the effect of TD is negligible; too much interest and the system becomes unsustainable. In this paper, we consider the generation of interest as a risk and present a metric to quantify this risk. Subsequently, we validate this metric in two ways. First, we explore whether the metric can be effectively used to prioritize TD remediation. Second, we investigate if adding new code reduces the risk of interest generation. The results of the study suggest that: (a) the proposed risk management metric is capable of efficiently prioritizing TD items; and (b) that the new code that is introduced in the system is usually less risky for producing interest, compared to legacy code.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:wvYxNZNCP7wC",
            "Publisher": "Springer Singapore"
        },
        {
            "Title": "Workshop on Variability in Software Product Line Architectures (VARI-ARCH 2010)",
            "Publication year": 2010,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1842752.1842809",
            "Abstract": "The objective of this workshop is to bring together researchers from the software product line community and software architecture community to identify critical challenges and progress the state-of-the-art on variability in software product line architectures.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:fQNAKQ3IYiAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Foreword: towards reference architectures for systems-of-systems",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7179216/",
            "Abstract": "Currently, software-intensive systems have become larger and complex, resulting from the interoperability of several sometimes distributed, independent systems so that emergent, broader missions can be performed. So referred as Systems-of-Systems (SoS), this new class of systems has emerged in special in critical application domains. In another perspective, reference architecture is a special type of software architecture that has provided a considerable support to the development, evolution, and also standardization of systems of given application domains. Considering their usefulness, reference architectures are even more important to SoS than they have been today, by making it possible to mainly promote interoperability among constituent systems of SoS. Adequate interoperability in SoS has been still a great challenge to the community. In this scenario, this foreword arises challenges in this new research \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:mlAyqtXpCwEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Analysis of architecture pattern usage in legacy system architecture documentation",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4459153/",
            "Abstract": "Architecture patterns are an important tool in architectural design. However, while many architecture patterns have been identified, there is little in-depth understanding of their actual use in software architectures. For instance, there is no overview of how many patterns are used per system or which patterns are the most common or most important for particular domains. In addition, little is known of how architecture patterns ay interact with each other. We studied architecture documentation of 47 systems to learn about their architecture patterns. Most systems had two or more architecture patterns, and certain patterns were prominent in different application domains. We identified several patterns that are commonly used together, and are beginning to learn how such combinations may impact system quality attributes. This information can be used to help designers select architecture patterns, can help people learn \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:5nxA0vEk-isC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A method for assessing class change proneness",
            "Publication year": 2017,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3084226.3084239",
            "Abstract": "Change proneness is a quality characteristic of software artifacts that represents their probability to change in the future due to:(a) evolving requirements,(b) bug fixing, or (c) ripple effects. In the literature, change proneness has been associated with many negative consequences along software evolution. For example, artifacts that are change-prone tend to produce more defects, and accumulate more technical debt. Therefore, identifying and monitoring modules of the system that are change-prone is of paramount importance. Assessing change proneness requires information from two sources:(a) the history of changes in the artifact as a proxy of how frequently the artifact itself is changing, and (b) the source code structure that affects the probability of a change being propagated among artifacts. In this paper, we propose a method for assessing the change proneness of classes based on the two aforementioned \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:BzfGm06jWhQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Software architecture description and UML",
            "Publication year": 2004,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-31797-5_3",
            "Abstract": "The description of software architectures has always been concerned with the definition of the appropriate languages for designing the various architectural artifacts. Over the past ten years, formal or less formal Architecture Description Languages (ADLs) and supporting methods and tools have been proposed by researchers. More recently, UML has been widely accepted in both industry and academia as a language for Architecture Description (AD), and there have been approaches to UML-based AD either by extending the language, or by mapping existing ADLs onto it. The upcoming UML 2.0 standard has also created great expectations about the potential of the language to capture software architectures, to allow for early analysis of systems under development and to support qualities. Furthermore, the latest trends such as MDA and the aspect-oriented paradigm are tightly connected with both UML \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:LkGwnXOMwfcC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Adaptive Web-Based Instructional Systems\u2013An Overview",
            "Publication year": 2002,
            "Publication url": "https://www.researchgate.net/profile/Paris-Avgeriou/publication/30496950_Adaptive_Web-Based_Instructional_Systems_-_An_Overview/links/0046352f90258c0cd8000000/Adaptive-Web-Based-Instructional-Systems-An-Overview.pdf",
            "Abstract": "Adaptive Hypermedia is a relatively young research field, which has been established on the intersection of hypermedia systems and adaptive user-interfaces [De Bra et al. 1999a]. In adaptive hypermedia, as in every hypermedia application, there is a structure of nodes and links that connect them. In contrast though to the rest of the hypermedia applications, an adaptive hypermedia system maintains a user model and alters the content, as well as the presentation of the information, contained within the nodes on the fly. Links are also adaptive, that is their presentation and functionality is adjusted as well. The aforementioned sustainable and constantly updated user model is utilized in order to lead the system\u2019s user towards new and interesting information and keep him or her away from information that is considered inappropriate or useless. Adaptive Hypermedia Systems have already started being broadly applied in instructional systems, which have certain deficiencies that can be remedied through adaptation techniques.The structure of the paper is as following: the theoretical underpinnings of adaptive systems is given in section 2, where the concepts of hypermedia systems, web-based instructional systems and their adaptive versions are discussed. Section 3 analyzes the need for the application of adaptation techniques in hypermedia and instructional systems and how this need is covered through adaptive systems. Section 4 performs a classification of the adaptation techniques and describes the structure of an adaptive web-based instructional system.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:K3LRdlH-MEoC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Architectural technical debt identification based on architecture decisions and change scenarios",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7158505/",
            "Abstract": "Architectural technical debt (ATD) is incurred by design decisions that intentionally or unintentionally compromise system-wide quality attributes, particularly maintainability and evolvability. ATD is harmful to the system's long-term health, thus it needs to be identified for further management. However, existing ATD identification approaches are mainly based on source code analysis and thus suffer from certain shortcomings: they can only identify issues at the system implementation, they can only be employed after the systems is implemented in code, they lack a mechanism to confirm whether the potential ATD identified is real ATD or not. To address these issues, we proposed an ATD identification approach based on architecture decisions and change scenarios. To evaluate the effectiveness and usability of this approach, we conducted a case study with an information system in a large telecommunications \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:hCrLmN-GePgC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Patterns for designing Learning Management systems",
            "Publication year": 2003,
            "Publication url": "https://core.ac.uk/download/pdf/232380874.pdf",
            "Abstract": "Learning Management Systems are sophisticated web-based applications that are being engineered today in increasing numbers by numerous institutions and companies that want to get involved in e-learning either for providing services to third parties, or for educating and training their own people. Even though the construction of such systems has been taking place for many years, they are still designed and developed from scratch. The reason is that experience from previous Learning Management Systems, is not codified or documented, resulting in forcing the development teams to \u2018re-invent the wheel\u2019. This paper presents an approach of recording design experience in the form of design patterns for Learning Management Systems and aims at developing a pattern language for these systems. The proposed design patterns are semantically organized and categorized, and form the basic core of a pattern language for Learning Management Systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:3fE2CSJIrl8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "A survey on software architectural assumptions",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121215002824",
            "Abstract": "Managing architectural assumptions (AA) during the software lifecycle, as an important type of architecture knowledge, is critical to the success of projects. However, little empirical evidence exists on the understanding, identification, and recording of AA from the practitioners\u2019 perspective.We investigated the current situation on (1) how practitioners understand AA and its importance, and (2) whether and how practitioners identify and record AA in software development.A web-based survey was conducted with 112 practitioners, who use Chinese as native language and are engaged in software development in China.The main findings are: (1) AA are important in both software architecting and development. However, practitioners understand AA in different ways; (2) only a few respondents identified and recorded AA in their projects, and very few approaches and tools were used for \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:ODE9OILHJdcC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Managing Requirements Knowledge using Architectural Knowledge Management Approaches",
            "Publication year": 2011,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.721.342&rep=rep1&type=pdf",
            "Abstract": "The software architecture community has recently witnessed a paradigm shift towards managing architectural knowledge (AK), and consolidated research results have been achieved. Within the lifecycle of software development, requirements engineering (RE) and architecting are two closely related activities, and so are their associated knowledge. In this paper, we target specific RE problems and present knowledgebased approaches to tackle them by integrating concrete results from the AK community. This work can subsequently stimulate further research in knowledge-based RE, which may in turn feed its results back into software architecture.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:AXPGKjj_ei8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "A survey on the interplay between software engineering and systems engineering during sos architecting",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3382494.3410671",
            "Abstract": "Background: The Systems Engineering and Software Engineering disciplines are highly intertwined in most modern Systems of Systems (SoS), and particularly so in industries such as defense, transportation, energy and health care. However, the combination of these disciplines during the architecting of SoS seems to be especially challenging; the literature suggests that major integration and operational issues are often linked to ambiguities and gaps between system-level and software-level architectures.Aims: The objective of this paper is to empirically investigate: 1) the state of practice on the interplay between these two disciplines in the architecting process of systems with SoS characteristics; 2) the problems perceived due to this interplay during said architecting process; and 3) the problems arising due to the particular characteristics of SoS systems.Method: We conducted a questionnaire-based online \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:2l5NCbZemmgC",
            "Publisher": "Unknown"
        },
        {
            "Title": "From collective knowledge to intelligence: pre-requirements analysis of large and complex systems",
            "Publication year": 2010,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1809198.1809208",
            "Abstract": "Requirements engineering is essentially a social collaborative activity in which involved stakeholders have to closely work together to communicate, elicit, negotiate, define, confirm, and finally come up with the requirements for the system to be implemented or upgraded. In the development of large and complex systems, with a huge number of uncertain stakeholders, the requirements engineering process becomes a challenging task due to overwhelming and dynamic social interactions, tradeoffs, and collective decisions made by above stakeholders. Traditional approaches and techniques are deficient in supporting this kind of social interactions in requirements-related activities, and managing the evolving requirements and their traceability caused by the social interactions. This paper proposes to address the challenges in the pre-requirements analysis of large and complex systems by employing the techniques \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:4JMBOYKVnBMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Decision-centric architecture reviews",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6449237/",
            "Abstract": "Architecture evaluation is an important activity in the software engineering life cycle that ensures that the architecture satisfies stakeholders' expectations. Additionally, risks and issues can be uncovered before they cause tremendous costs later in the life cycle. Unfortunately, architecture evaluation isn't regularly practiced in industry. This article presents DCAR (decision-centric architecture review), an architecture evaluation method that uses architecture decisions as first-class entities. DCAR uncovers and evaluates the rationale behind the most important architecture decisions, considering the entire context in which the decisions were made. Furthermore, it's lightweight and can be performed during or after the design is finalized. Experiences in large industrial projects have shown that full-scale DCAR evaluations, including reporting, can be conducted in fewer than five person-days, while producing satisfying \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:NJ774b8OgUMC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Towards using architectural knowledge",
            "Publication year": 2009,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1507195.1507219",
            "Abstract": "The third workshop on Sharing and Reusing Architectural Knowledge (SHARK) was held jointly with ICSE 2008 in Leipzig, Germany. It featured two keynote talks, thirteen research position statements and three working groups that discussed on focused topics. This report presents the themes of the workshop, summarizes the results of the discussions held, and suggests some topics for future research.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:RHpTSmoSYBkC",
            "Publisher": "ACM"
        },
        {
            "Title": "The supportive effect of patterns in architecture decision recovery\u2014A controlled experiment",
            "Publication year": 2012,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0167642311002085",
            "Abstract": "The documentation of software architectural design decisions is important to help people understand the system and the rationale behind architectural solutions. In practice, the documentation of such decisions is regularly done after the fact, or skipped completely. To support software maintenance and evolution, the decisions have to be recovered and described. This is often hindered by the fact that the original architects are not available any more, or they do not completely remember the reasons for making the decisions. Additionally, the whole process is very expensive. In this paper, we hypothesize that architecture decision recovery can be more efficient by focusing on recovering decisions related to applying architecture patterns. To test this hypothesis, we designed a controlled experiment that was conducted to analyze the impact of architecture patterns on the quality and quantity of architecture decisions \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:_B80troHkn4C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Using pattern-based architecture reviews to detect quality attribute issues-an exploratory study",
            "Publication year": 2013,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-38676-3_5",
            "Abstract": "Architecture reviews are effective for identifying potential problems in architectures, particularly concerning the quality attributes of the system, but are generally expensive. We propose that architecture reviews based on the architecture patterns and their interactions with quality attributes can be done with small effort. We performed an exploratory study to investigate how much time and effort is required to perform such a review, and how many related issues it uncovers. We performed nine architecture reviews on small systems, and recorded the time and effort spent, and the number of issues identified. On average, a pattern-based review took less than two person-days of effort and less than a day of calendar time. The median number of issues identified was three, one of which was major. We recommend that where extensive architecture reviews are too expensive, a pattern-based review can be done with \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:nrtMV_XWKgEC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Framing Stakeholders' Concerns Guest Editors' Introduction",
            "Publication year": 2010,
            "Publication url": "https://scholar.google.com/scholar?cluster=9633644627573275075&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:5bg8sr1QxYwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A mapping study on design-time quality attributes and metrics (journal-first abstract)",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8330240/",
            "Abstract": "Monitoring software quality is a non-trivial task, since it requires the selection of: (a) quality attributes, based on application domain and development phase, and (b) appropriate metrics to quantify them. We aim to aid this process by reviewing the state-of-research on design-time qualities and metrics.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Br1UauaknNIC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Wishes and boundaries for a software architecture knowledge community",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4459168/",
            "Abstract": "Software architecting is a highly knowledge-intensive process demanding and producing a large and rich amount of information. To remain competitive, companies and organizations working in the IT sector must be able to manage this knowledge portfolio and effectively exploit and reuse it. In the era of Web 2.0, knowledge grids, social networking, global development and semantic Web, this working session addresses the problem of building a knowledge community in the field of software architecture. To this end, we aim at exploring the wishes of academics and industrial organizations, on the one hand, and their boundaries on he other. Our goal is to compare and contrast the inputs from academia and industry, and gain a shared understanding about what can be done now, and in the near future.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Se3iqnhoufwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Architectural knowledge and rationale: issues, trends, challenges",
            "Publication year": 2007,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1281421.1281443",
            "Abstract": "The second workshop on Sharing and Reusing Architectural Knowledge (SHARK) and Architecture rationale and Design intent (ADI) was held jointly with ICSE 2007 in Minneapolis. This report presents the themes of the workshop, summarizes the results of the discussions held, and suggests some topics for future research.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:qjMakFHDy7sC",
            "Publisher": "ACM"
        },
        {
            "Title": "Architectural decision-making as a financial investment: An industrial case study",
            "Publication year": 2021,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584920301725",
            "Abstract": "Making architectural decisions is a crucial task but also very difficult, considering the scope of the decisions and their impact on quality attributes. To make matters worse, architectural decisions need to combine both technical and business factors, which are very dissimilar by nature.We provide a cost-benefit approach and supporting tooling that treats architectural decisions as financial investments by: (a) combining both technical and business factors; and (b) transforming the involved factors into currency, allowing their uniform aggregation. Apart from illustrating the method, we validate both the proposed approach and the tool, in terms of fitness for purpose, usability, and potential limitations.To validate the approach, we have performed a case study in a software development company, in the domain of low-energy embedded systems. We employed triangulation in the data collection \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:mWEH9CqjF64C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "An Exploratory Study on Architectural Knowledge in Issue Tracking Systems",
            "Publication year": 2021,
            "Publication url": "https://arxiv.org/abs/2106.11140",
            "Abstract": "Software developers use issue trackers (e.g. Jira) to manage defects, bugs, tasks, change requests, etc. In this paper we explore (a) how architectural knowledge concepts (e.g. architectural component behavior, contextual constraints) are textually represented in issues (e.g. as adjectives), (b) which architectural knowledge concepts commonly occur in issues, and (c) which architectural knowledge concepts appear together. We analyzed issues in the Jira issue trackers of three large Apache projects. To identify ``architecturally relevant'' issues, we linked issues to architecturally relevant source code changes in the studied systems. We then developed a code book by manually labeling a subset of issues. After reaching conceptual saturation, we coded remaining issues. Our findings support empirically-grounded search tools to identify architectural knowledge concepts in issues for future reuse.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:zdjWy_NXXwUC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Message from the General Chair and PC Chairs of ICSA 2019 Foreword to ICSA 2019 Proceedings",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8712347/",
            "Abstract": "The increasing size of software systems, trends to release software ever more frequently, the emerging hyper-connectivity of systems, and new technology trends such as IoT or AI technologies, demand innovative software engineering solutions. As a consequence, the ways software is developed and maintained are rapidly changing. In addition to technical challenges and the fast pace of technology evolution, software engineers must consider a multitude of other influences such as design and code quality, costs and business risks, market considerations, customer requirements, the ever increasing demand for change, to name just a few. These often conflicting requirements and forces are usually handled by the software architect. The International Conference on Software Architecture (ICSA) is the premier platform for academia and industry to join efforts in addressing these challenges, bringing innovative \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:U_HPUtbDl20C",
            "Publisher": "IEEE"
        },
        {
            "Title": "3rd SC@ RUG 2006 proceedings: Student Colloquium 2005-2006",
            "Publication year": 2006,
            "Publication url": "https://research.rug.nl/en/publications/3rd-scrug-2006-proceedings-student-colloquium-2005-2006",
            "Abstract": "3rd SC@RUG 2006 proceedings: Student Colloquium 2005-2006 \u2014 the University of \nGroningen research portal Skip to main navigation Skip to search Skip to main content the \nUniversity of Groningen research portal Logo Help & FAQ English Nederlands Home \nProfiles Research Units Research output Projects Datasets Prizes Activities Press / Media \nSearch by expertise, name or affiliation 3rd SC@RUG 2006 proceedings: Student \nColloquium 2005-2006 Rein Smedinga (Editor), Paris Avgeriou (Editor) Software \nEngineering Research output: Book/Report \u203a Book \u203a Academic 605 Downloads (Pure) \nOverview Original language English Publisher Rijksuniversiteit Groningen. \nUniversiteitsbibliotheek Number of pages 138 ISBN (Print) 90-367-2626-3 Publication \nstatus Published - 2006 Access to Document studcol06Final publisher's version, 8.17 MB \nCite this APA Author BIBTEX Harvard Standard RIS Vancouver , R., & , . \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:SIv7DqKytYAC",
            "Publisher": "Rijksuniversiteit Groningen. Universiteitsbibliotheek"
        },
        {
            "Title": "Second international workshop on software architecture and metrics (SAM 2015)",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7203147/",
            "Abstract": "Software engineers and architects of complex software systems need to balance hard quality attribute requirements while at the same time manage risks and make decisions with a system-wide and long-lasting impact. To achieve these tasks efficiently, they need quantitative information about design-time and run-time system aspects through usable and quick tools. While there is body of work focusing on code quality and metrics, their applicability at the design and architecture level and at scale are inconsistent and not proven. We are interested in exploring whether architecture can assist with better contextualizing existing system and code quality and metrics approaches. Furthermore, we ask whether we need additional architecture-level metrics to make progress and whether something as complex and subtle as software architecture can be quantified. The goal of this workshop is to discuss progress, gather \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:dBIO0h50nwkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Handling variability in software architecture: problems and implications",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5959688/",
            "Abstract": "Variability helps manage differences and commonalities within and across software systems. As variability is reflected in and facilitated through the software architecture, it is important to understand the problems that architects face when carrying out their tasks. This would help us improve methods for architecting variability-intensive software systems. In this paper, we therefore present an exploratory study to identify problems that occur when performing variability-related tasks during software architecting. Our subjects were 27 graduate students. We identified eleven problems as experienced by the subjects of our study. The paper also presents implications of the findings for the software architecture field. In particular, we discuss implications for architecture description, methods and tools, and the training of architects.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:KxtntwgDAa4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "An approach for usability evaluation of e-commerce sites based on design patterns and heuristics criteria",
            "Publication year": 2003,
            "Publication url": "https://core.ac.uk/download/pdf/232380837.pdf",
            "Abstract": "DEPTH (evaluation approach based on DEsign PaTterns & Heuristic criteria) is an approach for performing scenario-based heuristic usability evaluation for e-commerce sites. It is comprised of a preparatory and execution phase where specific steps are performed for evaluating the usability along three axis: usability comparison tests among similar e-commerce sites, expert/heuristic evaluation, scenario-based user inspection/enquiry sessions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ZeXyd9-uunAC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Reducing friction in software development",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7367977/",
            "Abstract": "Software is being produced so fast that its growth hinders its sustainability. Technical debt, which encompasses internal software quality, evolution and maintenance, reengineering, and economics, is growing such that its management is becoming the dominant driver of software engineering progress. It spans the software engineering life cycle, and its management capitalizes on recent advances in fields such as source code analysis, quality measurement, and project management. Managing technical debt will become an investment activity applying economic theories. It will effectively address the architecture level and will offer specific processes and tools employing data science and analytics to support decision making. It will also be an essential part of the software engineering curriculum. Getting ahead of the software quality and innovation curve will inevitably involve establishing technical-debt management \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:fFSKOagxvKUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Identification and Remediation of Self-Admitted Technical Debt in Issue Trackers",
            "Publication year": 2020,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9226330/",
            "Abstract": "Technical debt refers to taking shortcuts to achieve short-term goals, which might negatively influence software maintenance in the long-term. There is increasing attention on technical debt that is admitted by developers in source code comments (termed as self-admitted technical debt or SATD). But SATD in issue trackers is relatively unexplored. We performed a case study, where we manually examined 500 issues from two open source projects (i.e. Hadoop and Camel), which contained 152 SATD items. We found that: 1) eight types of technical debt are identified in issues, namely architecture, build, code, defect, design, documentation, requirement, and test debt; 2) developers identify technical debt in issues in three different points in time, and a small part is identified by its creators; 3) the majority of technical debt is paid off, 4) mostly by those who identified it or created it; 5) the median time and average time to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:An6A6Jpfc1oC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Design patterns in adaptive web-based educational systems: An overview",
            "Publication year": 2004,
            "Publication url": "http://www.softlab.ntua.gr/~retal/papers/conferences/WbE2004/AWESpatterns_overview.pdf",
            "Abstract": "Adaptive Web-based Educational Systems represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. Adaptive Web-based Educational Systems are increasingly becoming part of the mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc. This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Web-based Educational Systems in the form of design patterns. We present a categorization of the patterns according to an established paradigm in Adaptive Hypermedia, we examine the patterns in one of these categories and provide an exemplary pattern.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:M3ejUd6NZC8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "The evolution of design pattern grime: An industrial case study",
            "Publication year": 2017,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/978-3-319-69926-4_13.pdf",
            "Abstract": "Context: GoF design patterns are popular among both researchers and practitioners, in the sense that software can be largely comprised of pattern instances. However, there are concerns regarding the efficacy with which software engineers maintain pattern instances, which tend to decay over the software lifetime if no special emphasis is placed on them. Pattern grime (i.e., degradation of the instance due to buildup of unrelated artifacts) has been pointed out as one recurrent reason for the decay of GoF pattern instances. Goal: Seeking to explore this issue, we investigate the existence of relations between the accumulation of grime in pattern instances and various related factors: (a) projects, (b) pattern types, (c) developers, and (d) the structural characteristics of the pattern participating classes. Method: For that, we empirically assessed these relations through an industrial exploratory case study \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:7H_MAutzIkAC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Technical debt in MDE: a case study on GMF/EMF-based projects",
            "Publication year": 2016,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2976767.2976806",
            "Abstract": "Technical Debt (TD) is a metaphor referring to immature software artifacts that can hurt the long-term maintenance of a system. Model-Driven Engineering (MDE) is a model-centric software development approach, which promises better maintainability. However, there is a lack of empirical evidence on the existence and influence of TD in the context of MDE. This paper investigates the code-level TD in MDE projects, which is incurred during code generation. We evaluated 16 open-source and non-trivial GMF/EMF-based MDE projects using bad smells, which are widely-accepted TD indicators. The results demonstrate that MDE is not TD-free, and code generators also incur TD, similarly to developers. In fact, the generated code usually contains more TD than handwritten code, which influences significantly the maintenance of MDE projects.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:artPoR2Yc-kC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Theoretical Underpinnings and Reviews",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-21001-3_2",
            "Abstract": "Requirements are fundamental to any engineered system. They capture the key stakeholder functional needs, constraints on the operation of the system, and often form a basis for contracting, testing and acceptance [1, 2]. Architecture captures the structuring of software solutions, incorporating not just functional properties of a system but design rationale, multi-layer abstractions and architectural knowledge [3, 4]. One can not exist without the other. Requirements need to be realized in a software system, described in essence by appropriate software architectures. Architecture must deliver on specified functional and non-functional requirements in order for the software system to be at all useful.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:_Re3VWB3Y0AC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Proceedings of the IEEE/ACM Joint 5th International Workshop on Software Engineering for Systems-of-Systems and 11th Workshop on Distributed Software Development, Software Ecosystems and Systems-of-Systems",
            "Publication year": 2017,
            "Publication url": "https://hal.archives-ouvertes.fr/hal-02132114/",
            "Abstract": "Archive ouverte HAL - Proceedings of the IEEE/ACM Joint 5th International Workshop on \nSoftware Engineering for Systems-of-Systems and 11th Workshop on Distributed Software \nDevelopment, Software Ecosystems and Systems-of-Systems Acc\u00e9der directement au contenu \nAcc\u00e9der directement \u00e0 la navigation Toggle navigation CCSD HAL HAL HALSHS TEL M\u00e9diHAL \nListe des portails AUR\u00e9HAL API Data Documentation Episciences.org Episciences.org Revues \nDocumentation Sciencesconf.org Support hal Accueil D\u00e9p\u00f4t Consultation Les derniers d\u00e9p\u00f4ts \nPar type de publication Par discipline Par ann\u00e9e de publication Par structure de recherche \nLes portails de l'archive Recherche Documentation hal-02132114, version 1 Communication \ndans un congr\u00e8s Proceedings of the IEEE/ACM Joint 5th International Workshop on Software \nEngineering for Systems-of-Systems and 11th Workshop on Distributed Software , -of\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:mKu_rENv82IC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Quantifying software architecture quality report on the first international workshop on software architecture metrics",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2659118.2659140",
            "Abstract": "Architects of complex software systems face the challenge of how best to assess the achievement of quality attributes and other key drivers, how to reveal issues and risks early, and how to make decisions about architecture improvement. Software architecture quality has a large impact on this effort, but it is usually not assessed with quantitative measures. As the pace of software delivery and technology churn increases, organizations need guidance on how to meet the business goals of their software. There is an increasing need to provide ongoing insight into the quality of the system being developed. Additionally, it is highly desirable to improve feedback between development and deployment through measurable means for intrinsic quality, value, and cost. There is increasing attention to fields such as software analytics and empirical software engineering and measurement that can provide the theory, tooling, or \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:PoWvk5oyLR8C",
            "Publisher": "ACM"
        },
        {
            "Title": "The griffin project: lessons learned",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-02374-3_8",
            "Abstract": "GRIFFIN is a joint research project of the VU University Amsterdam and the University of Groningen. The GRIFFIN project develops notations, tools and associated methods to extract, represent and use architectural knowledge that currently is not documented or represented in the system. The research is carried out in a consortium with various industries, both large and small, that provide case studies and give regular feedback. Paraphrasing [327], the goal of the GRIFFIN project can be summarized as \u201cWhat architects know, and how they know it\u201d. In this chapter, we give an overview of the results of the GRIFFIN project, and lessons learned with respect to software architecture knowledge management.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:hC7cP41nSMkC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "An architecture for open learning management systems",
            "Publication year": 2001,
            "Publication url": "https://link.springer.com/chapter/10.1007/3-540-38076-0_13",
            "Abstract": "There exists an urgent demand on defining architectures for Learning Management Systems, so that high-level frameworks for understanding these systems can be discovered, and quality attributes like portability, interoperability, reusability and modifiability can be achieved. In this paper we propose a prototype architecture aimed to engineer Open Learning Management Systems, that professes state-of-the-art software engineering techniques such as layered structure and component-based nature. Our work is based upon standards and practices from international standardization bodies, on the empirical results of designing, developing and evaluating Learning Management Systems and on the practices of well-established software engineering techniques.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:roLk4NBRz8UC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "On the impact of fault tolerance tactics on architecture patterns",
            "Publication year": 2010,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2401736.2401738",
            "Abstract": "One important way that an architecture impacts fault tolerance is by making it easy or hard to implement tactics that improve fault tolerance. Information about how the implementation of fault tolerance tactics affects the architecture patterns of a system should be useful to architects during architectural design in selecting optimal fault tolerance tactics and architecture patterns. In order to understand more about how useful this information can be, we performed an informal study of teams designing fault tolerance tactics in an architecture. One group used information about the interaction of tactics and architecture patterns; the other did not. We observed that the group with the information produced better quality architectures, and were able to better estimate the difficulty of implementing the tactics. We recommend that information about the interaction of tactics and architecture patterns be made available to architects \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:bEWYMUwI8FkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Difficulty of architectural decisions\u2013a survey with professional architects",
            "Publication year": 2013,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-39031-9_17",
            "Abstract": "Much research exists on architectural decisions, but little work describes architectural decisions in the real-world. In this paper, we present the results of a survey with 43 architects from industry. We study characteristics of 86 real-world architectural decisions and factors that contribute to their difficulty. Also, we compare decisions made by junior architects and senior architects. Finally, we compare good and bad architectural decisions. Survey results indicate that architectural decisions take an average time of eight working days. Dependencies between decisions and the effort required to analyze decisions are major factors that contribute to their difficulty. Compared to senior architects, junior architects spend a quarter of the time on making a decision. Good architectural decisions tend to include more decision alternatives than bad decisions. Finally, we found that 86% of architectural decisions are group \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:vDijr-p_gm4C",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Architectural design decisions that incur technical debt\u2014An industrial case study",
            "Publication year": 2021,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584921001282",
            "Abstract": "During software development, some architectural design decisions incur technical debt, either deliberately or inadvertently. These have serious impact on the quality of a software system, and can cost significant time and effort to be changed. While current research efforts have explored general concepts of architectural design decisions and technical debt separately, debt-incurring architectural design decisions have not been specifically explored in practice.In this case study, we explore debt-incurring architectural design decisions (DADDs) in practice. Specifically, we explore the main types of DADDs, why and how they are incurred in a software system, and how practitioners deal with these types of design decisions.We performed interviews and a focus group with practitioners working in embedded and enterprise software companies, discussing their concrete experience with such \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:v6i8RKmR8ToC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Towards a Pattern Language for Learning Management Systems",
            "Publication year": 2015,
            "Publication url": "http://evidence.thinkportal.org/handle/123456789/20186",
            "Abstract": "Learning Management Systems are sophisticated web-based applications that are being engineered today in increasing numbers by numerous institutions and companies that want to get involved in e-learning either for providing services to third parties, or for educating and training their own people. Even though the construction of such systems has been taking place for many years, they are still designed and developed from scratch. The reason is that experience from previous Learning Management Systems, is not codified or documented, resulting in forcing the development teams to re-invent the wheel. This paper presents an approach of recording design experience in the form of design patterns for Learning Management Systems and aims at developing a pattern language for these systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:oi2SiIJ9l4AC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Analyzing the actual execution of a large software-intensive system for determining dependencies",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4656393/",
            "Abstract": "In this paper, we present a dynamic analysis approach to increase the understandability of a large software-intensive system, more particularly to enable the identification of dependencies between its execution entities. This approach analyzes the execution of a software system in a top-down fashion to cope with complexity and uses execution entities such as scenarios, components, and processes rather than code artifacts such as modules, classes, or objects. The approach synchronizes and analyzes two sources of execution information (logging and process activity), and builds architectural views of the system execution, according to a specific metamodel. We have validated this approach on an MRI scanner, a representative large software-intensive system, enabling the identification of dependencies in the execution of its software subsystem.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ufrVoPGSRksC",
            "Publisher": "IEEE"
        },
        {
            "Title": "2nd international workshop on the twin peaks of requirements and architecture (TwinPeaks 2013)",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6606785/",
            "Abstract": "The disciplines of requirements engineering (RE) and software architecture (SA) are fundamental to the success of software projects. Even though RE and SA are often considered separately, it has been argued that drawing a line between RE and SA is neither feasible nor reasonable as requirements and architectural design processes impact each other. Requirements are constrained by what is feasible technically and also by time and budget restrictions. On the other hand, feedback from the architecture leads to renegotiating architecturally significant requirements with stakeholders. The topic of bridging RE and SA has been discussed in both the RE and SA communities, but mostly independently. Therefore, the motivation for this ICSE workshop is to bring both communities together in order to identify key issues, explore the state of the art in research and practice, identify emerging trends, and define challenges \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:9Nmd_mFXekcC",
            "Publisher": "IEEE"
        },
        {
            "Title": "ACM International Conference Proceeding Series",
            "Publication year": 2018,
            "Publication url": "https://scholars.cityu.edu.hk/en/journals/acm-international-conference-proceeding-series(b358fbd5-1602-4ecb-998a-05e9eda1ea43)/publications.html",
            "Abstract": "ACM International Conference Proceeding Series - Research Output - CityU Scholars | A \nResearch Hub of Excellence Researcher login City University of Hong Kong City University of \nHong Kong City University of Hong Kong CityU Scholars A Research Hub of Excellence Home \nResearchers Research Units Research Output Projects Activities Prizes/Honours Student Theses \nDatasets Impact Press/Media ACM International Conference Proceeding Series Overview View \ngraph of relations ACM International Conference Proceeding Series Journal Journal Metrics All \nCityU Non-CityU 1 - 2 out of 2Page size: 20 10 20 50 100 200 Sort by: Publication date \nPublication date Type and year Type Title Year, type and title Total citations (Scopus) Research \nOutput 1.2016 2.Published Editorial Sarro, F., Hall, T., Baddoo, N., Buckley, J., English, \nM., Counsell, S., Noll, J. & 84 others, Rainer, A., Jan-Stol, K., O'Connor, D., Power, N., , ..\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Xz60mAmATU4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "First workshop on sharing and reusing architectural knowledge SIGSOFT",
            "Publication year": 2006,
            "Publication url": "https://research.rug.nl/en/publications/first-workshop-on-sharing-and-reusing-architectural-knowledge-sig",
            "Abstract": "First workshop on sharing and reusing architectural knowledge SIGSOFT \u2014 the University of \nGroningen research portal Skip to main navigation Skip to search Skip to main content the \nUniversity of Groningen research portal Logo Help & FAQ English Nederlands Home Profiles \nResearch Units Research output Projects Datasets Prizes Activities Press / Media Search by \nexpertise, name or affiliation First workshop on sharing and reusing architectural knowledge \nSIGSOFT P. Avgeriou Software Engineering Research output: Contribution to journal \u203a Article \u203a \nAcademic \u203a peer-review Overview Original language Dutch Pages (from-to) 32 - 36 Journal \nUnknown Journal Publication status Published - 2006 Cite this APA Author BIBTEX Harvard \nStandard RIS Vancouver Avgeriou, P. (2006). First workshop on sharing and reusing architectural \nknowledge SIGSOFT. Unknown Journal, 32 - 36. Avgeriou, P. / First workshop on and '\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:k_7cPK9k7w8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Capturing tacit architectural knowledge using the repertory grid technique (NIER track):(Nier track)",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6032551/",
            "Abstract": "Knowledge about the architecture of a software-intensive system tends to vaporize easily. This leads to increased maintenance costs. We explore a new idea: utilizing the repertory grid technique to capture tacit architectural knowledge. Particularly, we investigate the elicitation of design decision alternatives and their characteristics. To study the applicability of this idea, we performed an exploratory study. Seven independent subjects applied the repertory grid technique to document a design decision they had to take in previous projects. Then, we interviewed each subject to understand their perception about the technique. We identified advantages and disadvantages of using the technique. The main advantage is the reasoning support it provides; the main disadvantage is the additional effort it requires. Also, applying the technique depends on the context of the project. Using the repertory grid technique is a \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:RYcK_YlVTxYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Workshop on Variability in Software Product Line Architectures (VARI-ARCH 2010) in the Proceedings of the 4th European Conference on Software Architecture",
            "Publication year": 2010,
            "Publication url": "https://researchportal.unamur.be/en/publications/workshop-on-variability-in-software-product-line-architectures-va",
            "Abstract": "Workshop on Variability in Software Product Line Architectures (VARI-ARCH 2010) in the \nProceedings of the 4th European Conference on Software Architecture \u2014 the Research Portal - \nUniversity of Namur Skip to main navigation Skip to search Skip to main content the Research \nPortal - University of Namur Logo English Fran\u00e7ais Home Profiles Research Units Projects \nResearch Output Student theses Equipment Datasets Prizes Activities Press / Media Search by \nexpertise, name or affiliation Workshop on Variability in Software Product Line Architectures \n(VARI-ARCH 2010) in the Proceedings of the 4th European Conference on Software \nArchitecture Alexander Helleboogh, Paris Avgeriou, Nelis Bouck\u00e9, Patrick Heymans Faculty of \nComputer Science Research Center on Information Systems Engineering Research output: \nBook/Report/Journal \u203a Book Overview Projects (3) Original language English Publisher Ian , E. , \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:sszUF3NjhM4C",
            "Publisher": "Ian Gorton, Carlos E. Cuesta, Muhammad Ali Babar"
        },
        {
            "Title": "Uncertainty in Self-Adaptive Systems: A Research Community Perspective",
            "Publication year": 2021,
            "Publication url": "https://arxiv.org/abs/2103.02717",
            "Abstract": "One of the primary drivers for self-adaptation is ensuring that systems achieve their goals regardless of the uncertainties they face during operation. Nevertheless, the concept of uncertainty in self-adaptive systems is still insufficiently understood. Several taxonomies of uncertainty have been proposed, and a substantial body of work exists on methods to tame uncertainty. Yet, these taxonomies and methods do not fully convey the research community's perception on what constitutes uncertainty in self-adaptive systems and how to tackle it. To understand this perception and learn from it, we conducted a survey comprising two complementary stages. In the first stage, we focused on current research and development. In the second stage, we focused on directions for future research. The key findings of the first stage are: a) an overview of uncertainty sources considered in self-adaptive systems, b) an overview of existing methods used to tackle uncertainty in concrete applications, c) insights into the impact of uncertainty on non-functional requirements, d) insights into different opinions in the perception of uncertainty within the community, and the need for standardised uncertainty-handling processes to facilitate uncertainty management in self-adaptive systems. The key findings of the second stage are: a) the insight that over 70% of the participants believe that self-adaptive systems can be engineered to cope with unanticipated change, b) a set of potential approaches for dealing with unanticipated change, c) a set of open challenges in mitigating uncertainty in self-adaptive systems, in particular in those with safety-critical requirements. From these \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Hck25ST_3aIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Pattern-driven architectural partitioning: Balancing functional and non-functional requirements",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4270587/",
            "Abstract": "One of the vexing challenges of software architecture is the problem of satisfying the functional specifications of the system to be created while at the same time meeting its non-functional needs. In this work we focus on the early stages of the software architecture process, when initial high-level system partitioning is being performed. Specifically, we study the problem of system partitioning with respect to both functional requirements and quality attributes. Architecture patterns are particularly well-suited to simultaneously addressing functional requirements and quality attributes. They support architects in considering both, understanding the impact of decisions on other attributes, and making tradeoffs among them. Existing architectural design methods accommodate pattern use, but do not exploit it in detail. We propose a pattern-based approach that leverages the benefits of patterns, and fits well with existing methods.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:UebtZRa9Y70C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Modeling learning technology systems as business systems",
            "Publication year": 2003,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/s10270-003-0022-1.pdf",
            "Abstract": "The design of Learning Technology Systems, and the Software Systems that support them, is largely conducted on an intuitive, ad hoc basis, thus resulting in inefficient systems that defectively support the learning process. There is now justifiable, increasing effort in formalizing the engineering of Learning Technology Systems in order to achieve better learning effectiveness as well as development efficiency. This paper presents such an approach for designing Learning Technology Systems and their most popular specialization, the Web-based Learning Systems, by modeling them as business systems, using business-modeling methods. The aim is to provide an in-depth analysis and comprehension of the Learning Technology Systems and Web-based Learning Systems\u2019 domain, that can be used for improving the systems themselves, as well as for building the supporting software systems. Our work is \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:KlAtU1dfN6UC",
            "Publisher": "Springer Berlin Heidelberg"
        },
        {
            "Title": "DETERMINING THE RATIONALE OF ARCHITECTURAL SMELLS FROM ISSUE TRACKERS",
            "Publication year": 2020,
            "Publication url": "https://fse.studenttheses.ub.rug.nl/23271/1/mCS_2020_RangnauT.pdf",
            "Abstract": "Architectural Smells are design fragments which can span over multiple components of a system\u2019s architecture and have system level impact. Thereby, they increase maintenance efforts and costs. This phenomenon is addressed by researchers who have focused on different smell types, smell detection mechanisms, or resolving techniques. So far, little is known about why architectural smells are incurred into software. However, understanding this can help to avoid adding smells into software. One way to find the rationales behind incurring architectural smells is to find versions in which new smells are added into the system and analyse the corresponding documentation available through issue repositories. Since architectural smells evolve over time, one difficulty in detecting a new smell instance is to detect all smell variations related to the same smell.In this case study, six open source software projects are analysed. Together they comprise over 28,000 different software versions with over 62,980 smell variations related to 1,153 architectural smell instances. Analysing these instances allows to extract the motivation (eg Bugfix), the priority, and developer characteristics of the versions that incurred the smell. Furthermore, analysing discussions in documentation artifacts allows to understand the rationale behind incurring new smells.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:pS0ncopqnHgC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Message from the General Chair and PC Chairs of ICSA 2019",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8703899/",
            "Abstract": "The increasing size of software systems, trends to release software ever more frequently, the emerging hyper-connectivity of systems, and new technology trends such as IoT or AI technologies, demand innovative software engineering solutions. As a consequence, the ways software is developed and maintained are rapidly changing. In addition to technical challenges and the fast pace of technology evolution, software engineers must consider a multitude of other influences such as design and code quality, costs and business risks, market considerations, customer requirements, the ever increasing demand for change, to name just a few. These often conflicting requirements and forces are usually handled by the software architect. The International Conference on Software Architecture (ICSA) is the premier platform for academia and industry to join efforts in addressing these challenges, bringing innovative \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:NDuN12AVoxsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Constructing a resource usage view of a large and complex software-intensive system",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5328779/",
            "Abstract": "A resource usage view consists of models that are important assets to analyze and control usage of hardware resources such as processors and memory elements. In this paper, we present the application of a top-down approach to construct a resource usage view using actual system runtime information. The models in this view help to address the concerns of a resource usage viewpoint providing information in terms of system-specific architecture and design execution elements such as execution scenarios, tasks, software components, processes, and threads. As part of our validation, constructing a resource usage view of an MRI system, a representative large software-intensive system, we observed that the constructed models for this view provide useful overviews and insights for practitioners to describe part of the system execution architecture and especially to analyze and evaluate the use of hardware \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:IWHjjKOFINEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Assessing code smell interest probability: a case study",
            "Publication year": 2017,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3120459.3120465",
            "Abstract": "An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that:(a) modules in which\" code smells\" are concentrated are more change-prone than smell-free modules,(b) there are specific types of\" code smells\" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:43bX7VzcjpAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Towards a pattern language for adaptive web-based educational systems",
            "Publication year": 2004,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1078.1464&rep=rep1&type=pdf",
            "Abstract": "Adaptive Web-based Educational Systems represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. Adaptive Web-based Educational Systems are increasingly becoming part of the mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc. This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Web-based Educational Systems in the form of design patterns. We present a categorization of the patterns according to an established paradigm in Adaptive Hypermedia and we provide three exemplary patterns.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ruyezt5ZtCIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Architecture viewpoints for documenting architectural technical debt",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B9780128023013000053",
            "Abstract": "Technical debt (TD) has attracted an increasing interest from researchers and practitioners in the software engineering domain. Currently, most approaches to managing TD focus on dealing with TD at source code level, while few methods deal with TD at architecture level. If architectural technical debt (ATD) is not effectively managed in the architecting process, the knowledge about ATD is not made available to involved stakeholders and the impact of ATD is not considered during architecture decision-making. Thus, the system\u2019s maintainability and evolvability can be intentionally or unintentionally compromised. As a result, architectures are costly to maintain and new features are difficult to introduce. To facilitate the management of ATD, it needs to be documented so that it becomes explicit to stakeholders. To this end, we propose a set of architecture viewpoints related to ATD (ATD viewpoints in short). Each \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:u-coK7KVo8oC",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "Learning Technology Systems: issues, trends, challenges",
            "Publication year": 2001,
            "Publication url": "http://www.cs.rug.nl/paris/papers/IOSTE01.pdf",
            "Abstract": "This paper elaborates on a comparative analysis of contemporary LTSs. We have selected a number of the most important, commonly used, modern LTSs and put them through a thorough evaluation process, based on the services, tools, and features they support, and the usability of their hypertext user interface. The result of the evaluation is twofold: to explore the utility of LTSs and consequently discover the real nature of these systems, based on the features they support; and to delve into the usability of LTSs, a critical factor in the acceptance of these systems by the market.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:9ZlFYXVOiuMC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "First International Workshop on Variability in Software Architecture (VARSA 2011)",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5959782/",
            "Abstract": "Variability is the ability of a software artifact to be changed for a specific context. Mechanisms to accommodate variability include software product lines, configuration wizards and tools in commercial software, configuration interfaces of software components, or the dynamic runtime composition of web services. Variability is primarily reflected in and facilitated through the software architecture. Also, the software architecture is the centerpiece of software systems and acts as reference point for many development activities, and many of today's software systems are built to accommodate variability. Thus, variability in software architecture should be well-understood and be treated as a first-class concern. The software architecture community acknowledges that variability is a concern of different stakeholders, and in turn affects other concerns. Nevertheless, treating variability related to the architecture and all architecture \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:SdhP9T11ey4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Joint 5th International Workshop on Software Engineering for Systems-of-Systems and 11th Workshop on Distributed Software Development, Software Ecosystems and Systems-of",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7961685/",
            "Abstract": "Summary for only given, as follows. Systems-of-Systems (SoS) have become increasingly complex and frequently used in highly distributed, dynamic, and even open environments. SoS refer to evolving software systems, where constituent systems (themselves systems in their own right) work cooperatively to fulfill specific, complex missions, facing software engineering researchers and practitioners with substantial challenges. In parallel, Software Ecosystem (SECO) has also become an important research topic in software engineering, addressing social issues along with technical aspects of software development. SoS and SECO are closely related, also naturally distributed so as the distribution of development teams, along with the inherent difficulties of coordination and communication. In this scenario, Distributed Software Development (DSD) deals with distributed resources to reduce cost and reach new IT \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:LdasjJ6CEcoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Variability in software architecture-State of the art",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1016/j.jss.2014.01.051",
            "Abstract": "Many of today's software systems are built with variability in mind, such as software product families, self-adaptive systems, and open platforms. The architecture of a software system is the reference point for all development activities and the earliest point where significant design decisions are taken. We appeal to the software architecture community to continue the work on variability in software architecture as the needs for variability will only grow in the future, and the more we learn the more open questions we come across. This guarantees both challenging and rewarding times ahead.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:gsN89kCJA0AC",
            "Publisher": "Elsevier Science Inc."
        },
        {
            "Title": "Toward Simpler, not Simplistic, Quantification of Software Architecture and Metrics: Report on the Second International Workshop on Software Architecture and Metrics",
            "Publication year": 2015,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2815021.2815037",
            "Abstract": "Architects of complex software systems face the challenge of how best to assess the achievement of quality attributes and other key system drivers, how to reveal issues and risks early, and how to make decisions about architecture improvement. Software architecture quality has a large impact on this effort, but it is usually not assessed with quantitative measures. A software architecture metric quantifies architecture quality, value, and cost. While it is highly desirable to improve feedback between development and deployment through measurable means for intrinsic quality, value, and cost, efforts in software architecture quality measurement have lagged behind the body of work focusing on code quality. The goal of the Second International Workshop on Software Architecture and Metrics was to discuss progress on architecture and metrics, measurement, and analysis; to gather empirical evidence on the use and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:4vMrXwiscB8C",
            "Publisher": "ACM"
        },
        {
            "Title": "Architecting as decision making with patterns and primitives",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1370062.1370066",
            "Abstract": "The application of patterns is used as a foundation for many central design decisions in software architecture, but because of the informal nature of patterns, these design decisions are usually not precisely documented in the models. In our earlier work, we had proposed pattern primitives as a solution to precisely model the patterns in the corresponding architectural views. Building upon that approach, this paper introduces a pattern-based architecting process that aims at inexpensively documenting design decisions in the architectural views alongside the natural flow of design. The decisions that are made explicit, concern the selection of patterns, their variants and the corresponding primitives, as well as the resolution of inconsistencies between the architectural views. The approach is demonstrated in the domain of process-driven SOA for two architectural views: Component-and-Connector and Process Flow.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:mVmsd5A6BfQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Rate Your Search",
            "Publication year": 2021,
            "Publication url": "https://fse.studenttheses.ub.rug.nl/24033/1/bCS_2021_MeijerT.pdf",
            "Abstract": "Because of the rapid growing of the amount of information and alternatives, searching and finding software architecture information is difficult for software engineers. To ease this burden on the software engineers, others have tried to re-rank the search results in Stack Overflow by classifying, filtering or applying machine learning algorithms. In addition, others have created architecture knowledge repositories. Furthermore, others tried to eliminate the use of search engines by creating a plugin for IDEs. However, in this research we would like to support in finding the best solution by conducting an experiment to determine the best ways to capture this information. This experiment may be the foundation of the future of research in software architecture knowledge. However, to conduct this experiment we are required to acquire some information. As a result, this thesis presents an extension for browsers named Rate Your Search that can capture this information from Google when a programmer searches for software architectural information. This extension extracts the search results and user input as data and is developed using ordinary web-page development languages (HTML, CSS, and JavaScript). This plugin will help answer the research question:\u201d How to capture search results for software architecture information?\u201d. Thus, while others have worked with the search engine in Stack Overflow, IDEs or static repositories, we introduce a way to use one of the most used search engines, Google, and to utilize user input.Rate Your Search is merely satisfactory when it can indeed support the experiment by gathering all the correct information and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Xl6nMSl579sC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Implementing reliability: the interaction of requirements, tactics and architecture patterns",
            "Publication year": 2010,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-17245-8_5",
            "Abstract": "An important way that the reliability of a software system is enhanced is through the implementation of specific run-time measures called runtime tactics. Because reliability is a system-wide property, tactic implementations affect the software structure and behavior at the system, or architectural level. For a given architecture, different tactics may be a better or worse fit for the architecture, depending on the requirements and how the architecture patterns used must change to accommodate the tactic: different tactics may be a better or worse fit for the architecture. We found three important factors that influence the implementation of reliability tactics. One is the nature of the tactic, which indicates whether the tactic influences all components of the architecture or just a subset of them. The second is the interaction between architecture patterns and tactics: specific tactics and patterns are inherently compatible or \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:7PzlFSSx8tAC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Constraints for the design of variability-intensive service-oriented reference architectures\u2013An industrial case study",
            "Publication year": 2013,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584912002054",
            "Abstract": "Service-oriented architecture has become a widely used concept in software industry. However, we currently lack support for designing variability-intensive service-oriented systems. Such systems could be used in different environments, without the need to design them from scratch. To support the design of variability-intensive service-oriented systems, reference architectures that facilitate variability in instantiated service-oriented architectures can help.The design of variability-intensive service-oriented reference architectures is subject to specific constraints. Architects need to know these constraints when designing such reference architectures. Our objective is to identify these constraints.An exploratory case study was performed in the context of local e-government in the Netherlands to study constraints from the perspective of (a) the users of a variability-intensive service-oriented system \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:dQ2og3OwTAUC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "System-and Software-level Architecting Harmonization Practices for Systems-of-Systems: An exploratory case study on a long-running large-scale scientific instrument",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9426757/",
            "Abstract": "The problems caused by the gap between system- and software-level architecting practices, especially in the context of Systems of Systems where the two disciplines inexorably meet, is a well known issue with a disappointingly low amount of works in the literature dedicated to it. At the same time, organizations working on Systems of Systems have been developing solutions for closing this gap for many years now. This work aims to extract such knowledge from practitioners by studying the case of a large-scale scientific instrument, a geographically distributed radio telescope to be more specific, developed as a sequence of projects during the last two decades. As the means for collecting data for this study we combine online interviews with a virtual focus group of practitioners from the organization responsible for building the instrument. Through this process, we identify persisting problems and the best practices \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:jSAVyFp_754C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Fifth international workshop on sharing and reusing architectural knowledge",
            "Publication year": 2010,
            "Publication url": "https://research.vu.nl/en/publications/fifth-international-workshop-on-sharing-and-reusing-architectural",
            "Abstract": "Architectural Knowledge (AK) is defined as the integrated representation of the software architecture of a software-intensive system or family of systems along with architectural decisions and their rationale, external influence and the development environment. The SHARK workshop series focuses on current methods, languages, and tools that can be used to extract, represent, share, apply, and reuse AK, and the experimentation and/or exploitation thereof. This fifth edition of SHARK will discuss, among other topics, the contributions of this community to a Body of Knowledge on software architecture.\u00a9 2010 ACM.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:PYBJJbyH-FwC",
            "Publisher": "IEEE Computer Society and ACM"
        },
        {
            "Title": "Proceedings of the 1st ACM SIGSOFT/SIGPLAN International Workshop on Software Engineering for Systems-of-Systems (SESoS 2013)",
            "Publication year": 2013,
            "Publication url": "https://hal.archives-ouvertes.fr/hal-00913491/",
            "Abstract": "CNRS| IRISA| IRISA_UBS| UBS| IRISA-D4| UNIV-RENNES1| INSTITUT-TELECOM| INRIA| INSA-TOULOUSE| UR1-UFR-ISTIC| UNIV-RENNES| LAAS-RESEAUX-ET-COMMUNICATIONS| LAAS-SARA| LAAS| INSA-GROUPE| UNIV-TLSE3| UT1-CAPITOLE| UNIV-TLSE2| LAAS-RISC| INSA-RENNES",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:ILKRHgRFtOwC",
            "Publisher": "ACM"
        },
        {
            "Title": "Establishing a framework for managing interest in technical debt",
            "Publication year": 2015,
            "Publication url": "https://www.scitepress.org/Papers/2015/58857/58857.pdf",
            "Abstract": "Technical debt (TD) has gained significant attention over the past years. Due to its interdisciplinary nature, it has become attractive for both technical and management stakeholders, to acknowledge and discuss issues related to decayed design-time qualities over time, and their corresponding consequences. Until now, despite the inherent relevance of technical debt management to economics, the TD research community has not sufficiently exploited economical methods/models. Therefore, in this paper we present a framework for managing interest in technical debt, founded on top of well-known economic theories (ie, Loanable Funds and Liquidity Preference Theory) and current TD research. Specifically, in our framework, we will discuss aspects related to technical debt interest, such as: types of TD interest, TD interest characteristics, and a proposed TD interest theory. Finally, in order to boost the amount of empirical studies in TD research, we will propose several tentative research designs that could be used for exploring the notion of interest in technical debt practice.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:kh2fBNsKQNwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Reusability Index: A Measure for Assessing Software Assets Reusability",
            "Publication year": 2018,
            "Publication url": "https://research.rug.nl/en/publications/reusability-index-a-measure-for-assessing-software-assets-reusabi-2",
            "Abstract": "Reusability Index: A Measure for Assessing Software Assets Reusability \u2014 the University of \nGroningen research portal Skip to main navigation Skip to search Skip to main content the \nUniversity of Groningen research portal Logo Help & FAQ English Nederlands Home Profiles \nResearch Units Research output Projects Datasets Prizes Activities Press / Media Search by \nexpertise, name or affiliation Reusability Index: A Measure for Assessing Software Assets \nReusability Paris Avgeriou, Stamatia Bibi, Alexander Chatzigeorgiou, Ioannis Stamelos Software \nEngineering Research output: Chapter in Book/Report/Conference proceeding \u203a Conference \ncontribution \u203a Academic \u203a peer-review 33 Downloads (Pure) Overview Original language \nEnglish Title of host publication New Opportunities for Software Reuse Editors R Capilla, C. \nCetina , B Gallina Place of Publication Cham Publisher Springer Verlag ISBN (Electronic) 978-3\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:sA9dB-pw3HoC",
            "Publisher": "Springer Verlag"
        },
        {
            "Title": "Run-time Reconfiguration of ServiceCentric Systems,\" proceeding of the European Pattern Authorized licensed use limited to",
            "Publication year": 2006,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.583.8889",
            "Abstract": "Service-centric systems are driven more and more towards self-adaptation in order to satisfy QoS in highly dynamic environments. However, the young age and immaturity of this do-main, combined with the increasing size and complexity of these systems, hinder the archi-tects from designing effectively self-adaptive systems. This paper addresses the process of run-time reconfiguration with respect to high level issues such as monitoring, evaluation of QoS, reconfiguring and structuring the service-centric system. All patterns relate their solu-tions partially to well-established architectural patterns, adapted to the domain of service-centric systems. The aim is to compose a unified framework in the form of a pattern language that will help architects in taking the major design decisions. 1",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:LhH-TYMQEocC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Investigating the Relationship between Co-occurring Technical Debt in Python",
            "Publication year": 2020,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9226307/",
            "Abstract": "Technical debt (TD) reflects issues that may negatively affect software maintenance and evolution. There is currently little evidence on how the different types of TD co-occur; for example, how code smells and design smells affect the same part of the system. This paper investigates how different types of TD co-occur, as well as the time period of the co-occurrence. To that end, we analyzed the co-occurring associations between five types of TD, captured in 42 SonarQube rules, in 3862 files of 20 Python projects from the Apache Software Foundation. We found that this phenomenon is dominant, affecting more than 90% of Python files. We also found that Documentation Debt and Test Debt appear in the majority of the files, although it seems to be mostly by coincidence. Finally, we noticed that co-occurrence of TD seems to happen very quickly: co-occurring issues tend to be introduced within the same week. But once \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:eO3_k5sD8BwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The notion of variability in software architecture: results from a preliminary exploratory study",
            "Publication year": 2011,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1944892.1944899",
            "Abstract": "Context: In the software product line domain, the concept of variability is well recognized. However, variability in the context of software architecture still seems to be poorly understood. Objective: In this paper, we aim at contributing to the development of a basic understanding of the notion of variability in the software architecture domain, beyond the idea of product lines. Method: We perform a preliminary exploratory study which consists of two parts: an expert survey among 11 subjects, and a mini focus group with 4 participants. For both parts, we collect and analyze mostly qualitative data. Results: Our observations indicate that there seems to be no common understanding of\" variability\" in the context of software architecture. On the other hand, some challenges related to variability in software architecture are similar to challenges identified in the product line domain. Conclusions: Variability in software architecture \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:YFjsv_pBGBYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Sharing and Reusing Architectural Knowledge--Architecture, Rationale, and Design Intent",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4222703/",
            "Abstract": "The shift of the software architecture community towards architectural knowledge has brought along some promising research directions. In this workshop we discuss the issues that lead to the application of architectural knowledge in research and industrial practice as well as presenting ongoing research and new ideas to advance the field. We expect to examine the state of the art and practice and gauge future challenges and trends. This year's workshop has a strong emphasis on documenting, sharing, and reusing architectural rationale and design intent.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:kNdYIx-mwKoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Learner's Mirror.",
            "Publication year": 2004,
            "Publication url": "https://core.ac.uk/download/pdf/232380359.pdf",
            "Abstract": "Adaptive Hypermedia Educational Systems, AHES, represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. These systems are increasingly becoming part of mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc.This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Hypermedia Educational Systems in the form of design patterns. In this paper we present three of these patterns: User Model Definition, User Model Initialisation and User Model Maintenance, as well as a more complete organization map that illustrates the entire pattern language based on the patterns\u2019 relations.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:epqYDVWIO7EC",
            "Publisher": "Unknown"
        },
        {
            "Title": "How do developers fix issues and pay back technical debt in the apache ecosystem?",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8330205/",
            "Abstract": "During software evolution technical debt (TD) follows a constant ebb and flow, being incurred and paid back, sometimes in the same day and sometimes ten years later. There have been several studies in the literature investigating how technical debt in source code accumulates during time and the consequences of this accumulation for software maintenance. However, to the best of our knowledge there are no large scale studies that focus on the types of issues that are fixed and the amount of TD that is paid back during software evolution. In this paper we present the results of a case study, in which we analyzed the evolution of fifty-seven Java open-source software projects by the Apache Software Foundation at the temporal granularity level of weekly snapshots. In particular, we focus on the amount of technical debt that is paid back and the types of issues that are fixed. The findings reveal that a small subset of \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:XUvXOeBm_78C",
            "Publisher": "IEEE"
        },
        {
            "Title": "An integrated model for the authoring of web-based adaptive educational applications",
            "Publication year": 2003,
            "Publication url": "https://research.rug.nl/files/3019155/2003ProcAHPapasalouros.pdf",
            "Abstract": "In this paper a design model for Web-based Adaptive Educational Applications (WAEA) is presented. A model-based approach is proposed as an answering to the problem of the difficulty of authoring such applications. This approach is based on the use of object oriented modeling techniques and the specification of WAEA by means of an XML binding.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:QIV2ME_5wuYC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "An industrial case study on an architectural assumption documentation framework",
            "Publication year": 2017,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121217301966",
            "Abstract": "As an important type of architectural knowledge, documenting architectural assumptions (AAs) is critical to the success of projects. In this work, we proposed and validated an Architectural Assumption Documentation Framework (AADF), which is composed of four viewpoints (i.e., the Detail, Relationship, Tracing, and Evolution viewpoint), to document AAs in projects. One case study with two cases was conducted at two companies from different domains and countries. The main findings are: (1) AADF can be understood by architects in a short time (i.e., a half day workshop); (2) the AA Evolution view requires the least time to create, followed by the AA Detail view and the AA Relationship view; (3) AADF can help stakeholders to identify risks and understand AAs documented by other stakeholders; and (4) understanding and applying AADF is related to various factors, including factors regarding the framework per se \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:1taIhTC69MYC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "From architectural knowledge to requirements knowledge management",
            "Publication year": 2009,
            "Publication url": "https://www.researchgate.net/profile/Peng-Liang-4/publication/254332266_From_Architectural_Knowledge_to_Requirements_Knowledge_Management/links/5fd63dfc299bf140880767e9/From-Architectural-Knowledge-to-Requirements-Knowledge-Management.pdf",
            "Abstract": "Knowledge management has been playing an increasingly prominent role in software engineering in both academic and industrial perspectives. Meanwhile, the software architecture community has recently witnessed a paradigm shift towards managing architectural knowledge (AK), and consolidated research results have been achieved. Within the software development lifecycle, requirements engineering (RE) and architecting are two closely related activities, and so are their associated knowledge. This report makes a literature survey on RE from a knowledge perspective, and proposes to reuse the research outcomes for AK management in RE. We target specific RE problems and present knowledge-based ideas to tackle them by integrating concrete results from the AK community. This work can subsequently stimulate further research in knowledge-based RE, which may in turn feed its results back into software architecture.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:pqnbT2bcN3wC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Workshop on SHAring and Reusing architectural Knowledge:(SHARK 2011)",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6032645/",
            "Abstract": "Architectural Knowledge (AK) is defined as the integrated representation of the software architecture of a software-intensive system or family of systems along with architectural decisions and their rationale, external influence and the development environment. The SHARK workshop series focuses on current methods, languages, and tools that can be used to extract, represent, share, apply, and reuse AK, and the experimentation and/or exploitation thereof. This sixth edition of SHARK will discuss, among other topics, the approaches for AK personalization, where knowledge is not codified through templates or annotations, but it is exchanged through the discussion between the different stakeholders.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:EUQCXRtRnyEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7332614/",
            "Abstract": "The following topics are dealt with: technical debt management; code debt; architectural debt; software refactoring; and software testing.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:OcBU2YAGkTUC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Supporting variability through agility to achieve adaptable architectures",
            "Publication year": 2014,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B9780124077720000058",
            "Abstract": "Variability facilitates the design of software products that can be adapted for a wide range of customers or contexts. In agile development, software products begin to be built before the desired product is fully understood. Both variability and agile development embrace change and adaptation. This chapter combines the agile paradigm and variability to achieve adaptable software architectures and shows how the agile paradigm and the concept of variability can complement each other in an approach to variability handling at the software architecture level.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:0CzhzZyukY4C",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "Welcome Message from the Tool Demonstrations Chairs of ICSA 2017",
            "Publication year": 2017,
            "Publication url": "https://www.computer.org/csdl/proceedings-article/icsaw/2017/07958502/12OmNzTYCcU",
            "Abstract": "As the time of system running increases, the performance of the system will decrease. This phenomenon is called software aging. Recently software rejuvenation as an efficient method to counteract software aging emerges. This method recovers the performance of the system through cleaning the internal state of system. Now component-oriented programming concept has been proposed and spreaded. And software system based on component emerges. These components with different function not only promote software reusability and self-management but also software reliability and availability. This paper demonstrates a software rejuvenation model based on resource-aware component optimized scheduling to realize software rejuvenation and avoid system crashing. In this paper we give the Lagrangian Relaxation component scheduling algorithm under single constrained condition and multi constrained \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:v1_lew4L6wgC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Two Empirical Studies on Decision-making Pro-cesses in Software Architecture",
            "Publication year": 2012,
            "Publication url": "https://www.researchgate.net/profile/Konstantinos-Tselios-3/publication/259451430_Two_empirical_studies_on_decision-making_processes_in_software_architecture/links/0deec52bac21051d9b000000/Two-empirical-studies-on-decision-making-processes-in-software-architecture.pdf",
            "Abstract": "Firstly, I would like to deeply thank my professor and supervisor Paris Avgeriou; his support during my studies was crucial for my personal and academic development. As most of the people who had the opportunity to work with him know, he is insightful, critical, supportive, and he has a great sense of humor. Working together with Paris has always been quite an experience.There are also two people that I have been closely working with, and they heavily influenced this thesis. Initially, I would like to thank my second supervisor Dan Tofan for the endless conversations regarding our experiences, future plans and, of course, this manuscript. Dan influenced me in numerous ways by bringing new ideas, and also by challenging me to strictly criticize my own work. This thesis is certainly a result of our close communication and fruitful exchange of ideas and viewpoints. I also owe special thanks to my friend and colleague Maja Kutlaca for investing her time on my study. Her knowledge together with her willingness to provide me with insights in statistics and intention-\u2010\u2011based theories played a crucial role in the successful conduction of the research. I am truly grateful to both Dan and Maja for their overall contribution to my thesis.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:q3CdL3IzO_QC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Perspectives on managing technical debt: A transition point and roadmap from dagstuhl",
            "Publication year": 2016,
            "Publication url": "https://research.rug.nl/en/publications/perspectives-on-managing-technical-debt-a-transition-point-and-ro",
            "Abstract": "Thirty-three practitioners, researchers, students, and tool vendors gathered in Dagstuhl, Germany, for five days in April 2016 to discuss the state of managing technical debt in software engineering. Participants reflected on the significant advances that the Managing Technical Debt (MTD) community has made since its inception in 2010; reached a consensus on a definition, called the Dagstuhl 16K technical debt definition; and discussed avenues for future progress in the area. This paper provides a brief history, summarizes current research, and offers a roadmap and a vision that describe the areas of research where significant challenges remain.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:DyXnQzXoVgIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Selecting a high-quality central model for sharing architectural knowledge",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4601565/",
            "Abstract": "In the field of software architecture, there has been a paradigm shift from describing the outcome of architecting process to documenting architectural knowledge (AK), such as design decisions and rationale. To this end, a series of domain models have been proposed for defining the concepts and their relationships in the field of AK. To a large extent, the merit of this new paradigm is derived by sharing and reusing AK across organizations, especially in geographically distributed contexts. However, the employment of different AK domain models by different parties makes effective AK sharing challenging, as it needs to be mapped either from one domain model to another directly, or indirectly through a central model for simplicity when the number of AK models increases. The indirect mapping approach has proved to be a cost-effective way by sacrificing acceptable sharing quality compared with direct mapping \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:aqlVkmm33-oC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Guest editors' introduction: Software architecture: Framing stakeholders' concerns",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5604359/",
            "Abstract": "As noted earlier, some stakeholder concerns are well-served today by available architecture viewpoints, frameworks, or ADLs, while others aren't expressible with available, off-the-shelf approaches. Hence the theme of this special issue: exploring the space of architecting in the face of multiple stakeholder concerns and looking for solutions that help the architect in that space. The articles in this issue all demonstrate techniques for framing one or more stakeholder concerns. Some have confronted the topic within software architecture; others are included because they offer insights on concerns and viewpoints from other branches of software engineering.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:TFP_iSt0sucC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A Layered Component-Based Architecture of a Virtual Learning Environment",
            "Publication year": 2001,
            "Publication url": "https://research.rug.nl/en/publications/a-layered-component-based-architecture-of-a-virtual-learning-envi",
            "Abstract": "There exists an urgent demand on defining architectures for Virtual Learning Environments (VLEs), so that high-level frameworks for understanding these systems can be discovered, portability, interoperability and reusability can be achieved and adaptability over time can be accomplished. In this paper we propose a prototype architecture for a VLE that professes state-of-the-art software engineering techniques such as layered structure and component-based nature. We base our work upon the LTSA working standard of IEEE LTSC, which serves as a business model, on the empirical results of a web-based instructional system architecture and on the practices of a well-established software engineering process.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:mUJArPsKIAAC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Does decision documentation help junior designers rationalize their decisions? A comparative multiple-case study",
            "Publication year": 2013,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121213000228",
            "Abstract": "Software architecture design is challenging, especially for junior software designers. Lacking practice and experience, junior designers need process support in order to make rational architecture decisions. In this paper, we present the results of a comparative multiple-case study conducted to find out if decision viewpoints from van Heesch et al., 2012, van Heesch et al., in press can provide such a support. The case study was conducted with four teams of software engineering students working in industrial software projects. Two of the four teams were instructed to document their decisions using decision viewpoints; the other two teams were not instructed to do so. We observed the students for a period of seven weeks by conducting weekly focus groups and by analyzing their work artifacts and minutes. Our findings suggest that junior designers who use decision viewpoints are more systematic in exploring and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:tzM49s52ZIMC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "VxBPEL: Supporting variability for Web services in BPEL",
            "Publication year": 2009,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584908000207",
            "Abstract": "Web services provide a way to facilitate the business integration over the Internet. Flexibility is an important and desirable property of Web service-based systems due to dynamic business environments. The flexibility can be provided or addressed by incorporating variability into a system. In this study, we investigate how variability can be incorporated into service-based systems. We propose a language, VxBPEL, which is an adaptation of an existing language, BPEL, and able to capture variability in these systems. We develop a prototype to interpret this language. Finally, we illustrate our method by using it to handle variability of an example.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:zYLM7Y9cAGgC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Architectural patterns revisited\u2013a pattern language",
            "Publication year": 2005,
            "Publication url": "http://eprints.cs.univie.ac.at/2698/1/ArchPatterns.pdf",
            "Abstract": "Architectural patterns are a key concept in the field of software architecture: they offer well-established solutions to architectural problems, help to document the architectural design decisions, facilitate communication between stakeholders through a common vocabulary, and describe the quality attributes of a software system as forces. Regrettably, finding and applying the appropriate architectural patterns in practice still remains largely ad-hoc and unsystematic. This is due to the lack of consensus in the community with respect to the \u201cphilosophy\u201d and granularity of architectural patterns, as well as the lack of a coherent pattern language. In this paper we attempt to establish common ground in the architectural patterns community by proposing a pattern language that acts as a superset of the existing architectural pattern collections and categorizations. This language is particularly focused on establishing the relationships between the patterns and performs a categorization based on the concept of \u201carchitectural views\u201d.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:u-x6o8ySG0sC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Reviewers of 2017",
            "Publication year": 2018,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-018-9598-5",
            "Abstract": "For helping us deliver timely decisions to our authors, the Editors-in-Chief and Publisher would like to thank the following individuals that contributed reviews between November 1, 2016 and December 31, 2017. We applaud your efforts and dedication to the community.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:prdVHNxh-e8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "A top-down strategy to reverse architecting execution views for a large and complex software-intensive system: An experience report",
            "Publication year": 2011,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0167642310002078",
            "Abstract": "This article is an experience report about the application of a top-down strategy to use and embed an architecture reconstruction approach in the incremental software development process of the Philips MRI scanner, a representative large and complex software-intensive system. The approach is an iterative process to construct execution views without being overwhelmed by the system size and complexity. An execution view contains architectural information that describes what the software of a software-intensive system does at runtime and how it does this. The application of the strategy is illustrated with a case study, the construction of an up-to-date execution view for the start-up process of the Philips MRI scanner. The construction of this view helped the development organization to quickly reduce about 30% the start-up time of the scanner, and set up a new system benchmark for assuring the system \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:JV2RwH3_ST0C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Refinement to griffin core model and model mapping for architectural knowledge sharing",
            "Publication year": 2007,
            "Publication url": "https://core.ac.uk/download/pdf/232378795.pdf",
            "Abstract": "This technical report is trying to clarify the similar (overlapping and interweaving) concepts in documenting Architectural Knowledge (AK), and we argue that UML class diagram is appropriate for the representation of core model of AK for the purpose of AK sharing. A refined AK core model represented in UML is proposed, and four terminological frameworks from literatures and one domain model for industrial case for AK documentation are analyzed, and their respective concept mappings to the refined core model are presented.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:hFOr9nPyWt4C",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "System-and Software-level Architecting Harmonization Practices for Systems-of-Systems--An exploratory case study on a long-running large-scale scientific instrument",
            "Publication year": 2021,
            "Publication url": "https://research.rug.nl/en/publications/system-and-software-level-architecting-harmonization-practices-fo",
            "Abstract": "The problems caused by the gap between system-and software-level architecting practices, especially in the context of Systems of Systems where the two disciplines inexorably meet, is a well known issue with a disappointingly low amount of works in the literature dedicated to it. At the same time, organizations working on Systems of Systems have been developing solutions for closing this gap for many years now. This work aims to extract such knowledge from practitioners by studying the case of a large-scale scientific instrument, a geographically distributed radio telescope to be more specific, developed as a sequence of projects during the last two decades. As the means for collecting data for this study we combine online interviews with a virtual focus group of practitioners from the organization responsible for building the instrument. Through this process, we identify persisting problems and the best practices that have been developed to deal with them, together with the perceived benefits and drawbacks of applying the latter in practice. Some of our major findings include the need to avoid over-reliance on the flexibility of software to compensate for incomplete requirements, hidden assumptions, as well as late involvement of system architecting, and to facilitate the cooperation between the involved disciplines through dedicated architecting roles and the adoption of unifying practices and standards.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:UuEBAcK4md4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "A Mapping Study on Software Artifacts Traceability: Review Protocol",
            "Publication year": 2013,
            "Publication url": "https://research.rug.nl/files/14425783/traceability-TR-2013-12-12.pdf",
            "Abstract": "This study aims at summarizing already proposed techniques related to artifact traceability, among and within software development phases. With the term development phases we refer to the parts of a software development lifecycle, as defined in the 12207: 2008 ISO/IEC/IEEE standard, ie Requirements Analysis, Architecture Design, Detailed Design, Construction, Integration, and Quality Testing (12207 IEEE standard). This standard introduces a process framework for describing the development lifecycle of the software part of a system and is composed by the six abovementioned development phases. Additionally, according to the same standard a development phase consists of several activities (eg the Requirements Analysis phase may consist of representing system requirements using natural language and writing use cases). In this document we will refer to such activities as \u201cdevelopment activities\u201d. In Section 1, we will provide background information on artifact traceability. In addition to that, we will describe the motivation for conducting this mapping study and a discussion on the reasons for selecting to conduct a mapping study, rather than a systematic literature review. Next, in Section 2, we will present the systematic mapping protocol, whereas in Sections 3 and 4 we will present the protocol validation process and the plan for presenting the results of our study, respectively.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:tYavs44e6CUC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "The art of multi-channel hypermedia application development",
            "Publication year": 2003,
            "Publication url": "https://www.researchgate.net/profile/Paris-Avgeriou/publication/2473497_The_Art_of_Multi-channel_Hypermedia_Application_Development/links/0046352f9025a51e44000000/The-Art-of-Multi-channel-Hypermedia-Application-Development.pdf",
            "Abstract": "The plethora of networked devices and platforms that continuously come to light, as well as the emergence of alternative ways to access the internet, have increased the demand for multi-channel access to hypermedia applications. Researchers and practitioners nowadays not only have to deal with the challenges that classic hypermedia applications pose, but also have to face numerous considerations with respect to multi-channel delivery of the applications. This paper presents an attempt for attacking the problem of multi-channel hypermedia application development. In specific it proposes a model that explicitly separates the hypermedia content from its presentation to the user through a document engineering perspective, by employing XML content storage and XSL transformations. Our work is based upon the empirical results of designing, developing and deploying hypermedia applications on multiple platforms and client devices, and on the practices of well-established hypermedia engineering techniques.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:TQgYirikUcIC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Software Architecture: 14th European Conference, ECSA 2020 Tracks and Workshops, L'Aquila, Italy, September 14-18, 2020, Proceedings",
            "Publication year": 2020,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=HT78DwAAQBAJ&oi=fnd&pg=PR5&dq=info:_bQ3u3Lxq88J:scholar.google.com&ots=ynVjTtO1uK&sig=a4weF85Z11QYUokYI86p5K8DYDc",
            "Abstract": "This book constitutes the refereed proceedings of the tracks and workshops which complemented the 14th European Conference on Software Architecture, ECSA 2020, held in L'Aquila, Italy*, in September 2020. The 30 full papers and 9 short papers presented in this volume were carefully reviewed and selected from 72 submissions. Papers presented were accepted into the following tracks and workshops: ECSA 2020 Doctoral Symposium track; ECSA 2020 Tool Demos track; ECSA 2020 Gender Diversity in Software Architecture &Software Engineering track; CASA-3rd International Workshop on Context-aware, Autonomous and Smart Architecture; CSE/QUDOS-Joint Workshop on Continuous Software Engineering and Quality-Aware DevOps; DETECT-3rd International Workshop on Modeling, Verication and Testing of Dependable Critical Systems; FAACS-MDE4SA-Joint Workshop on Formal Approaches for Advanced Computing Systems and Model-Driven Engineering for Software Architecture; IoT-ASAP-4th International Workshop on Engineering IoT Systems: Architectures, Services, Applications, and Platforms; SASI4-2nd Workshop on Systems, Architectures, and Solutions for Industry 4.0; WASA-6th International Workshop on Automotive System/Software Architecture.* The conference was held virtually due to the COVID-19 pandemic.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:kJDgFkosVoMC",
            "Publisher": "Springer Nature"
        },
        {
            "Title": "Understanding Architecture Erosion: The Practitioners' Perceptive",
            "Publication year": 2021,
            "Publication url": "https://arxiv.org/abs/2103.11392",
            "Abstract": "As software systems evolve, their architecture is meant to adapt accordingly by following the changes in requirements, the environment, and the implementation. However, in practice, the evolving system often deviates from the architecture, causing severe consequences to system maintenance and evolution. This phenomenon of architecture erosion has been studied extensively in research, but not yet been examined from the point of view of developers. In this exploratory study, we look into how developers perceive the notion of architecture erosion, its causes and consequences, as well as tools and practices to identify and control architecture erosion. To this end, we searched through several popular online developer communities for collecting data of discussions related to architecture erosion. Besides, we identified developers involved in these discussions and conducted a survey with 10 participants and held interviews with 4 participants. Our findings show that: (1) developers either focus on the structural manifestation of architecture erosion or on its effect on run-time qualities, maintenance and evolution; (2) alongside technical factors, architecture erosion is caused to a large extent by non-technical factors; (3) despite the lack of dedicated tools for detecting architecture erosion, developers usually identify erosion through a number of symptoms; and (4) there are effective measures that can help to alleviate the impact of architecture erosion.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:qe6vwMD2xtsC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A financial approach for managing interest in technical debt",
            "Publication year": 2015,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-40512-4_7",
            "Abstract": " Technical debt (TD) is a metaphor that is used by both technical and management stakeholders to acknowledge and discuss issues related to compromised design-time qualities. Until now, despite the inherent relevance of technical debt to economics, the TD community has not sufficiently exploited economic methods/models. In this paper we present a framework for managing interest in technical debt, founded on top of Liquidity Preference, a well-known economics theory. To tailor this theory to fit the TD context, we exploit the synthesized knowledge as presented in two recent studies. Specifically, in our framework, we discuss aspects related to technical debt interest, such as: types of TD interest, TD interest characteristics, and a proposed TD interest theory. Finally, to boost the amount of empirical studies in TD research, we propose several tentative research designs that could be used for exploring the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Aul-kAQHnToC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Assumptions and their management in software development: A systematic mapping study",
            "Publication year": 2018,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584916304189",
            "Abstract": "Assumptions are constantly made by stakeholders or generated automatically in software development. However, there is a lack of systematic analysis and comprehensive understanding of the research and practice regarding assumptions and their management.This work aims to explore and analyze the state of the art on assumptions and their management in software development.A systematic mapping study that covers the literature from January 2001 to December 2015 on assumptions and their management in software development.134 studies were included: (1) The studies were published in 94 venues, which indicates that assumptions and their management has been a broad topic in software engineering. (2) Only 21 studies defined the assumption concept. (3) Most assumptions are made for or related to the artifacts in requirements engineering and software design, which \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:MhiOAD_qIWkC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "e-Learning resource brokers",
            "Publication year": 2004,
            "Publication url": "https://www.researchgate.net/profile/Paris-Avgeriou/publication/30496984_e-Learning_Resource_Brokers/links/0046352f9025762ed6000000/e-Learning-Resource-Brokers.pdf",
            "Abstract": "There is an exponentially increasing demand for provisioning of high-quality learning resources, which is not satisfied by current web technologies and systems. E-Learning Resource Brokers are a potential solution to this problem, as they represent the state-of-the-art in facilitating the exchange of learning resources between multiple parties. These systems currently operate at a limited scale but their use is vastly increasing, especially in the context of multi-faceted educational organizations, such as virtual universities. This paper presents some of these systems that are extensively used in the e-learning market. It then moves on to provide an overview of the ideal functionality that e-Learning Resource Brokers should provide. Finally it discusses future trends in their development, within the context of global e-learning forces.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:mB3voiENLucC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A Pattern-based Approach Against Architectural Knowledge Vaporization",
            "Publication year": 2009,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.232.3727&rep=rep1&type=pdf",
            "Abstract": "Architectural documentation is often considered as a tedious and resource intensive task, that is usually skipped or performed inadequately. As a result the rationale of the architect\u2019s decisions gets lost. This problem is known as architectural knowledge vaporization. We propose a documentation approach for architectural decisions concerning the application of software patterns. Based on the assumption that patterns and pattern languages incorporate generic architectural knowledge, we recommend reusing this documented knowledge in application specific architecture documentation to preserve an important part of the rationale, that went into the architect\u2019s decisions, while saving time compared to other documentation approaches.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:eq2jaN3J8jMC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Architectural assumptions and their management in industry\u2013An exploratory study",
            "Publication year": 2017,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-65831-5_14",
            "Abstract": " As an important type of architectural knowledge, architectural assumptions should be well managed in projects. However, little empirical research has been conducted regarding architectural assumptions and their management in software development. In this paper, we conducted an exploratory case study with twenty-four architects to analyze architectural assumptions and their management in industry. In this study, we confirmed certain findings from our previous survey on architectural assumptions (e.g., neither the term nor the concept of architectural assumption is commonly used in industry, and stakeholders may have different understandings of the architectural assumption concept). We also got five new findings: (1) architects frequently make architectural assumptions in their work; (2) the architectural assumption concept is subjective; (3) architectural assumptions are context-dependent and have a \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:j7_hQOaDUrUC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "3rd international workshop on software engineering for systems-of-systems (SESoS 2015)",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7203153/",
            "Abstract": "Systems-of-Systems (SoS) refer to a new class of software-intensive systems, where their constituent systems work cooperatively in order to fulfill specific missions. Characterized by managerial and operational independence, geographic distribution, evolutionary development, and emergent behavior, SoS bring substantial challenges to the software engineering area. SESoS 2015, held in Florence, Italy, on May 17, 2015, as a joint workshop of the 37th International Conference on Software Engineering (ICSE), provided a forum to exchange ideas and experiences, analyze current research and development issues, discuss promising solutions, and to explore inspiring visions for the future of Software Engineering (SE) for SoS.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:QYdC8u9Cj1oC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Transactions on Pattern Languages of Programming II: Special Lssue on Applying Patterns",
            "Publication year": 2011,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=FrSTyx7U4MMC&oi=fnd&pg=PP2&dq=info:UiRTuF4kX6gJ:scholar.google.com&ots=qs8DznuSNK&sig=OzetxH-a6DoPohPsNFWLIg61IhI",
            "Abstract": "The Transactions on Pattern Languages of Programming subline aims to publish papers on patterns and pattern languages as applied to software design, development, and use, throughout all phases of the software life cycle, from requirements and design to implementation, maintenance and evolution. The primary focus of this LNCS Transactions subline is on patterns, pattern collections, and pattern languages themselves. The journal also includes reviews, survey articles, criticisms of patterns and pattern languages, as well as other research on patterns and pattern languages. This book, the second volume in the Transactions on Pattern Languages of Programming series, presents five papers that have been through a careful peer review process involving both pattern experts and domain experts. The papers demonstrate techniques for applying patterns in an industrial or research setting. Some have confronted the topic within software engineering; others offer approaches in other pattern domains, which is an indication of the diverse fields where patterns are applied.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:jL-93Qbq4QoC",
            "Publisher": "Springer Science & Business Media"
        },
        {
            "Title": "Modeling architectural patterns\u2019 behavior using architectural primitives",
            "Publication year": 2008,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-88030-1_13",
            "Abstract": "Architectural patterns have an impact on both the structure and the behavior of a system at the architecture design level. However, it is challenging to model patterns\u2019 behavior in a systematic way because modeling languages do not provide the appropriate abstractions and because each pattern addresses a whole solution space comprised of potentially infinite solution variants. In this paper, we advocate the use of architectural primitives for systematically modeling architectural patterns in the behavioral view. These architectural primitives are found among a number of architectural patterns and serve as the basic building blocks for modeling patterns\u2019 behavior. The main contribution of this work lies in the discovery of architectural primitives, defining architectural primitives using UML, and capturing the missing pattern semantics by using UML\u2019s stereotypes.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:HDshCWvjkbEC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "\u0395\u03b9\u03ba\u03bf\u03bd\u03b9\u03ba\u03ac \u03a0\u03b1\u03bd\u03b5\u03c0\u03b9\u03c3\u03c4\u03ae\u00b5\u03b9\u03b1: \u03a4\u03ac\u03c3\u03b5\u03b9\u03c2, \u03a0\u03c1\u03bf\u03ba\u03bb\u03ae\u03c3\u03b5\u03b9\u03c2 \u03ba\u03b1\u03b9 \u03a0\u03c1\u03bf\u03b2\u03bb\u03b7\u00b5\u03b1\u03c4\u03b9\u03c3\u00b5\u03bf\u03af",
            "Publication year": 2001,
            "Publication url": "https://research.rug.nl/en/publications/%CE%B5%CE%B9%CE%BA%CE%BF%CE%BD%CE%B9%CE%BA%CE%AC-%CF%80%CE%B1%CE%BD%CE%B5%CF%80%CE%B9%CF%83%CF%84%CE%AE%C2%B5%CE%B9%CE%B1-%CF%84%CE%AC%CF%83%CE%B5%CE%B9%CF%82-%CF%80%CF%81%CE%BF%CE%BA%CE%BB%CE%AE%CF%83%CE%B5%CE%B9%CF%82-%CE%BA%CE%B1%CE%B9-%CF%80%CF%81%CE%BF%CE%B2%CE%BB%CE%B7%C2%B5%CE%B1%CF%84%CE%B9%CF%83%C2%B5%CE%BF%CE%AF",
            "Abstract": "There are on-going efforts in accomplishing the demand from students, lifelong learners in offering an educational system which won\u2019t impose constraints in time and place of study. One such effort is the establishment of virtual universities. The term \u201cvirtual university\u201d has been widely used with various meanings. In this paper we aim to define this term as accurately as possible. Moreover, we intend to present the requirements and the challenges that led to their establishments as well as to make comments about the way they operate without making negative criticism but with the will of posing open questions to encourage a dialogue among researchers, educational managers and decision makers.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:silx2ntsSuwC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Software engineering for resilient system",
            "Publication year": 2012,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/978-3-642-33176-3.pdf",
            "Abstract": "The unprecedented level of complexity of modern software makes it difficult to ensure its resilience-the ability of the system to persistently deliver its services in a trustworthy way even when facing changes. Yet, we are observing the increasingly pervasive use of software in such critical infrastructures as transportation, health care, energy production etc. This trend urges the research community to develop powerful methods for assuring resilience of software-intensive systems. The SERENE workshop was established as a means of disseminating such research results and fostering discussion and cooperation between the growing resilience research community.This volume contains the proceedings of the 4th International Workshop on Software Engineering for Resilient Systems (SERENE 2012). SERENE 2012 took place in Pisa, Italy, during September 27\u201328, 2012. The SERENE workshop is an annual event that \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:AvfA0Oy_GE0C",
            "Publisher": "Springer,"
        },
        {
            "Title": "Rationale management challenges in requirements engineering",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5623812/",
            "Abstract": "Rationale and rationale management have been playing an increasingly prominent role in software system development mainly due to the knowledge demand during system evaluation, maintenance, and evolution, especially for large and complex systems. The rationale management for requirements engineering, as a commencing and critical phase in software development life cycle, is still under-exploited. In this paper, we first survey briefly the state-of-the-art on rationale employment and applications in requirements engineering. Secondly, we identify the challenges in integrating rationale management in requirements engineering activities in order to promote further investigations and define a research agenda on rationale management in requirements engineering.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:OU6Ihb5iCvQC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Towards bridging the twin peaks of requirements and architecture",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2659118.2659139",
            "Abstract": "Requirements engineering (RE) and software architecture (SA) significantly affect software project success. In practice, requirements and architectural design impact each other. This relationship was the subject of the Fourth International Workshop on the Twin Peaks of Requirements and Architecture (TwinPeaks@ICSE 2014). Similar to previous editions of the TwinPeaks workshop series, we aimed at exploring the relationship between RE and SA in the broader context of nsoftware engineering, rather than in the isolated contexts of either RE or SA. We found that there are things that drive architectural design, in addition to functional and quality requirements (e.g., \"architectural necessities\" which are often overlooked and ignored by architects). We then identified new challenges related to intertwining requirements and architectures based on the current state of practice. Furthermore, we described solutions to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Dip1O2bNi0gC",
            "Publisher": "ACM"
        },
        {
            "Title": "Introduction to the special issue on technical debt in software systems",
            "Publication year": 2016,
            "Publication url": "https://dl.acm.org/doi/abs/10.1016/j.jss.2016.06.069",
            "Abstract": "Introduction to the special issue on technical debt in software systems | Journal of Systems and \nSoftware ACM Digital Library home ACM home Google, Inc. (search) Advanced Search Browse \nAbout Sign in Register Advanced Search Journals Magazines Proceedings Books SIGs \nConferences People More Search ACM Digital Library SearchSearch Advanced Search Journal \nof Systems and Software Periodical Home Latest Issue Archive Authors Affiliations Award \nWinners More HomeBrowse by TitlePeriodicalsJournal of Systems and SoftwareVol. , No. \nCIntroduction to the special issue on technical debt in software systems research-article \nIntroduction to the special issue on technical debt in software systems Share on Authors: Davide \nFalessi California Polytechnic State University, USA California Polytechnic State University, \nUSA View Profile , Philippe Kruchten University of British Columbia, Canada University of , , , \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:nVrZBo8bIpAC",
            "Publisher": "Elsevier Science Inc."
        },
        {
            "Title": "Assessing code smell interest probability",
            "Publication year": 2017,
            "Publication url": "https://ruomo.lib.uom.gr/bitstream/7000/144/3/charalampidou2017mtd.pdf",
            "Abstract": "An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that:(a) modules in which \u201ccode smells\u201d are concentrated are more change-prone than smell-free modules,(b) there are specific types of \u201ccode smells\u201d that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two examined code smells. These results can be useful for both researchers and practitioners, in the sense that the former can focus their research on resolving \u201ccode smells\u201d that produce more interest, and the latter can improve accordingly the prioritization of their repayment strategy and their training.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:F2UWTTQJPOcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Modeling architectural patterns using architectural primitives",
            "Publication year": 2005,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1103845.1094822",
            "Abstract": "Architectural patterns are a key point in architectural documentation. Regrettably, there is poor support for modeling architectural patterns, because the pattern elements are not directly matched by elements in modeling languages, and, at the same time, patterns support an inherent variability that is hard to model using a single modeling solution. This paper proposes tackling this problem by finding and representing architectural primitives, as the participants in the solutions that patterns convey. In particular, we examine a number of architectural patterns to discover those primitive abstractions that are common among the patterns, and at the same time demonstrate a degree of variability in each pattern. These abstractions belong in the components and connectors architectural view, though more abstractions can be found in other views. We have selected UML 2 as the language for representing these primitive \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:IjCSPb-OGe4C",
            "Publisher": "ACM"
        },
        {
            "Title": "Architecture sustainability [guest editors' introduction]",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6648570/",
            "Abstract": "Software architecture is the foundation of software system development, encompassing a system's architects' and stakeholders' strategic decisions. A special issue of IEEE Software is intended to raise awareness of architecture sustainability issues and increase interest and work in the area. The first Web extra at http://youtu.be/wUGHvocfix0 is an audio interview in which Davide Falessi speaks with guest editors Paris Avgeriou and Rich Hilliard about the importance of architecture sustainability including the three types of approaches they distinguish for handling change systematically, listed in an order of increasing severity: refactoring, renovating, and rearchitecting. The second Web extra at http://youtu.be/T-neSlUhAv0 is an audio interview in which Brian Brannon speaks with guest editor Michael Stal about his experiences with architecture sustainability as a principal engineer at Siemens AG's Corporate \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:EYYDruWGBe4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Variability in Software Systems\u2013Extracted Data and Supplementary Material from a Systematic Literature Review",
            "Publication year": 2013,
            "Publication url": "https://core.ac.uk/download/pdf/148284853.pdf",
            "Abstract": "1.2 ObjectiveWe analyze existing research on variability in software systems. We investigate variability handling in major software engineering phases (eg, requirements engineering, architecting).",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:KUbvn5osdkgC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "An Overview and Comparison of Technical Debt Measurement Tools",
            "Publication year": 2020,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9200792/",
            "Abstract": "There are numerous commercial tools and research prototypes that offer support for measuring technical debt. However, different tools adopt different terms, metrics, and ways to identify and measure technical debt. These tools offer diverse features, and their popularity / community support varies significantly. Therefore, (a) practitioners face difficulties when trying to select a tool matching their needs; and (b) the concept of technical debt and its role in software development is blurred. We attempt to clarify the situation by comparing the features and popularity of technical debt measurement tools, and analyzing the existing empirical evidence on their validity. Our findings can help practitioners to find the most suitable tool for their purposes, and researchers by highlighting the current tool shortcomings.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:QUX0mv85b1cC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Enriching software architecture documentation",
            "Publication year": 2009,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121209001046",
            "Abstract": "The effective documentation of Architectural Knowledge (AK) is one of the key factors in leveraging the paradigm shift toward sharing and reusing AK. However, current documentation approaches have severe shortcomings in capturing the knowledge of large and complex systems and subsequently facilitating its usage. In this paper, we propose to tackle this problem through the enrichment of traditional architectural documentation with formal AK. We have developed an approach consisting of a method and an accompanying tool suite to support this enrichment. We evaluate our approach through a quasi-controlled experiment with the architecture of a real, large, and complex system. We provide empirical evidence that our approach helps to partially solve the problem and indicate further directions in managing documented AK.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:YsMSGLbcyi4C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "P.: An evaluation of ADLs on modeling patterns for software architecture design",
            "Publication year": 2007,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.708.3888",
            "Abstract": "Architecture patterns provide solutions to recurring design problems at the architecture level. In order to model patterns during software architecture design, one may use a number of existing Architecture Description Languages (ADLs), including the UML, a generic language but also a de facto industry standard. Unfortunately, there is little explicit support offered by such languages to model architecture patterns, mostly due to the inherent variability that patterns entail. In this paper, we analyze the support that few selected languages offer in modeling a limited set of architecture patterns with respect to four specific criteria: syntax, visualization, variability, and extensibility. The results highlight the strengths and weaknesses of the selected ADLs for modeling architecture patterns in software design.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:a3BOlSfXSfwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Patterns for adaptive web-based educational systems",
            "Publication year": 2003,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.771&rep=rep1&type=pdf",
            "Abstract": "Adaptive Web-based Educational Systems are sophisticated applications that offer a solution to the shortcomings of their non-adaptive counterparts, attempting to provide individualized and customized learning, tailored to the learner\u2019s needs. Even though substantial research and development of such systems has taken place the past years, they are still designed and developed from scratch. The reason is that experience from designing previous Adaptive Web-based Educational Systems is not somehow documented, thus resulting in the development teams \u2018re-inventing the wheel\u2019. This paper introduces an approach for recording design experience in the form of design patterns for Adaptive Web-based Educational Systems, which are semantically organized and categorized, according to a well-established reference model for adaptive hypermedia applications. Furthermore, this paper elaborates on the patterns of one of the above categories that deal with the user modeling aspect of such systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:iH-uZ7U-co4C",
            "Publisher": "Technical Report TR-2003"
        },
        {
            "Title": "2017 Index IEEE Transactions on Software Engineering Vol. 43",
            "Publication year": 2018,
            "Publication url": "https://www.computer.org/csdl/journal/ts/2018/01/08249567/13rRUxNW1Vy",
            "Abstract": "This index covers all technical items\u2014papers, correspondence, reviews, etc.\u2014that appeared in this periodical during 2017, and items from previous years that were commented upon or corrected in 2017. Departments and other items may also be covered if they have been judged to have archival value. The Author Index contains the primary entry for each item, listed under the first author\u2019s name. The primary entry includes the coauthors\u2019 names, the title of the paper or other item, and its location, specified by the publication abbreviation, year, month, and inclusive pagination. The Subject Index contains entries describing the item under all appropriate subject headings, plus the first author\u2019s name, the publication abbreviation, month, and year, and inclusive pages. Note that the item title is found only under the primary entry in the Author Index.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:CB2v5VPnA5kC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Defining and documenting execution viewpoints for a large and complex software-intensive system",
            "Publication year": 2011,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S016412121000316X",
            "Abstract": "An execution view is an important asset for developing large and complex systems. An execution view helps practitioners to describe, analyze, and communicate what a software system does at runtime and how it does it. In this paper, we present an approach to define and document viewpoints that guide the construction and use of execution views for an existing large and complex software-intensive system. This approach includes the elicitation of the organization's requirements for execution views, the initial definition and validation of a set of execution viewpoints, and the documentation of the execution viewpoints. The validation and application of the approach have helped us to produce mature viewpoints that are being used to support the construction and use of execution views of the Philips Healthcare MRI scanner, a representative large software-intensive system in the healthcare domain.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:hMod-77fHWUC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Identifying, categorizing and mitigating threats to validity in software engineering secondary studies",
            "Publication year": 2019,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584918302106",
            "Abstract": "Secondary studies are vulnerable to threats to validity. Although, mitigating these threats is crucial for the credibility of these studies, we currently lack a systematic approach to identify, categorize and mitigate threats to validity for secondary studies.In this paper, we review the corpus of secondary studies, with the aim to identify: (a) the trend of reporting threats to validity, (b) the most common threats to validity and corresponding mitigation actions, and (c) possible categories in which threats to validity can be classified.To achieve this goal we employ the tertiary study research method that is used for synthesizing knowledge from existing secondary studies. In particular, we collected data from more than 100 studies, published until December 2016 in top quality software engineering venues (both journals and conference).Our results suggest that in recent years, secondary studies are \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:DBa1UEJaJKAC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Investigating quality trade-offs in open source critical embedded systems",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7450808/",
            "Abstract": "During the development of Critical Embedded Systems (CES), quality attributes that are critical for them (e.g., correctness, security, etc.) must be guaranteed. However, this often leads to complex quality trade-offs, since non-critical qualities (e.g., reusability, understandability, etc.) may be compromised. In this study, we aim at empirically investigating the existence of quality trade-offs, on the implemented architecture, among versions of open source CESs, and compare them with those of systems from other application domains. The results of the study suggest that in CES, non-critical quality attributes are usually compromised in favor of critical quality attributes. On the contrary, we have not observed compromises of critical qualities in favor of non-critical ones in either CES or other application domains. Furthermore, quality trade-offs are more frequent among critical quality attributes, compared to trade-offs among \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:ClCfbGk0d_YC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Assessing Change Proneness at the Architecture Level: An Empirical Validation",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8312531/",
            "Abstract": "Change proneness is a characteristic of software artifacts that represents their probability to change in future. Change proneness can be assessed at different levels of granularity, ranging from classes to modules. Although change proneness can be successfully assessed at the source code level (i.e., methods and classes), it remains rather unexplored for architectures. Additionally, the methods that have been introduced at the source code level are not directly transferable to the architecture level. In this paper, we propose and empirically validate a method for assessing the change proneness of architectural modules. Assessing change proneness at the level of architectural modules requires information from two sources: (a) the history of changes in the module, as a proxy of how frequently the module itself undergoes changes; and (b) the dependencies with other modules that affect the probability of a change \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:7wO8s98CvbsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Proceedings of the 3rd ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems (SESoS 2015)",
            "Publication year": 2015,
            "Publication url": "https://hal.archives-ouvertes.fr/hal-01441064/",
            "Abstract": "CNRS| INSA-TOULOUSE| INSTITUT-TELECOM| UNIV-RENNES1| INRIA| IRISA| CENTRALESUPELEC| UR1-UFR-ISTIC| UNIV-RENNES| LAAS-RESEAUX-ET-COMMUNICATIONS| LAAS-SARA| LAAS| INSA-GROUPE| UNIV-TLSE3| UT1-CAPITOLE| UNIV-TLSE2| LAAS-RISC| IRISA_UBS| UBS",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:wMgC3FpKEyYC",
            "Publisher": "ACM"
        },
        {
            "Title": "A framework for managing interest in technical debt: an industrial validation",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3194164.3194175",
            "Abstract": "Technical debt management entails the quantification of principal and interest. In our previous work we had introduced a framework for calculating the Technical Debt Breaking Point (TD-BP), which is a point in time where the accumulated interest becomes larger than the principal; thus the debt of the company is no longer sustainable after this point in time. In this paper, we instantiate this framework and validate its ability to assess the breaking point of source code modules in an industrial setting. The results of the validation suggest that the calculated TD-BP is strongly correlated to experts' opinion on the sustainability of modules, and that it can accurately rank components, based on their maintenance difficulty.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:yxmsSjX2EkcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Empirical Assessment in Software Architecture: Importance and Challenges",
            "Publication year": 2009,
            "Publication url": "https://www.researchgate.net/profile/Patricia-Lago/publication/242086954_Empirical_Assessment_in_Software_Architecture_Importance_and_Challenges/links/0deec528a05b476dbf000000/Empirical-Assessment-in-Software-Architecture-Importance-and-Challenges.pdf",
            "Abstract": "Software engineering researchers and practitioners have been emphasizing the importance of gathering and disseminating empirical evidence to assess current research, identify the promising areas of research and to make informed decisions for selecting a suitable method, technique, or tool [1]. In recent years, Software Architecture (SA) community has developed many methods, techniques, and tools to support software architecture design, documentation, and evaluation activities. However, apart from a few exceptions, there has been little effort to gather and use empirical evidence to support the claims of efficacy or capabilities of different methods and techniques developed for supporting the software architecture process [2]. In order to improve this situation, there has been growing recognition of the importance of providing community-based forums to debate the importance of and challenges involved in comparative evaluation of technologies proposed to support software architecture activities using evidence-based approaches1. The evidence-based paradigm provides an objective and structured means of assembling and analysing the available data in order to answer research questions. Like the first EASA08 during WICSA 2008, the aim of the second EASA09 is to debate the importance, benefits, and limitations of rigorously assessing software architecture research outcomes by utilizing the methods and approaches from the evidence-based paradigm.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:vV6vV6tmYwMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Third international workshop on sharing and reusing architectural knowledge (SHARK 2008)",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1370175.1370249",
            "Abstract": "The shift of the software architecture community towards architectural knowledge has brought along some promising research directions. In this workshop we discuss the issues that lead to the application of architectural knowledge in research and industrial practice; ongoing research and new ideas to advance the field. In its previous editions we examined the state of the art and practice, future challenges and trends. This third edition will discuss, among others, architectural knowledge as perceived by different research communities, including requirements engineering, service-oriented computing and international standardization.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:j3f4tGmQtD8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Tools and techniques",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-21001-3_6",
            "Abstract": "In software engineering, tools and techniques are essential for many purposes. They can provide guidance to follow a certain software development process or a selected software lifecycle model. They can support various stakeholders in validating the compliance of the development results against quality criteria spanning from technical non-functional requirements to business/organizational strategies. Finally, tools and techniques may help various types of stakeholders in codifying and retrieving the knowledge necessary for decision making throughout their development journey, hence providing reasonable confidence that the resulting software systems will execute correctly, fulfill customer requirements, and cost-effectively accommodate future changes.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:2KloaMYe4IUC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Variability in software architecture: the road ahead",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2632434.2632471",
            "Abstract": "Variability in a software system is reflected in and facilitated through the architecture of that system. The Third International Workshop on Variability in Software Architecture (VARSA) was held in conjunction with the 11th Working IEEE/IFIP Conference on Software Architecture 2014 in Sydney, Australia. Based on the findings from previous editions of VARSA, this edition aimed at exploring methods, technologies and tools to handle variability at the software architecture level. The workshop featured one industrial keynote talk, one academic keynote talk and five research paper presentations.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:WZBGuue-350C",
            "Publisher": "ACM"
        },
        {
            "Title": "Second international workshop on variability in software architecture",
            "Publication year": 2012,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2361999.2362027",
            "Abstract": "Variability is the ability of a software system or artifact to be adapted for specific contexts, in a preplanned manner. Many of today's software systems are built with variability in mind, eg, product lines and families, self-adaptive systems, open platforms, or service-based systems that support dynamic runtime composition of web services. Variability is reflected in and facilitated through the software architecture. Also, as the software architecture is a reference point for many development activities and for achieving quality attributes, variability should be treated as a first-class and cross-cutting concern in software architecture. Therefore, the Second International Workshop on Variability in Software Architecture (VARSA 2012) aims at identifying critical challenges and progressing the state-of-the-art on variability in software architecture. VARSA 2012 is a follow-up of the First International Workshop on Variability in Software \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:N5tVd3kTz84C",
            "Publisher": "Unknown"
        },
        {
            "Title": "First workshop on sharing and reusing architectural knowledge",
            "Publication year": 2006,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1163514.1163526",
            "Abstract": "The first SHARK (SHAring and Reusing architectural Knowledge) workshop, attempted to explore the state of the art as well as the state of the practice in this emerging field. This workshop report presents the themes of the workshop, it summarizes the results of the discussions held about various topics, and suggests some research topics that are worthwhile to pursue in the future.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:UeHWp8X0CEIC",
            "Publisher": "ACM"
        },
        {
            "Title": "Requirements reasoning for distributed requirements analysis using semantic wiki",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5196965/",
            "Abstract": "In large-scale collaborative software projects, thousands of requirements with complex interdependencies and different granularity spreading in different levels are elicited, documented, and evolved during the project lifecycle. Non-technical stakeholders involved in requirements engineering activities rarely apply formal techniques; therefore it is infeasible to automatically detect problems in requirements. This situation becomes even worse in a distributed context when all sites are responsible to maintain their own requirements list using various requirements models and management tools, and the detection of requirements problems across multiple sites is error-prone, and un-affordable if performed manually. This paper proposes an integrated approach of basing distributed requirements analysis on semantic Wiki by requirements reasoning. First, the functions concerning reasoning support provided by semantic \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Wp0gIr-vW9MC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Technical Debt: Broadening Perspectives Report on the Seventh Workshop on Managing Technical Debt (MTD 2015)",
            "Publication year": 2016,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2894784.2894800",
            "Abstract": "Increasingly software engineers use the metaphor of technical debt to communicate issues related to the growing cost of change. In this article, we report on the Seventh Workshop on Managing Technical Debt (MTD 2015), held in Bremen, Germany, on October 2, 2015, collocated with the International Conference on Software Maintenance and Evolution (ICSME). The 30 workshop participants from industry and academia engaged in lively discussions, which helped clarify issues, refine questions, and promote common understanding about technical debt in software.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:8xutWZnSdmoC",
            "Publisher": "ACM"
        },
        {
            "Title": "Web engineering: new discipline, new educational challenges",
            "Publication year": 2000,
            "Publication url": "https://content.iospress.com/articles/information-services-and-use/isu293",
            "Abstract": "The WWW has turned into a development and run-time environment for large-scale and complex applications. Such sophisticated applications are being deployed in increasing numbers without having been developed according to appropriate methodologies and quality standards. The main reason for this ad hoc development philosophy is the lack of specialised training/education on the web engineering subject domain. This domain/discipline is new, still immature and has recently started getting the attention of researchers, developers, and other major players in the web-based application development market and training market. There is now justifiable and increasing concern about the manner in which students and lifelong learners are well educated and trained in this new discipline. It\u2019s also only one year ago that few universities have started providing special courses on this discipline and offer seminars to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:maZDTaKrznsC",
            "Publisher": "IOS Press"
        },
        {
            "Title": "Foreword by Paris Avgeriou",
            "Publication year": 2017,
            "Publication url": "https://scholar.google.com/scholar?cluster=9890979797584857261&hl=en&oi=scholarr",
            "Abstract": "The software architecture community realized from the very beginning (more than 2 decades ago) that functionality was not the main challenge; we could get that right, sooner or later, in an incremental and iterative manner. The real focus for researchers and the main pain point in industrial architecture practice was and still remains how to tame quality attributes. Form (architecture) does follow function, but form has some trouble following quality.The problem of achieving requirements for quality attributes qualifies as a \u201cwicked problem,\u201d and it is a multifaceted one. First, one cannot achieve each attribute in isolation as they are often interdependent and even contradictory. Consider, for example, the conflict between performance with almost any other quality attribute; when you try to optimize for performance, you may hurt the modifiability or security of your system. Second, a quality attribute cannot be dealt within a \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:wKETBy42zhYC",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "Agilo: a highly flexible groupware framework",
            "Publication year": 2005,
            "Publication url": "https://link.springer.com/chapter/10.1007/11560296_4",
            "Abstract": "Today there exist many frameworks for the development of synchronous groupware applications. Although the domain of these applications is very heterogeneous, existing frameworks provide only limited flexibility to integrate diverse groupware applications in a meaningful way. We identify five variation points that a groupware framework needs to offer in a flexible way in order to facilitate the integration of diverse groupware applications. Based on these variation points, we propose a groupware framework called Agilo that tries to overcome the limited flexibility of existing frameworks by offering multiple realizations of these variation points and providing a modular architecture to simplify the integration of applications and the extensibility and adaptability to different application and integration requirements.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:0EnyYjriUFMC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Designing an e-Learning Objects Brokerage System",
            "Publication year": 2003,
            "Publication url": "https://core.ac.uk/download/pdf/148196287.pdf",
            "Abstract": "E-Learning Objects Brokerage Systems are considered as the state-of-the-art in systems that facilitate the exchange of learning objects. These systems currently exist and operate at a limited scale but their use is vastly increasing, especially in multi-party educational organizations, such as virtual universities. This paper performs a study of existing e-Learning Objects Brokerage Systems, and specifies the ideal requirements for such a system. It also proposes a distributed architecture that would enable the interoperation between different e-Learning Objects Brokerage Systems.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:bnK-pcrLprsC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Agile Software Architecture: Chapter 6. Supporting Variability Through Agility to Achieve Adaptable Architectures",
            "Publication year": 2013,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=olp2DAAAQBAJ&oi=fnd&pg=PT6&dq=info:B01RUl5yZ7MJ:scholar.google.com&ots=j-VRbiyN2x&sig=q-XwPmwnEepb7OYOr-mK4h96U0g",
            "Abstract": "Variability facilitates the design of software products that can be adapted for a wide range of customers or contexts. In agile development, software products begin to be built before the desired product is fully understood. Both variability and agile development embrace change and adaptation. This chapter combines the agile paradigm and variability to achieve adaptable software architectures and shows how the agile paradigm and the concept of variability can complement each other in an approach to variability handling at the software architecture level.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:fbc8zXXH2BUC",
            "Publisher": "Elsevier Inc. Chapters"
        },
        {
            "Title": "An embedded multiple-case study on oss design quality assessment across domains",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6681360/",
            "Abstract": "Context: Investing on Open Source Software (OSS) as a \"code reuser\", involves certain risks, such as the difficulty in understanding the level of OSS design quality Aim: We investigate the levels of design quality of OSS projects, across different application domains. Method: We conducted a case study, which is the most fitting research method for observing a phenomenon in its real context, which is active for a long period of time, and for which variables cannot be controlled. Results: We present the values for seven design quality metrics of 546 OSS projects, as well as the statistically significant differences across application domains. Conclusions: The results of the study suggest that OSS application domains correlate with several design quality characteristics, in the sense that projects within one application domain appear to have similar levels of design quality. In addition to that, the results reveal application \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:hMsQuOkrut0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Size and cohesion metrics as indicators of the long method bad smell: An empirical study",
            "Publication year": 2015,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2810146.2810155",
            "Abstract": "Source code bad smells are usually resolved through the application of well-defined solutions, ie, refactorings. In the literature, software metrics are used as indicators of the existence and prioritization of resolving bad smells. In this paper, we focus on the long method smell (ie one of the most frequent and persistent bad smells) that can be resolved by the extract method refactoring. Until now, the identification of long methods or extract method opportunities has been performed based on cohesion, size or complexity metrics. However, the empirical validation of these metrics has exhibited relatively low accuracy with regard to their capacity to indicate the existence of long methods or extract method opportunities. Thus, we empirically explore the ability of size and cohesion metrics to predict the existence and the refactoring urgency of long method occurrences, through a case study on java open-source methods. The \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:9c2xU6iGI7YC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Architecting systems of systems: A tertiary study",
            "Publication year": 2020,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584919302083",
            "Abstract": "Context: The term System of Systems (SoS) has increasingly been used in a wide variety of domains to describe those systems composed of independent constituent systems that collaborate towards a mission that they could not accomplish on their own. There is a significant volume of research by the software architecture community that aims to overcome the challenges involved in architecting SoS, as evidenced by the number of secondary studies in the field published so far. However, the boundaries of such research do not seem to be well defined, at least partially, due to the emergence of SoS-adjacent areas of interest like the Internet of Things.Objective: This paper aims to investigate the current state of research on SoS architecting by synthesizing the demographic data, assessing the quality and the coverage of architecting activities and software quality attributes by the research, and distilling a concept map \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:w0F2JDEymm0C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "The importance of architectural knowledge in integrating open source software",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-24418-6_10",
            "Abstract": "Open Source Software (OSS) is increasingly used in Component-Based Software Development (CBSD) of large software systems. An important issue in CBSD is selection of suitable components. Various OSS selection methods have been proposed, but most of them do not consider the software architecture aspects of OSS products. The Software Architecture (SA) research community refers to a product\u2019s architectural information, such as design decisions and underlying rationale, and used architecture patterns, as Architecture Knowledge (AK). In order to investigate the importance of AK of OSS components in integration, we conducted an exploratory empirical study. Based on in-depth interviews with 12 IT professionals, this paper presents insights into the following questions: 1) what AK of OSS is needed? 2) Why is AK of OSS needed? 3) Is AK of OSS generally available? And 4) what is the relative \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:_xSYboBqXhAC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "A classification framework of uncertainty in architecture-based self-adaptive systems with multiple quality requirements",
            "Publication year": 2017,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B9780128028551000034",
            "Abstract": "The underlying uncertainty in self-adaptive systems aggravates the complexity of selecting best adaptation action alternative, and handling requirements trade-offs. To efficiently tackle uncertainty, it is necessary to have a comprehensive overview of different types of uncertainty and their specifications.In this paper we aim at (a) reviewing the state-of-the-art of architecture-based approaches tackling uncertainty in self-adaptive systems with multiple quality requirements, (b) proposing a classification framework for this domain, and (c) classifying the current approaches according to this framework.We conducted a systematic literature review by performing an automatic search on twenty seven selected venues and books in the domain of self-adaptive systems.We propose a classification framework for uncertainty and its sources in the domain of architecture-based self-adaptive systems \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:yqoGN6RLRZoC",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "A theoretical model for capturing the impact of design patterns on quality: the decorator case study",
            "Publication year": 2017,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3019612.3019781",
            "Abstract": "Design patterns are widely recognized as reusable solutions that can be applied for improving design quality. However, empirical results suggest that patterns may sometimes support and other times hurt a quality attribute. Thus, there is a need for guidance on when a pattern is beneficial and when it is not. To provide such guidance, we propose a theoretical model for understanding the effect of patterns on quality. The obtained results are expected to improve the theoretical body of knowledge on design patterns, and facilitate informed decision making about when to insert or remove a pattern from a system. As an example, we present and discuss the results of modeling and exploring the effect of Decorator instances on quality. The results suggest that Decorator instances that are not expected to evolve through the addition of components in composite objects decrease system cohesion and therefore, modularity \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:NyGDZy8z5eUC",
            "Publisher": "Unknown"
        },
        {
            "Title": "What can violations of good practices tell about the relationship between GoF patterns and run-time quality attributes?",
            "Publication year": 2019,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584918301617",
            "Abstract": "GoF patterns have been extensively studied with respect to the benefit they provide as problem-solving, communication and quality improvement mechanisms. The latter has been mostly investigated through empirical studies, but some aspects of quality (esp. run-time ones) are still under-investigated.In this paper, we study if the presence of patterns enforces the conformance to good coding practices. To achieve this goal, we explore the relationship between the presence of GoF design patterns and violations of good practices related to source code correctness, performance and security, via static analysis.Specifically, we exploit static analysis so as to investigate whether the number of violations of good coding practices identified on classes is related to: (a) their participation in pattern occurrences, (b) the pattern category, (c) the pattern in which they participate, and (d) their role within the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Ade32sEp0pkC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Exploring the relation between co-changes and architectural smells",
            "Publication year": 2021,
            "Publication url": "https://link.springer.com/article/10.1007/s42979-020-00407-5",
            "Abstract": "The interplay between Maintainability and Reliability can be particularly complex and different kinds of trade-offs may arise when developers try to optimise for either one of these two qualities. To further understand how Maintainability and Reliability influence each other, we perform an empirical study using architectural smells and source code file co-changes as proxies for these two qualities, respectively. The study is designed using an exploratory multiple-case case study following well-know guidelines and using fourteen open source Java projects. Three different research questions are identified and investigated through statistical analysis. Co-changes are detected by using both a state-of-the-art algorithm and a novel approach. The three architectural smells selected are among the most important from the literature and are detected using open source tools. The results show that 50% of co-changes \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:JTqpx9DYBaYC",
            "Publisher": "Springer Singapore"
        },
        {
            "Title": "2014 Index IEEE Transactions on Software Engineering Vol. 40",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7014339/",
            "Abstract": "This index covers all technical items - papers, correspondence, reviews, etc. - that appeared in this periodical during the year, and items from previous years that were commented upon or corrected in this year. Departments and other items may also be covered if they have been judged to have archival value. The Author Index contains the primary entry for each item, listed under the first author's name. The primary entry includes the co-authors' names, the title of the paper or other item, and its location, specified by the publication abbreviation, year, month, and inclusive pagination. The Subject Index contains entries describing the item under all appropriate subject headings, plus the first author's name, the publication abbreviation, month, and year, and inclusive pages. Note that the item title is found only under the primary entry in the Author Index.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:86PQX7AUzd4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Modeling variants of architectural patterns",
            "Publication year": 2008,
            "Publication url": "http://eprints.cs.univie.ac.at/2335/1/eplop08Primitives.pdf",
            "Abstract": "Systematic modeling of architectural patterns is a challenging task mostly because of the inherent pattern variability and because pattern elements do not match the architectural abstractions of modeling languages. In this paper, we describe an approach for systematic modeling of architectural patterns using a set of architectural primitives and a vocabulary of pattern-specific architectural elements. These architectural primitives can be used as the basic building blocks for modeling a number of architectural patterns. We introduce profiles for the UML2 meta-model to express the architectural primitives. The use of the primitives along with the stereotyping scheme is capable of handling some of the challenges for the systematic modeling of architectural patterns, such as expressing pattern participants in software design.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:GnPB-g6toBAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Workshop for E-government via Software Services (WeGovS2 2009).",
            "Publication year": 2009,
            "Publication url": "https://research.rug.nl/files/2659021/2009ProcIEEEWETICELazovik.pdf",
            "Abstract": "Hans Wortmann Faculty of Economics and Business, Business & ICT University of Groningen, The Netherlands jc wortmann@ rug. nl e-government is a strategic direction to reduce administrative burden and make government more efficient and servicedirected. Despite recent achievements in research and actual implementation of e-Government in practice, numerous questions still remain on how to achieve full interoperability and dynamic reconfiguration of e-government services, with better accessibility, more transparency and manageability. The Service-Oriented Architecture (SOA) paradigm provides the necessary theoretical and technological support for the desired electronic government systems to become a reality. It satisfies the demand for a highly distributed heterogeneous environment with a large number of autonomous services and their providers together with users with their own goals and preferences. Therefore, the combination of the e-Government domain and SOA appears to be natural, as SOA provides an ideal platform to achieve the goal of a citizen-oriented and citizen-centric government organization. This workshop will provide a forum to discuss how the SOA paradigm may facilitate further advances in e-Government research as well as best practice examples of already implemented and applied solutions in the context of e-Government. We plan to have both formal and informal presentations on theoretical, technical and implementation aspects of the application of SOA for e-Government challenges and issues. The workshop\u2019s primary topic is an adaptation of SOA research results in the context of e-Government. As the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:1qzjygNMrQYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Hypermedia design for the mobile era",
            "Publication year": 2004,
            "Publication url": "https://www.inderscienceonline.com/doi/abs/10.1504/IJMC.2004.005165",
            "Abstract": "The daunting task of designing hypermedia applications for multi-channel access by heterogeneous devices has been the target of great attention by the academia and the practitioners community. The plethora of client platforms poses many challenges, due to the diversity of the available capabilities and restrictions of these platforms. This paper presents an attempt for designing a conceptual model for hypermedia applications that allows for easy update and alteration of its content as well as its presentation and also allows for deployment in various mobile platforms.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:isC4tDSrTZIC",
            "Publisher": "Inderscience Publishers"
        },
        {
            "Title": "Reusability index: A measure for assessing software assets reusability",
            "Publication year": 2018,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-90421-4_3",
            "Abstract": " The reusability of assets is usually measured through reusability indices. However, these indices either do not synthesize their constituent metrics into an aggregate or they do not capture all facets of reusability, such as structural characteristics, external qualities, and their documentation. To alleviate these shortcomings, we introduce a reusability index (REI) as a synthesis of various software metrics that cover a number of related reusability aspects. Furthermore, we evaluate its ability to quantify reuse, by comparing it to existing indices through a case study on 15 reusable open-source assets (i.e., libraries and frameworks). The results of the study suggest that the proposed index presents the highest predictive and discriminative power, it is the most consistent in ranking reusable assets, and the most strongly correlated to their levels of reuse. ",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:-mN3Mh-tlDkC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "The GRIFFIN collaborative virtual community for architectural knowledge management",
            "Publication year": 2010,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-10294-3_10",
            "Abstract": "Modern software architecting increasingly often takes place in geographically distributed contexts involving teams of professionals and customers with different backgrounds and roles. So far, attention and effort have been mainly dedicated to individuals sharing already formalized knowledge and less to social, informal collaboration. Furthermore, in Web 2.0 contexts, little to no attention has been given to practitioners carrying out complex, collaborative, and knowledge-intensive tasks in organizational contexts.This chapter shows how we can effectively support the combination of formal and informal collaboration and build a Virtual Community for architectural knowledge                sharing. We present a set of collaboration scenarios that define a conceptual model for such a Virtual Community. A solution in this area would realize the expectations of companies involved in IT and working in distributed \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:4DMP91E08xMC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Lightweight evaluation of software architecture decisions",
            "Publication year": 2014,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B9780124170094000065",
            "Abstract": "Software architecture is an important foundation of every software project. Therefore, it is advisable to evaluate it in early stages of the software design. Architecture evaluation helps to uncover risks and suboptimal decisions before they cause tremendous cost and re-engineering efforts. Unfortunately, many software companies still do not integrate architecture evaluations into their software projects as a standard activity. This is partially because architecture evaluation is perceived as complicated and time-consuming by some people. Modern agile development methodologies are perceived as avoiding up-front architectural design, which amplifies this problem. In this chapter, we present an extended description of the decision-centric architecture review (DCAR) method. DCAR is lightweight and easy to integrate into different types of software projects (traditional and agile projects). We present the method in detail \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:k8Z6L05lTy4C",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "Emerging Issues in Relating Software Requirements and Architecture",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-21001-3_17",
            "Abstract": "Many of the previous chapters have touched on, some in detail, the issue of whether we should develop a set of software requirements first and then an architecture for a system based on these requirements, or whether available architectural and technological platforms must be considered when actually eliciting, documenting and using requirements. Traditional wisdom has been that requirements for a system are captured and then a suitable architecture developed to fulfill these [2, 6]. As we have seen, many application domains, development approaches and technology solutions challenge this approach. For example, an understanding of architectural characteristics and technologies available for a problem domain are useful when discussing possible requirements with stakeholders e.g. what is actually feasible and what is not [3]. Similarly, many approaches have adopted round-trip engineering \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:ZfRJV9d4-WMC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "WICSA/ECSA'12 Proceedings of the WICSA/ECSA 2012 Companion Volume",
            "Publication year": 2012,
            "Publication url": "https://www.diva-portal.org/smash/record.jsf?pid=diva2:823401",
            "Abstract": "Variability is the ability of a software system or artifact to be adapted for specific contexts, in a preplanned manner. Many of today's software systems are built with variability in mind, eg, product lines and families, self-adaptive systems, open platforms, or service-based systems that support dynamic runtime composition of web services. Variability is reflected in and facilitated through the software architecture. Also, as the software architecture is a reference point for many development activities and for achieving quality attributes, variability should be treated as a first-class and cross-cutting concern in software architecture. Therefore, the Second International Workshop on Variability in Software Architecture (VARSA 2012) aims at identifying critical challenges and progressing the state-of-the-art on variability in software architecture. VARSA 2012 is a follow-up of the First International Workshop on Variability in Software Architecture (VARSA 2011), held at WICSA 2011.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:umqufdRvDiIC",
            "Publisher": "ACM Press"
        },
        {
            "Title": "Using architectural decisions",
            "Publication year": 2006,
            "Publication url": "https://research.rug.nl/files/2837493/2006ProcQoSAvdVen.pdf",
            "Abstract": "There are increasing demands for the explicit rep-resentation and subsequent sharing and usage of architectural decisions in the software architecting process. However, there is little known on how to use these architectural decisions, or what type of stakeholders need to use them. This paper presents a use case model that arose from industrial needs, and is meant to explore how these needs can be satisfied through the effective usage of architectural decisions by the relevant stakeholders. The use cases are currently being validated in practice through industrial case studies. As a result of this validation, we argue that the usage of architectural decisions by the corresponding stakeholders can enhance the quality of software architecture.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:eQOLeE2rZwMC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Tools and technologies for architecture knowledge management",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-02374-3_6",
            "Abstract": "As management of architectural knowledge becomes vital for improving an organization\u2019s architectural capabilities, support for (semi-) automating this management is required. There exist already several tools that specialize in architecture knowledge management, as well as generic technologies that can potentially be used for this purpose. Both tools and technologies cover a wide number of potential use cases for architecture knowledge management. In this chapter, we survey the existing tool support and related technologies for different architecture knowledge management strategies, and present them according to the use cases they offer.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:_kc_bZDykSQC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "What\u2019s on the menu? Today\u2019s specialty: a European networked university",
            "Publication year": 2003,
            "Publication url": "http://gnosis.library.ucy.ac.cy/handle/7/64498",
            "Abstract": "In the midst of one of the greatest challenges ever faced, the great demand for learning, educational organizations are being reformed. The MENU consortium is working on meeting this challenge by creating a European Networked University (ENU). This paper provides a macroscopic view of the process of creating such aon organization. It describes the concerns that have to be taken into account and it presents the strategy of ENU. It also identifies ENU customers as well as competitors and articulates where ENU is going and why. Most importantly, it presents the business processes that ENU shall carry out.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:VOx2b1Wkg3QC",
            "Publisher": "Department of Educational Sciences, University of Cyprus"
        },
        {
            "Title": "2017 IEEE/ACM Joint 5th International Workshop on Software Engineering for Systems-of-Systems and 11th Workshop on Distributed Software Development, Software Ecosystems and Systems-of-Systems (JSOS).",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7961677/",
            "Abstract": "The following topics are dealt with: software engineering; systems-of-systems; MDE ecosystem; MDE architecture; domain specific ecosystems; and software ecosystem health.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:kVjdVfd2voEC",
            "Publisher": "IEEE."
        },
        {
            "Title": "A Study On The Accumulation Of Technical Debt On Framework-based Web Applications",
            "Publication year": 2016,
            "Publication url": "http://sattose.wdfiles.com/local--files/2016:alltalks/SATTOSE2016_paper_12.pdf",
            "Abstract": "This paper presents the results of an observational study to investigate the advantages of using widely used software development frameworks for Java EE applications. Also, it presents the accumulation of Technical Debt and the evolution of the quality code metrics, when the software is developed using frameworks. Considering that web applications hold the lion\u2019s share of today\u2019s IT industry, this study focuses on two widely popular Java EE frameworks, namely Spring Web MVC Framework and Apache Struts 2. In particular, we have developed one system over four versions in both frameworks while Technical Debt and quality code metrics have been monitored. The findings indicate that software developed based on frameworks is relatively free of Technical Debt. Moreover, we have not noticed any significant differences between the two frameworks in terms of Technical Debt. In general, one could claim that framework-based development can potentiality lead to high quality and maintainable systems, if the framework is properly used.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:5icHVeHT4IsC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Quality attributes and quality models for ambient assisted living software systems: A systematic mapping",
            "Publication year": 2017,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584916302932",
            "Abstract": "Context: Ambient Assisted Living (AAL) has become an essential, multidisciplinary research topic, aiming at providing software systems and services that assist people in their everyday life activities. Considering the critical nature of AAL systems, several initiatives have already contributed to the improvement of their quality, by mainly focusing on their non-functional requirements. Despite the importance of quality assurance in AAL systems, there is a lack of a comprehensive analysis on how quality assurance is performed in such systems. This fact might in turn lead to an absence of standardization with regard to the quality assurance process of these systems.Objective: We provide a broad, detailed panorama about the state of the art on quality models (QMs) and quality attributes (QAs) that are important for the AAL domain.Method: We performed a Systematic Mapping (SM). We used six publication databases to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:AHdEip9mkN0C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Platform design space exploration using architecture decision viewpoints\u2013A longitudinal study",
            "Publication year": 2017,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S016412121630214X",
            "Abstract": "Design space exploration is the simultaneous analysis of problem and solution spaces for a specific domain or application scope. Performing this activity as part of the architectural design is beneficial, especially for software platforms, which are shared across organizations. Exploring the design space of software platforms in a multi-product and multi-domain context is not trivial, and only few methods exist to support this activity systematically.This paper reports on a longitudinal technical action research (TAR) study conducted to adapt and evaluate architecture decision viewpoints for supporting platform design space exploration. The study was conducted in the context of an ABB project, which was performed to explore the design space for a common software platform for mobile device support in several product-specific software platforms at ABB.The results indicate that the adapted decision viewpoints are well \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:2tRrZ1ZAMYUC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Advanced learning technologies in the new instructional paradigm",
            "Publication year": 2000,
            "Publication url": "https://research.rug.nl/files/3116644/2000ProcIESAvgeriou.pdf",
            "Abstract": "There is a trend towards the introduction of computer networks and related technologies into the educational and training process in order to enrich the latter by providing alternative means to the students for learning, communicating and collaborating. The need to shift from the conventional instructional paradigm to the new networked model is becoming eminent and the attempt of taming these technologies in order to make them functional and at the same time achieving pedagogical efficiency remains a great challenge. In this paper we present the technologies of computer networks that are used to support the instructional process, namely advanced learning technologies. After defining these technologies we describe the ways they can be used in the context of the learning process by categorizing them according to the services they provide. Next we present a brief literature review, outlining the major players that are conducting considerable research in the field of advanced learning technologies and are attempting to standardize the various aspects of these technologies. Finally we conclude with some remarks about the present situation in the application of advanced learning technologies.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:WA5NYHcadZ8C",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "On the relation between architectural smells and source code changes",
            "Publication year": 2021,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.2398",
            "Abstract": "Although architectural smells are one of the most studied type of architectural technical debt, their impact on maintenance effort has not been thoroughly investigated. Studying this impact would help to understand how much technical debt interest is being paid due to the existence of architecture smells and how this interest can be calculated. This work is a first attempt to address this issue by investigating the relation between architecture smells and source code changes. Specifically, we study whether the frequency and size of changes are correlated with the presence of a selected set of architectural smells. We detect architectural smells using the Arcan tool, which detects architectural smells by building a dependency graph of the system analyzed and then looking for the typical structures of the architectural smells. The findings, based on a case study of 31 open\u2010source Java systems, show that 87% of the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:0aBXIfxlw9sC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A comparative analysis of reference architectures for healthcare in the ambient assisted living domain",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7167499/",
            "Abstract": "Population aging has brought important challenges at social, economical, and healthcare issues, mainly due to the increasing number of people that need intensive care. Ambient Assisted Living (AAL) systems that aim at assisting people in their health-related activities have emerged. In another perspective, Reference Architectures (RAs) are a special type of software architecture that promotes reuse of design expertise and facilitates the development, standardization, and evolution of software systems. During the last years, important RAs for AAL systems have been created. However, there is a lack of studies that compare RAs for healthcare systems in AAL domain, making the selection among RAs a rather difficult task. In this paper, we present a comparative analysis and evaluate the completeness of that healthcare RAs. Specifically, we intend to offer: (i) a guide to select the most complete and adequate RA for \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:_axFR9aDTf0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Views on software engineering from the twin peaks of requirements and architecture",
            "Publication year": 2013,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2507288.2507323",
            "Abstract": "The disciplines of requirements engineering (RE) and software architecture (SA) are fundamental to the success of software projects. Even though RE and SA are often considered in isolation, drawing a line between RE and SA is neither feasible nor reasonable as requirements and architectural design impact each other. This observation motivated the Twin Peaks model that was the subject of the Second International Workshop on the Twin Peaks of Requirements and Architecture (TwinPeaks@ICSE 2013). TwinPeaks@ICSE 2013 was held in conjunction with the 35th International Conference on Software Engineering 2013 in San Francisco, CA. The workshop aimed at providing a forum for researchers, practitioners and educators from the areas of RE and SA to discuss their experiences, forge new collaborations, and explore innovative solutions that address the challenges that occur when relating RE and SA \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:4MWp96NkSFoC",
            "Publisher": "ACM"
        },
        {
            "Title": "Exploring the relation between technical debt principal and interest: An empirical approach",
            "Publication year": 2020,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584920301567",
            "Abstract": "The cornerstones of technical debt (TD) are two concepts borrowed from economics: principal and interest. Although in economics the two terms are related, in TD there is no study on this direction so as to validate the strength of the metaphor.We study the relation between Principal and Interest, and subsequently dig further into the \u2018ingredients\u2019 of each concept (since they are multi-faceted). In particular, we investigate if artifacts with similar levels of TD Principal exhibit a similar amount of TD Interest, and vice-versa.To achieve this goal, we performed an empirical study, analyzing the dataset using the Mantel test. Through the Mantel test, we examined the relation between TD Principal and Interest, and identified aspects that are able to denote proximity of artifacts, with respect to TD. Next, through Linear Mixed Effects (LME) modelling we studied the generalizability of the results.The \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:SGW5VrABaM0C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "REVIEWER THANKS",
            "Publication year": 2013,
            "Publication url": "https://www.computer.org/csdl/api/v1/periodical/mags/so/2013/01/download-issue/pdf#page=94",
            "Abstract": "I RECENTly REAd a paper about software engineering research, 1 and once again discovered that its author, Lionel Briand, had published \u201cmy\u201d ideas before I wrote them. Thankfully, his writing often stimulates further thinking, and this was no exception. His visionary thoughts on software engineering research started me thinking, but in terms of software engineering education rather than research. Briand wrote about the \u201cparadox of being both highly relevant and increasingly underfunded and discredited.\u201d Personally, I\u2019ve found that software engineering research gets more respect every year, although the funding is abysmally low, at least in the US. This article argues that software engineering is not given enough relevance or support in higher education.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:IsPWOBWtZBwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Fourth international workshop on sharing and reusing architectural knowledge (SHARK 2009)",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5071055/",
            "Abstract": "Architectural knowledge has been recognized by the software architecture community as a self-contained research area in software architecture, and brought along some promising research directions. In this workshop we discuss the issues that lead to the application of architectural knowledge in research and industrial practice, ongoing research and new ideas to advance the field. In its previous editions this workshop examined the state of the art and practice, future challenges and trends, and architectural knowledge as perceived by different research communities, including requirements engineering, service-oriented computing and international standardization. This fourth edition will discuss, among others, the application, experimentation, specialization and use of architectural knowledge theory and approaches.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:z_wVstp3MssC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A study on architectural smells prediction",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8906714/",
            "Abstract": "Architectural smells can be detrimental to the system maintainability, evolvability and represent a source of architectural debt. Thus, it is very important to be able to understand how they evolved in the past and to predict their future evolution. In this paper, we evaluate if the existence of architectural smells in the past versions of a project can be used to predict their presence in the future. We analyzed four Java projects in 295 Github releases and we applied for the prediction four different supervised learning models in a repeated cross-validation setting. We found that historical architectural smell information can be used to predict the presence of architectural smells in the future. Hence, practitioners should carefully monitor the evolution of architectural smells and take preventative actions to avoid introducing them and stave off their progressive growth.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:pAkWuXOU-OoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Learner\u2019s Mirror-Designing a User Modelling Component in Adaptive Hypermedia Educational Systems",
            "Publication year": 2004,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.562.5470",
            "Abstract": "Adaptive Hypermedia Educational Systems, AHES, represent an emerging technology that provides a unique advantage over traditional Web-based Educational Systems; that is the ability to adapt to the user's needs, goals, preferences etc. These systems are increasingly becoming part of mainstream education, yet there does not exist a disciplined way of designing them-most of the development is ad-hoc. This paper aims to fill this void, which is the absence of disciplined design, by recording the expertise of existing Adaptive Hypermedia Educational Systems in the form of design patterns. In this paper we present three of these patterns: User Model Definition, User Model Initialisation and User Model Maintenance, as well as a more complete organization map that illustrates the entire pattern language based on the patterns\u2019 relations.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:i2xiXl-TujoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Evaluation of a process for architectural assumption management in software development",
            "Publication year": 2018,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0167642318303253",
            "Abstract": "Architectural assumption management is critical to the success of software development projects. In this paper, we propose an Architectural Assumption Management (AAM) process, comprised of four AAM activities: Architectural Assumption Making, Description, Evaluation, and Maintenance.Evaluating the AAM process in architectural assumption management, regarding the ease of understanding and the effort of conducting the AAM process, as well as the effectiveness of using the AAM process to make architectural assumptions explicit and to identify and reduce invalid architectural assumptions.An explanatory study with 88 first-year master students in software engineering, and an exploratory study with five practitioners from five companies.(1) the ease of understanding the AAM process is moderate for first-year master students but easy for practitioners; (2) the effort of \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:rHJHxKgnXwkC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Resolving architectural mismatches of COTS through architectural reconciliation",
            "Publication year": 2005,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-30587-3_34",
            "Abstract": "The integration of COTS components into a system under development entails architectural mismatches. These have been tackled, so far, at the component level, through component adaptation techniques, but they also must be tackled at an architectural level of abstraction. In this paper we propose an approach for resolving architectural mismatches, with the aid of architectural reconciliation. The approach consists of designing and subsequently reconciling two architectural models, one that is forward-engineered from the requirements and another that is reverse-engineered from the COTS-based implementation. The final reconciled model is optimally adapted both to the requirements and to the actual COTS-based implementation. The contribution of this paper lies in the application of architectural reconciliation in the context of COTS-based software development. Architectural modeling is based upon the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:ULOm3_A8WrAC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Organizing a software architecture body of knowledge: summary of the 5th SHARK workshop, at ICSE 2010",
            "Publication year": 2010,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1838687.1838696",
            "Abstract": "Architectural Knowledge (AK) is defined as the integrated representation of the software architecture of a software-intensive system or family of systems along with architectural decisions and their rationale, external influence and the development environment. A fifth workshop on Sharing and Reusing Architectural Knowledge (SHARK) was held jointly with ICSE 2010 in Cape Town, South Africa. The theme of this workshop was the organization of a body of knowledge for software architecture knowledge management. It featured thirteen research position statements and three working groups that discussed on focused topics. This report summarizes the results of the discussions we held, and suggests some topics for future research.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:lSLTfruPkqcC",
            "Publisher": "ACM"
        },
        {
            "Title": "Software Engineering for Systems-of-Systems: Proceedings of the ACM Sigsoft/Sigplan International Workshop SESoS'2015",
            "Publication year": 2015,
            "Publication url": "https://hal.archives-ouvertes.fr/hal-01114141/",
            "Abstract": "CNRS| IRISA| IRISA-D4| UNIV-RENNES1| INSTITUT-TELECOM| INRIA| INSA-TOULOUSE| CENTRALESUPELEC| UR1-UFR-ISTIC| UNIV-RENNES| LAAS-RESEAUX-ET-COMMUNICATIONS| LAAS-SARA| LAAS| INSA-GROUPE| UNIV-TLSE3| UT1-CAPITOLE| UNIV-TLSE2| LAAS-RISC| IRISA_UBS| UBS| INSA-RENNES",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:0N-VGjzr574C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Experiences from Industrial Projects",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-21001-3_12",
            "Abstract": "The aim of the book is to develop the bridge between two \u2018islands\u2019: Software Architecture and Requirements Engineering. However, in Software engineering, there is another gap that needs to be bridged between two different types of communities: industry and academia. Industrial practitioners work under hard constraints and often do not have the luxury of trying out research results, let alone embedding them in their everyday practice. In contrast, academic researchers face the pressure of \u2018publish or perish\u2019 and often struggle with finding the right industrial context in which to validate their work. Nevertheless, when the right synergy is established between the two communities, there can be substantial progress of the state of the art.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:tKAzc9rXhukC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Developing a modeling tool using eclipse",
            "Publication year": 2008,
            "Publication url": "https://core.ac.uk/download/pdf/232377807.pdf",
            "Abstract": "Tool development using an open source platform provides autonomy to users to change, use, and develop cost-effective software with freedom from licensing requirements. However, open source tool development poses a number of challenges, such as poor documentation and continuous evolution. In this paper, we present our experience of developing a modeling tool in an open source environment. We not only explain the functionality of the tool, but also list the pros and cons of developing in such an environment. The contribution of this paper lies in introducing readers to the modeling tool and draw attention to some of the challenges faced by open source tool developers.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:e5wmG9Sq2KIC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "A process framework for embedded systems engineering",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6928803/",
            "Abstract": "Engineering of embedded systems is considered highly complex, due to the need for integrating multi-site, multi-lifecycle, multi-disciplinary, and multi-organization approaches. However, such challenges have not been comprehensively addressed in existing engineering processes. To this end, this study proposes a process framework to tackle these challenges, focusing on its meta-model, i.e. A set of elements used for process instantiation. As an exploratory validation of the proposed meta-model we conducted two focus groups with experts on embedded systems, resulting in positive feedback and industrial acceptance.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:VaXvl8Fpj5cC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Empirically-grounded reference architectures: a proposal",
            "Publication year": 2011,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2000259.2000285",
            "Abstract": "A reference architecture describes core elements of the software architecture for systems that stem from the same domain. A reference architecture ensures interoperability of systems through standardization. It also facilitates the instantiation of new concrete architectures. However, we currently lack procedures for systematically designing reference architectures that are empirically-grounded. Being empirically-grounded would increase the validity and reusability of a reference architecture. We therefore present an approach which helps systematically design reference architectures. Our approach consists of six steps performed by the software architect and domain experts. It helps design reference architectures either from scratch, or based on existing architecture artifacts. We also illustrate how our approach could be applied to the design of two existing reference architectures found in literature.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:kRWSkSYxWN8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Leveraging hypermedia engineering for multi-channel access with the use of XML",
            "Publication year": 2003,
            "Publication url": "https://dspace.lib.ntua.gr/xmlui/handle/123456789/15380",
            "Abstract": "Leveraging hypermedia engineering for multi-channel access with the use of XML \u0391\u03c1\u03c7\u03b9\u03ba\u03ae \u03a3\u03b5\u03bb\u03af\u03b4\u03b1 \n\u2192 \u039a\u03b5\u03bd\u03c4\u03c1\u03b9\u03ba\u03ae \u0392\u03b9\u03b2\u03bb\u03b9\u03bf\u03b8\u03ae\u03ba\u03b7 \u0395\u039c\u03a0\u2192 \u0399\u03b4\u03c1\u03c5\u03bc\u03b1\u03c4\u03b9\u03ba\u03cc \u0391\u03c0\u03bf\u03b8\u03b5\u03c4\u03ae\u03c1\u03b9\u03bf \u2192 \u0394\u03b7\u03bc\u03bf\u03c3\u03b9\u03b5\u03cd\u03c3\u03b5\u03b9\u03c2 \u03bc\u03b5\u03bb\u03ce\u03bd \u0394\u0395\u03a0\u03c3\u03b5 \u03c0\u03b5\u03c1\u03b9\u03bf\u03b4\u03b9\u03ba\u03ac \n\u2192 \u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03a4\u03b5\u03ba\u03bc\u03b7\u03c1\u03af\u03bf\u03c5 HEAL DSpace Leveraging hypermedia engineering for multi-channel \naccess with the use of XML \u0391\u03c0\u03bf\u03b8\u03b5\u03c4\u03ae\u03c1\u03b9\u03bf DSpace/Manakin Leveraging hypermedia engineering \nfor multi-channel access with the use of XML Synodinos, DG; Avgeriou, P URI: \nhttp://hdl.handle.net/123456789/15380 \u0397\u03bc\u03b5\u03c1\u03bf\u03bc\u03b7\u03bd\u03af\u03b1: 2003 \u0395\u03bc\u03c6\u03ac\u03bd\u03b9\u03c3\u03b7 \u03c0\u03bb\u03ae\u03c1\u03bf\u03c5\u03c2 \u03b5\u03b3\u03b3\u03c1\u03b1\u03c6\u03ae\u03c2 \u0391\u03c1\u03c7\u03b5\u03af\u03b1 \n\u03c3\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03c4\u03b5\u03ba\u03bc\u03ae\u03c1\u03b9\u03bf \u0391\u03c1\u03c7\u03b5\u03af\u03b1 \u039c\u03ad\u03b3\u03b5\u03b8\u03bf\u03c2 \u039c\u03bf\u03c1\u03c6\u03cc\u03c4\u03c5\u03c0\u03bf \u03a0\u03c1\u03bf\u03b2\u03bf\u03bb\u03ae \u0394\u03b5\u03bd \u03c5\u03c0\u03ac\u03c1\u03c7\u03bf\u03c5\u03bd \u03b1\u03c1\u03c7\u03b5\u03af\u03b1 \u03c0\u03bf\u03c5 \n\u03c3\u03c7\u03b5\u03c4\u03af\u03b6\u03bf\u03bd\u03c4\u03b1\u03b9 \u03bc\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03c4\u03b5\u03ba\u03bc\u03ae\u03c1\u03b9\u03bf. \u0391\u03c5\u03c4\u03cc \u03c4\u03bf \u03c4\u03b5\u03ba\u03bc\u03ae\u03c1\u03b9\u03bf \u03b5\u03bc\u03c6\u03b1\u03bd\u03af\u03b6\u03b5\u03c4\u03b1\u03b9 \u03c3\u03c4\u03b7\u03bd \u03b1\u03ba\u03cc\u03bb\u03bf\u03c5\u03b8\u03b7 \u03c3\u03c5\u03bb\u03bb\u03bf\u03b3\u03ae(\u03ad\u03c2) \n\u0394\u03b7\u03bc\u03bf\u03c3\u03b9\u03b5\u03cd\u03c3\u03b5\u03b9\u03c2 \u03bc\u03b5\u03bb\u03ce\u03bd \u0394\u0395\u03a0\u03c3\u03b5 \u03c0\u03b5\u03c1\u03b9\u03bf\u03b4\u03b9\u03ba\u03ac \u03a0\u03b5\u03c1\u03b9\u03ae\u03b3\u03b7\u03c3\u03b7 \u03a3\u03b5 \u03cc\u03bb\u03bf \u03c4\u03bf DSpace \u039a\u03bf\u03b9\u03bd\u03cc\u03c4\u03b7\u03c4\u03b5\u03c2 & \u03a3\u03c5\u03bb\u03bb\u03bf\u03b3\u03ad\u03c2 \u0391\u03bd\u03ac \n\u0397\u03bc\u03b5\u03c1\u03bf\u03bc\u03b7\u03bd\u03af\u03b1 \u0395\u03ba\u03b4\u03bf\u03c3\u03b7\u03c2 \u03a3\u03c5\u03b3\u03b3\u03c1\u03b1\u03c6\u03b5\u03af\u03c2 \u03a4\u03af\u03c4\u03bb\u03bf\u03b9 \u0398\u03ad\u03bc\u03b1\u03c4\u03b1 \u0391\u03c5\u03c4\u03ae \u03b7 \u03a3\u03c5\u03bb\u03bb\u03bf\u03b3\u03ae \u0391\u03bd\u03ac \u0397\u03bc\u03b5\u03c1\u03bf\u03bc\u03b7\u03bd\u03af\u03b1 \u0395\u03ba\u03b4\u03bf\u03c3\u03b7\u03c2 \u039f / - /\u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:HoB7MX3m0LUC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Software service engineering: Tenets and challenges",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5068816/",
            "Abstract": "Service-Oriented Architecture (SOA) constitutes a modern, standards-based and technology-independent paradigm and architectural style for distributed enterprise computing. The SOA style promotes the publishing, discovery, and binding of loosely-coupled, network-accessible software services. With SOA systems operating in distributed and heterogeneous execution environments, the engineers of such systems are confined by the limits of traditional software engineering. In this position paper, we scrutinize the fundamental tenets underpinning the development and maintenance of SOA systems. In particular, we introduce software service engineering as an emerging discipline that entails a departure from traditional software engineering disciplines, embracing the dasiaopen world assumptionpsila. We characterize software service engineering via seven defining tenets. Lastly, we survey related research \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:Zph67rFs4hoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Reducing architectural knowledge vaporization by applying the repertory grid technique",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-23798-0_27",
            "Abstract": "The architecture of a software-intensive system is the composition of architectural design decisions. These decisions are an important part of Architectural Knowledge (AK). Failure to document architectural design decisions can lead to AK vaporization and higher maintenance costs. To reduce AK vaporization, we propose to apply the Repertory Grid Technique (RGT) to make tacit knowledge about architecture decisions explicit. An architect can use the RGT to elicit decision alternatives and concerns, and to rank each alternative against concerns. To validate our approach, we conducted a survey with graduate students. In the survey, participants documented decisions using the RGT. We compared these decisions with decisions documented using a basic decision template. Our results suggest that RGT leads to less AK vaporization, compared to conventional ways of documenting decisions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:mvPsJ3kp5DgC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Quality attribute trade-offs in the embedded systems industry: an exploratory case study",
            "Publication year": 2020,
            "Publication url": "https://link.springer.com/article/10.1007/s11219-019-09478-x",
            "Abstract": "The embedded systems domain has grown exponentially over the past years. The industry is forced by the market to rapidly improve and release new products to beat the competition. Frenetic development rhythms thus shape this domain and give rise to several new challenges for software design and development. One of them is dealing with trade-offs between run-time and design-time quality attributes. To study practices, processes and tools concerning the management of run-time and design-time quality attributes as well as the trade-offs among them from the perspective of embedded systems software engineers. An exploratory case study with two qualitative data collection steps, namely interviews and a focus group, involving six different companies from the embedded systems domain with a total of twenty participants. The interviewed subjects showed a preference for run-time over design-time qualities \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:w1MjKQ0l0TYC",
            "Publisher": "Springer US"
        },
        {
            "Title": "Quality Rule Violations in SharePoint Applications: An Empirical Study in Industry",
            "Publication year": 2016,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-49094-6_35",
            "Abstract": "In this paper, we focus on source code quality assessment for SharePoint applications, which is a powerful framework for developing software by combining imperative and declarative programming. In particular, we present an industrial case study conducted in a software consulting/development company in Netherlands, which aimed at: identifying the most common SharePoint quality rule violations and their severity. The results indicate that the most frequent rule violations are identified in the JavaScript part of the applications, and that the most severe ones are related to correctness, security and deployment. The aforementioned results can be exploited by both researchers and practitioners, in terms of future research directions, and to inform the quality assurance process.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:vDZJ-YLwNdEC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Technical Debt in Agile Development: Report on the Ninth Workshop on Managing Technical Debt (MTD 2017)",
            "Publication year": 2017,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3127360.3127372",
            "Abstract": "We report on the Ninth International Workshop on Managing Technical Debt, collocated with the 18th International Conference on Agile Software Development (XP 2017) in Cologne. The technical debt research community continues to expand through collaborations of industry, tool vendors, and academia. The theme of this year's workshop was on technical debt in agile development. Presentations and discussion centered on the topics: technical debt at the code level, architectural technical debt assessment, agile approaches and their impact on technical debt management, and selling the business case of technical debt management.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:FiytvqdAVhgC",
            "Publisher": "ACM"
        },
        {
            "Title": "Managing technical debt in software engineering (dagstuhl seminar 16162)",
            "Publication year": 2016,
            "Publication url": "https://drops.dagstuhl.de/opus/volltexte/2016/6693/",
            "Abstract": "This report documents the program and outcomes of Dagstuhl Seminar 16162,\u201cManaging Technical Debt in Software Engineering.\u201d We summarize the goals and format of the seminar, results from the breakout groups, a definition for technical debt, a draft conceptual model, and a research road map that culminated from the discussions during the seminar. The report also includes the abstracts of the talks presented at the seminar and summaries of open discussions.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:LgRImbQfgY4C",
            "Publisher": "Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik"
        },
        {
            "Title": "Does it matter who pays back Technical Debt? An empirical study of self-fixed TD",
            "Publication year": 2021,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584921001889",
            "Abstract": "Technical Debt (TD) can be paid back either by those that incurred it or by others. We call the former self-fixed TD, and it can be particularly effective, as developers are experts in their own code and are well-suited to fix the corresponding TD issues.The goal of our study is to investigate self-fixed technical debt, especially the extent in which TD is self-fixed, which types of TD are more likely to be self-fixed, whether the remediation time of self-fixed TD is shorter than non-self-fixed TD and how development behaviors are related to self-fixed TD.We report on an empirical study that analyzes the self-fixed issues of five types of TD (i.e., Code, Defect, Design, Documentation and Test), captured via static analysis, in more than 44,000 commits obtained from 20 Python and 16 Java projects of the Apache Software Foundation.The results show that about half of the fixed issues are self-fixed \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:eGYfIraVYiQC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "A systematic literature review on methods that handle multiple quality attributes in architecture-based self-adaptive systems",
            "Publication year": 2017,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584917302860",
            "Abstract": "Handling multiple quality attributes (QAs) in the domain of self-adaptive systems is an understudied research area. One well-known approach to engineer adaptive software systems and fulfill QAs of the system is architecture-based self-adaptation. In order to develop models that capture the required knowledge of the QAs of interest, and to investigate how these models can be employed at runtime to handle multiple quality attributes, we need to first examine current architecture-based self-adaptive methods.In this paper we review the state-of-the-art of architecture-based methods for handling multiple QAs in self-adaptive systems. We also provide a descriptive analysis of the collected data from the literature.We conducted a systematic literature review by performing an automatic search on 28 selected venues and books in the domain of self-adaptive systems. As a result, we selected 54 \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:jgBuDB5drN8C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "A top\u2010down approach to construct execution views of a large software\u2010intensive system",
            "Publication year": 2013,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.577",
            "Abstract": "This paper presents an approach to construct execution views, which are views that describe what the software of a software\u2010intensive system does at runtime and how it does it. The approach represents an architecture reconstruction solution based on a metamodel, a set of viewpoints, and a dynamic analysis technique. The metamodel and viewpoints capture the conventions that can be used to describe the runtime of a system developed by a particular organization. The dynamic analysis technique is used to extract and abstract runtime information from a combination of system logging and runtime measurements in a top\u2010down fashion. The approach was developed and validated constructing execution views for a magnetic resonance imaging scanner developed by Philips Healthcare. Therefore, the approach represents a solution that can be applied at similar large and complex software\u2010intensive systems \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:eMMeJKvmdy0C",
            "Publisher": "John Wiley & Sons, Ltd"
        },
        {
            "Title": "Variability in Web Services",
            "Publication year": 2013,
            "Publication url": "https://dialnet.unirioja.es/servlet/articulo?codigo=4821735",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Dem6FJhTUoYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Past and future of software architectural decisions\u2013A systematic mapping study",
            "Publication year": 2014,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584914000706",
            "Abstract": "The software architecture of a system is the result of a set of architectural decisions. The topic of architectural decisions in software engineering has received significant attention in recent years. However, no systematic overview exists on the state of research on architectural decisions.The goal of this study is to provide a systematic overview of the state of research on architectural decisions. Such an overview helps researchers reflect on previous research and plan future research. Furthermore, such an overview helps practitioners understand the state of research, and how research results can help practitioners in their architectural decision-making.We conducted a systematic mapping study, covering studies published between January 2002 and January 2012. We defined six research questions. We queried six reference databases and obtained an initial result set of 28,895 papers. We \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:tuHXwOkdijsC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Generating code for UML diagrams",
            "Publication year": 2009,
            "Publication url": "https://fse.studenttheses.ub.rug.nl/8696/3/INF-BA-2009-S.Esposito.pdf",
            "Abstract": "The Unified Modeling Language (UML) is a standard language used to specify and visualize the architecture of a software system under construction. The language provides a rich set of elements for modeling the structural as well as the behavioral aspects of a software system. These aspects can then be graphically represented using structure and behavior diagrams. UML is an extensible language offering profiles and stereotypes as mechanisms for customization. The benefits of UML are often summarized in the saying \u2018A picture is worth a thousand words\u2019, because its diagrams greatly ease the communication on software architecture.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:j8SEvjWlNXcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Learning object metadata in a Web-based learning environment",
            "Publication year": 2000,
            "Publication url": "http://www.cs.rug.nl/paris/papers/TTLHE00lom.pdf",
            "Abstract": "The plethora and variance of learning resources embedded in modern web-based learning environments require a mechanism to enable their structured administration. This goal can be achieved by defining metadata on them and constructing a system that manages the metadata in the context of the learning environment. Both activities have to meet certain standards.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:Mojj43d5GZwC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Software architecture",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/978-3-319-09970-5.pdf",
            "Abstract": "These are the proceedings of the European Conference on Software Architecture (ECSA), which is the premier European conference dedicated to the field of software architecture. ECSA provides researchers and practitioners with a platform to present and discuss the most recent, innovative, and significant findings and experiences in the field of software architecture research and practice. The eighth edition of ECSA was built upon a history of a successful series of European workshops on software architecture held from 2004 through 2006 and a series of European software architecture conferences from 2007 through 2013. ECSA was merged with the Working IEEE/IFIP Conference on Software Architecture (WICSA) in 2009 and 2012.Apart from the traditional technical program consisting of keynote talks, a main research track, discussion panels, and a tool demonstration track, the scope of ECSA 2014 was \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:-FonjvnnhkoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Investigating instability architectural smells evolution: an exploratory case study",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8919109/",
            "Abstract": "Architectural smells may substantially increase maintenance effort and thus require extra attention for potential refactoring. While we currently understand this concept and have identified different types of such smells, we have not yet studied their evolution in depth. This is necessary to inform their prioritisation and refactoring. This study analyses the evolution of individual architectural smell instances over time, and the characteristics that define these instances. Three different types of architectural smells are taken into consideration and mined from a total of 524 versions across 14 different projects. The results show how different smell types differ in multiple aspects, such as their growth rate, the importance of the affected elements over time in the dependency network of the system, and the time each instance affects the system. They also cast valuable insights on what aspects are the most important to consider \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:KNjnJ3z-R6IC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A comparative study of challenges in integrating open source software and inner source software",
            "Publication year": 2011,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S095058491100142X",
            "Abstract": "Several large software-developing organizations have adopted Open Source Software development (OSSD) practices to develop in-house components that are subsequently integrated into products. This phenomenon is also known as \u201cInner Source\u201d. While there have been several reports of successful cases of this phenomenon, little is known about the challenges that practitioners face when integrating software that is developed in such a setting.The objective of this study was to shed light on challenges related to building products with components that have been developed within an Inner Source development environment.Following an initial systematic literature review to generate seed category data constructs, we performed an in-depth exploratory case study in an organization that has a significant track record in the implementation of Inner Source. Data was gathered through semi \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:J_g5lzvAfSwC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "An exploratory case study on reusing architecture decisions in software-intensive system projects",
            "Publication year": 2018,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121218301110",
            "Abstract": "Reusing architecture decisions from previous projects promises to support architects when taking decisions. However, little is known about the state of art of decision-reuse and the benefits and challenges associated with reusing decisions. Therefore, we study how software architects reuse architecture decisions, the stakeholders and their concerns related to decision-reuse, and how architects perceive the ideal future state of decision-reuse. We conducted a qualitative explorative case study in the software-intensive systems industry. The study has shown that architects frequently reuse decisions but are confined to decisions they already know or have heard about. The results also suggest that architects reuse decisions in an ad-hoc manner. Moreover this study presents a conceptual model of decision-reuse and lists stakeholder concerns with regards to decision-reuse. The results of this study indicate that \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:3NQIlFlcGxIC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Proceedings of the 4th ACM/IEEE International Workshop on Software Engineering for Systems-of-Systems (SESoS 2016)",
            "Publication year": 2016,
            "Publication url": "https://hal.archives-ouvertes.fr/hal-01441206/",
            "Abstract": "CNRS| INSA-TOULOUSE| INSTITUT-TELECOM| UNIV-RENNES1| INRIA| IRISA| CENTRALESUPELEC| UR1-UFR-ISTIC| LAAS| LAAS-RESEAUX-ET-COMMUNICATIONS| LAAS-SARA| UNIV-RENNES| INSA-GROUPE| UNIV-TLSE3| UT1-CAPITOLE| UNIV-TLSE2| LAAS-RISC| IRISA_UBS| UBS| INSA-RENNES",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:otzGkya1bYkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "An overview of software engineering approaches to service oriented architectures in various fields",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5159254/",
            "Abstract": "For the last few years, a rise has been observed in research activity in Service Oriented Architectures, with applications in different sectors. Several new technologies have been introduced and even more are being currently researched and aimed to the future. In this paper we present and analyze some of the most influential approaches from a software engineerpsilas point of view that belong either to the academic or to the industrial field. Despite their differences though, all of these approaches share a service oriented mentality, with the purpose of lessening the issues of clients and companies, students and teachers, citizens and government employees alike. Lastly, we discuss our findings from the comparison and present possible new research opportunities for the immediate future.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:-f6ydRqryjwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "An empirical investigation of modularity metrics for indicating architectural technical debt",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2602576.2602581",
            "Abstract": "Architectural technical debt (ATD) is incurred by design decisions that consciously or unconsciously compromise system-wide quality attributes, particularly maintainability and evolvability. ATD needs to be identified and measured, so that it can be monitored and eventually repaid, when appropriate. In practice, ATD is difficult to identify and measure, since ATD does not yield observable behaviors to end users. One indicator of ATD, is the average number of modified components per commit (ANMCC): a higher ANMCC indicates more ATD in a software system. However, it is difficult and sometimes impossible to calculate ANMCC, because the data (ie, the log of commits) are not always available. In this work, we propose to use software modularity metrics, which can be directly calculated based on source code, as a substitute of ANMCC to indicate ATD. We validate the correlation between ANMCC and modularity \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:lmc2jWPfTJgC",
            "Publisher": "Unknown"
        },
        {
            "Title": "10 years of software architecture knowledge management: Practice and future",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121215002034",
            "Abstract": "The importance of architectural knowledge (AK) management for software development has been highlighted over the past ten years, where a significant amount of research has been done. Since the first systems using design rationale in the seventies and eighties to the more modern approaches using AK for designing software architectures, a variety of models, approaches, and research tools have leveraged the interests of researchers and practitioners in AK management (AKM). Capturing, sharing, and using AK has many benefits for software designers and maintainers, but the cost to capture this relevant knowledge hampers a widespread use by software companies. However, as the improvements made over the last decade didn't boost a wider adoption of AKM approaches, there is a need to identify the successes and shortcomings of current AK approaches and know what industry needs from AK. Therefore \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:HIFyuExEbWQC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "The role of quality attributes in service-based systems architecting: a survey",
            "Publication year": 2013,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-39031-9_18",
            "Abstract": "Quality attributes (QA) play a fundamental role when architecting software systems. However, in contrast to QA in traditional software systems, the role of QA when architecting service-based systems (SBS) has not yet been studied in depth. Thus, we conducted a descriptive survey to explore how QA are treated during the architecting of SBS. Data were collected using an online questionnaire targeted at participants with architecting experience. Our survey shows that QA and functional requirements of SBS are mostly considered equally important. Also, QA are usually treated explicitly rather than implicitly. Furthermore, dependability and performance appear to be the most important QA in the context of SBS. Our results partially show that general findings on QA also apply to the domain of SBS. On the other hand, we did not find a confirmation that QA are primary drivers for the architecting of SBS, or that \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:uc_IGeMz5qoC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Towards Studying the Evolution of Technical Debt in the Python Projects from the Apache Software Ecosystem.",
            "Publication year": 2018,
            "Publication url": "http://ceur-ws.org/Vol-2361/short11.pdf",
            "Abstract": "The topic of technical debt has gained significant attention from researchers in recent years since its management has significant impact of software development. Several studies that analyze technical debt evolution from different perspectives; however since most of these studies are done for Java very little is known about the evolution of technical debt in software ecosystems consisting of projects written in other languages. In this paper we run a study across nine Python open-source software projects belonging to the Apache Software Foundation to investigate the amount of technical debt that is paid back. To measure technical debt we use one of the standard tools in industry: SonarQube. We investigate the impact of using the 28 default rules of SonarQube for Python versus using an extended set of 208 rules to detect instances of technical debt.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:RoXSNcbkSzsC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Patterns for documenting software architectures",
            "Publication year": 2004,
            "Publication url": "https://www.researchgate.net/profile/Nicolas-Guelfi/publication/228713245_Patterns_for_documenting_software_architectures/links/0c960523c409ce3135000000/Patterns-for-documenting-software-architectures.pdf",
            "Abstract": "The process of creating the architecture of a software system results in a documentation, which is recognized as a key artifact for stakeholder communication, early analysis of the system, support for quality attributes and trouble-free maintenance. The problem of software architecture documentation remains to a large extent unsolved; however the past few years, significant advances have been made in the field from research academic and industrial centers. This paper introduces an approach for recording the results that have been achieved hitherto in the field of documenting software architectures, by formatting them in the shape of patterns. We aim at assembling knowledge and experience in the field from industry and academia, with respect to the few issues that the community has reached consensus. Furthermore, by codifying this knowledge and experience in the form of patterns, we hope for a wider dissemination of architectural documentation concepts and practices to the community and thus a further advance of the field.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:NMxIlDl6LWMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "How Can We Educate Students on the Web Engineering Discipline Via the Web? The NTUA's Approach",
            "Publication year": 2000,
            "Publication url": "https://research.rug.nl/files/3144776/2000ProcTTLHERetalis.pdf",
            "Abstract": "Over the last years the Web has been increasingly used as a platform for supporting the delivery of flexible and interactive hypermedia applications. However, it is admitted that the dominant approach is ad hoc development. Developers should be educated in the use of effective processes, process models, methods, tools and documentation guidelines. In few words, they should be trained on the Web Engineering discipline. The number of courses which deal with this discipline is augmenting. National Technical University of Athens (NTUA), Greece offers such a course with a main pedagogical aim to make students well aware of the advantages when following systematic hypermedia development approaches contrary to ad hoc practices. NTUA\u2019s approach was to use open learning methods based on a Web-based instructional system. NTUA team developed the instructional system in a systematic way having challenged itself that such way can lead to pedagogically effective instructional delivery and to learning material fo high quality. The evaluation results showed that the challenge was met. This paper presents the NTUA\u2019s instructional approach about the web engineering discipline and the qualitative evaluation results.",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:tkaPQYYpVKoC",
            "Publisher": "University of Groningen, Johann Bernoulli Institute for Mathematics and Computer Science"
        },
        {
            "Title": "Validating and improving a knowledge acquisition approach for architectural decisions",
            "Publication year": 2014,
            "Publication url": "https://www.worldscientific.com/doi/abs/10.1142/S0218194014500211",
            "Abstract": "Software architects make architectural decisions such as choosing architecture patterns or frameworks. Capturing architectural decisions reduces evolution costs for software systems. Existing approaches overlook the challenge of capturing tacit knowledge about architectural decisions. Previously, we proposed the REGAIN approach to capture tacit knowledge about architectural decisions. REGAIN is based on the Repertory Grid technique, a powerful knowledge acquisition approach from knowledge engineering. However, REGAIN lacked industrial validation. Therefore, in this paper, we initially present a study to ensure that REGAIN meets the needs of industrial architects. We interviewed 16 architects who indicated REGAIN advantages such as systematic decision-making support. Also, architects indicated improvement opportunities, in particular tool support and the possibility to prioritize concerns that are used \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:e_rmSamDkqQC",
            "Publisher": "World Scientific Publishing Company"
        },
        {
            "Title": "A systematic mapping study on the combination of software architecture and agile development",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121215002125",
            "Abstract": "Combining software architecture and agile development has received significant attention in recent years. However, there exists no comprehensive overview of the state of research on the architecture-agility combination.This work aims to analyze the combination of architecture and agile methods for the purpose of exploration and analysis with respect to architecting activities and approaches, agile methods and practices, costs, benefits, challenges, factors, tools, and lessons learned concerning the combination.A systematic mapping study (SMS) was conducted, covering the literature on the architecture-agility combination published between February 2001 and January 2014.Fifty-four studies were finally included in this SMS. Some of the highlights: (1) a significant difference exists in the proportion of various architecting activities, agile methods, and agile practices employed in the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:mNrWkgRL2YcC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Editorial message: special track on engineering e-learning systems",
            "Publication year": 2004,
            "Publication url": "https://dl.acm.org/doi/pdf/10.1145/967900.968085",
            "Abstract": "\u2022 Methods, Methodologies and Processes\u2022 Adaptive e-Learning Systems\u2022 Instructional Design of e-Learning Systems\u2022 Authoring of e-Learning Content",
            "Abstract entirety": 1,
            "Author pub id": "OlYdiYMAAAAJ:738O_yMBCRsC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A survey on quality attributes in service-based systems",
            "Publication year": 2016,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/s11219-015-9268-4.pdf",
            "Abstract": "Service-based systems have become popular in the software industry. In software engineering, it is widely acknowledged that requirements on quality attributes (e.g., performance, security, reliability) significantly impact the design of software systems. This study explores the role of quality attributes during the design of service-based systems. We investigate the significance of quality attributes when designing service-based systems and how quality attributes are addressed through design decisions, across application domains, and related to other aspects of software development, e.g., architecture documentation. We conducted a descriptive survey. The survey was done as an online questionnaire targeting practitioners. Furthermore, we included researchers with practical design experience. We obtained 56 valid responses. Most survey participants consider quality attributes and functionality as equally \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:edDO8Oi4QzsC",
            "Publisher": "Springer US"
        },
        {
            "Title": "Software metrics fluctuation: a property for assisting the metric selection process",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584915002190",
            "Abstract": "Software quality attributes are assessed by employing appropriate metrics. However, the choice of such metrics is not always obvious and is further complicated by the multitude of available metrics. To assist metrics selection, several properties have been proposed. However, although metrics are often used to assess successive software versions, there is no property that assesses their ability to capture structural changes along evolution.We introduce a property, Software Metric Fluctuation (SMF), which quantifies the degree to which a metric score varies, due to changes occurring between successive system's versions. Regarding SMF, metrics can be characterized as sensitive (changes induce high variation on the metric score) or stable (changes induce low variation on the metric score).SMF property has been evaluated by: (a) a case study on 20 OSS projects to assess the ability of SMF \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:OR75R8vi5nAC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "The perception of technical debt in the embedded systems domain: an industrial case study",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7776447/",
            "Abstract": "Technical Debt Management (TDM) has drawn the attention of software industries during the last years, including embedded systems. However, we currently lack an overview of how practitioners from this application domain perceive technical debt. To this end, we conducted a multiple case study in the embedded systems industry, to investigate: (a) the expected life-time of components that have TD, (b) the most frequently occurring types of TD in them, and (c) the significance of TD against run-time quality attributes. The case study was performed on seven embedded systems industries (telecommunications, printing, smart manufacturing, sensors, etc.) from five countries (Greece, Netherlands, Sweden, Austria, and Finland). The results of the case study suggest that: (a) maintainability is more seriously considered when the expected lifetime of components is larger than ten years, (b) the most frequent types of debt \u2026",
            "Abstract entirety": 0,
            "Author pub id": "OlYdiYMAAAAJ:tH6gc1N1XXoC",
            "Publisher": "IEEE"
        }
    ]
}]