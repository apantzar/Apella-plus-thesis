[{
    "name": "\u0392\u03b1\u03c3\u03af\u03bb\u03b5\u03b9\u03bf\u03c2 \u0394\u03b7\u03bc\u03b1\u03ba\u03cc\u03c0\u03bf\u03c5\u03bb\u03bf\u03c2 ",
    "romanize name": "Vasileios Dimakopoulos ",
    "School-Department": "\u039c\u03b7\u03c7\u03b1\u03bd\u03b9\u03ba\u03ce\u03bd \u0397\u03bb\u03b5\u03ba\u03c4\u03c1\u03bf\u03bd\u03b9\u03ba\u03ce\u03bd \u03a5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ce\u03bd & \u03a0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ba\u03ae\u03c2",
    "University": "uoi",
    "Rank": "\u0391\u03bd\u03b1\u03c0\u03bb\u03b7\u03c1\u03c9\u03c4\u03ae\u03c2 \u039a\u03b1\u03b8\u03b7\u03b3\u03b7\u03c4\u03ae\u03c2",
    "Apella_id": 522,
    "Scholar name": "Vassilios V. Dimakopoulos",
    "Scholar id": "JIGQWuAAAAAJ",
    "Affiliation": "University of Ioannina",
    "Citedby": 750,
    "Interests": [
        "Parallel and distributed systems",
        "parallel programming",
        "computer architecture",
        "performance analysis",
        "p2p networks"
    ],
    "Scholar url": "https://scholar.google.com/citations?user=JIGQWuAAAAAJ&hl=en",
    "Publications": [
        {
            "Title": "Targeting the parallella",
            "Publication year": 2015,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-662-48096-0_51",
            "Abstract": "Heterogeneous computing involves the combined use of processing elements with different architectures and is widely considered a prerequisite in the quest for higher performance and lower power consumption. To support this trend, the OpenMP standard has been recently augmented with directives that target systems consisting of general-purpose hosts and accelerator devices that may execute portion of a unified application code. In this work we present the first implementation of the OpenMP 4.0 accelerator directives for the Parallella board, a very popular credit-card sized multicore system consisting of a dual-core ARM host processor and a distinct 16-core Epiphany co-processor. We discuss in detail the necessary compiler and runtime infrastructures of our prototype, both for the host and the co-processor sides.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:blknAaTinKkC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "\u03a0\u03b1\u03c1\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 \u03ba\u03b1\u03b9 \u03c0\u03c1\u03bf\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03b9\u03c3\u03bc\u03cc\u03c2",
            "Publication year": 2015,
            "Publication url": "https://repository.kallipos.gr/handle/11419/3209",
            "Abstract": "\u03a4\u03bf \u03b2\u03b9\u03b2\u03bb\u03af\u03bf \u03b1\u03c5\u03c4\u03cc \u03b1\u03c0\u03b5\u03c5\u03b8\u03cd\u03bd\u03b5\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03c0\u03c1\u03bf\u03c0\u03c4\u03c5\u03c7\u03b9\u03b1\u03ba\u03bf\u03cd\u03c2 \u03ba\u03b1\u03b9 \u03bc\u03b5\u03c4\u03b1\u03c0\u03c4\u03c5\u03c7\u03b9\u03b1\u03ba\u03bf\u03cd\u03c2 \u03c6\u03bf\u03b9\u03c4\u03b7\u03c4\u03ad\u03c2 \u03c4\u03bc\u03b7\u03bc\u03ac\u03c4\u03c9\u03bd \u03a0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ba\u03ae\u03c2, \u039c\u03b7\u03c7\u03b1\u03bd\u03b9\u03ba\u03ce\u03bd \u0397\u03bb\u03b5\u03ba\u03c4\u03c1\u03bf\u03bd\u03b9\u03ba\u03ce\u03bd \u03a5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ce\u03bd \u03ba\u03b1\u03b9 \u03c0\u03b1\u03c1\u03b5\u03bc\u03c6\u03b5\u03c1\u03ce\u03bd \u03b3\u03bd\u03c9\u03c3\u03c4\u03b9\u03ba\u03ce\u03bd \u03b1\u03bd\u03c4\u03b9\u03ba\u03b5\u03b9\u03bc\u03ad\u03bd\u03c9\u03bd. \u03a4\u03b1 \u03b8\u03ad\u03bc\u03b1\u03c4\u03b1 \u03c0\u03bf\u03c5 \u03c0\u03c1\u03b1\u03b3\u03bc\u03b1\u03c4\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03b5\u03af\u03bd\u03b1\u03b9 \u03ac\u03ba\u03c1\u03c9\u03c2 \u03b5\u03c0\u03af\u03ba\u03b1\u03b9\u03c1\u03b1 \u03ba\u03b1\u03b9 \u03b1\u03c6\u03bf\u03c1\u03bf\u03cd\u03bd \u03c4\u03bf\u03c5\u03c2 \u03c3\u03cd\u03b3\u03c7\u03c1\u03bf\u03bd\u03bf\u03c5\u03c2 \u03c0\u03b1\u03c1\u03ac\u03bb\u03bb\u03b7\u03bb\u03bf\u03c5\u03c2/\u03c0\u03bf\u03bb\u03c5\u03c0\u03cd\u03c1\u03b7\u03bd\u03bf\u03c5\u03c2 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ad\u03c2 \u03bf\u03b9 \u03bf\u03c0\u03bf\u03af\u03bf\u03b9 \u03c0\u03bb\u03ad\u03bf\u03bd \u03b1\u03c0\u03bf\u03c4\u03b5\u03bb\u03bf\u03cd\u03bd \u03c3\u03c7\u03b5\u03b4\u03cc\u03bd \u03c4\u03bf\u03bd \u03bc\u03bf\u03bd\u03b1\u03b4\u03b9\u03ba\u03cc \u03c4\u03cd\u03c0\u03bf \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ae, \u03b5\u03af\u03c4\u03b5 \u03b3\u03b5\u03bd\u03b9\u03ba\u03bf\u03cd \u03b5\u03af\u03c4\u03b5 \u03b5\u03b9\u03b4\u03b9\u03ba\u03bf\u03cd \u03c3\u03ba\u03bf\u03c0\u03bf\u03cd. \u0395\u03ba\u03c4\u03cc\u03c2 \u03b1\u03c0\u03cc \u03c4\u03bf\u03c5\u03c2 \u03c0\u03b1\u03c1\u03b1\u03c0\u03ac\u03bd\u03c9 \u03c6\u03bf\u03b9\u03c4\u03b7\u03c4\u03ad\u03c2, \u03c4\u03bf \u03b2\u03b9\u03b2\u03bb\u03af\u03bf \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b7\u03b8\u03b5\u03af \u03ba\u03b1\u03b9 \u03b1\u03c0\u03cc \u03b1\u03bd\u03b1\u03b3\u03bd\u03ce\u03c3\u03c4\u03b5\u03c2/\u03b5\u03c0\u03b1\u03b3\u03b3\u03b5\u03bb\u03bc\u03b1\u03c4\u03af\u03b5\u03c2/\u03b5\u03c0\u03b9\u03c3\u03c4\u03ae\u03bc\u03bf\u03bd\u03b5\u03c2 \u03c0\u03bf\u03c5 \u03ad\u03c7\u03bf\u03c5\u03bd \u03b3\u03b5\u03bd\u03b9\u03ba\u03cc\u03c4\u03b5\u03c1\u03b7 \u03c0\u03b1\u03b9\u03b4\u03b5\u03af\u03b1 \u03c3\u03c4\u03bf\u03c5\u03c2 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ad\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b7\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ba\u03ae \u03b1\u03bb\u03bb\u03ac \u03b5\u03bb\u03ac\u03c7\u03b9\u03c3\u03c4\u03b7 \u03ad\u03ba\u03b8\u03b5\u03c3\u03b7 \u03c3\u03c4\u03b7\u03bd \u03bd\u03ad\u03b1 \u03b1\u03c5\u03c4\u03ae \u03c4\u03b5\u03c7\u03bd\u03bf\u03bb\u03bf\u03b3\u03af\u03b1, \u03ba\u03b1\u03b8\u03ce\u03c2 \u03c4\u03bf \u03b2\u03b9\u03b2\u03bb\u03af\u03bf \u03b8\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c3\u03b5 \u03bc\u03b5\u03b3\u03ac\u03bb\u03bf \u03b2\u03b1\u03b8\u03bc\u03cc \u03b1\u03cd\u03c4\u03b1\u03c1\u03ba\u03b5\u03c2 \u03c3\u03c4\u03b9\u03c2 \u03ad\u03bd\u03bd\u03bf\u03b9\u03b5\u03c2 \u03c0\u03bf\u03c5 \u03ba\u03b1\u03bb\u03cd\u03c0\u03c4\u03b5\u03b9. \u03a4\u03bf \u03b2\u03b9\u03b2\u03bb\u03af\u03bf \u03c3\u03c4\u03bf\u03c7\u03b5\u03cd\u03b5\u03b9 \u03bd\u03b1 \u03ba\u03b1\u03bb\u03cd\u03c8\u03b5\u03b9 \u03b4\u03cd\u03bf \u03bc\u03b5\u03b3\u03ac\u03bb\u03b1 \u03b6\u03b7\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 \u03c0\u03bf\u03c5 \u03b1\u03c6\u03bf\u03c1\u03bf\u03cd\u03bd \u03c3\u03c4\u03b1 \u03c0\u03b1\u03c1\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03b9\u03ba\u03ac \u03c3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 \u03c5\u03c8\u03b7\u03bb\u03ce\u03bd \u03b5\u03c0\u03b9\u03b4\u03cc\u03c3\u03b5\u03c9\u03bd:(1) \u03a4\u03b7\u03bd \u03b1\u03c1\u03c7\u03b9\u03c4\u03b5\u03ba\u03c4\u03bf\u03bd\u03b9\u03ba\u03ae/\u03bf\u03c1\u03b3\u03ac\u03bd\u03c9\u03c3\u03ae \u03c4\u03bf\u03c5\u03c2. \u039f \u03b1\u03bd\u03b1\u03b3\u03bd\u03ce\u03c3\u03c4\u03b7\u03c2 \u03b8\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c3\u03b5 \u03b8\u03ad\u03c3\u03b7 \u03bd\u03b1 \u03b1\u03bd\u03b1\u03b3\u03bd\u03c9\u03c1\u03af\u03b6\u03b5\u03b9 \u03c4\u03bf\u03bd \u03c4\u03c1\u03cc\u03c0\u03bf \u03bc\u03b5 \u03c4\u03bf\u03bd \u03bf\u03c0\u03bf\u03af\u03bf \u03bb\u03b5\u03b9\u03c4\u03bf\u03c5\u03c1\u03b3\u03b5\u03af \u03ad\u03bd\u03b1 \u03c4\u03ad\u03c4\u03bf\u03b9\u03bf \u03c3\u03cd\u03c3\u03c4\u03b7\u03bc\u03b1, \u03c0\u03ce\u03c2 \u03b4\u03b9\u03b1\u03c3\u03c5\u03bd\u03b4\u03ad\u03bf\u03bd\u03c4\u03b1\u03b9 \u03bf\u03b9 \u03b4\u03bf\u03bc\u03b9\u03ba\u03ad\u03c2 \u03bc\u03bf\u03bd\u03ac\u03b4\u03b5\u03c2 \u03c4\u03bf\u03c5, \u03c0\u03bf\u03b9\u03b1 \u03c0\u03c1\u03bf\u03b2\u03bb\u03ae\u03bc\u03b1\u03c4\u03b1 \u03c0\u03c1\u03ad\u03c0\u03b5\u03b9 \u03bd\u03b1 \u03bb\u03c5\u03b8\u03bf\u03cd\u03bd \u03ba\u03b1\u03c4\u03ac \u03c4\u03b7\u03bd \u03c3\u03c7\u03b5\u03b4\u03af\u03b1\u03c3\u03ae \u03c4\u03bf\u03c5\u03c2 \u03ba\u03b1\u03b8\u03ce\u03c2 \u03ba\u03b1\u03b9 \u03c0\u03bf\u03b9\u03b5\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bf\u03b9 \u03b5\u03bd\u03b1\u03bb\u03bb\u03b1\u03ba\u03c4\u03b9\u03ba\u03ad\u03c2 \u03bb\u03cd\u03c3\u03b5\u03b9\u03c2. \u03a3\u03c4\u03bf \u03c0\u03bb\u03b1\u03af\u03c3\u03b9\u03bf \u03b1\u03c5\u03c4\u03cc, \u03ba\u03b1\u03bb\u03cd\u03c0\u03c4\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c4\u03b1 \u03c3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 \u03c0\u03bf\u03bb\u03c5\u03b5\u03c0\u03b5\u03be\u03b5\u03c1\u03b3\u03b1\u03c3\u03c4\u03ce\u03bd \u03ba\u03bf\u03b9\u03bd\u03cc\u03c7\u03c1\u03b7\u03c3\u03c4\u03b7\u03c2 \u03bc\u03bd\u03ae\u03bc\u03b7\u03c2, \u03c4\u03b1 \u03c0\u03bf\u03bb\u03c5\u03c0\u03cd\u03c1\u03b7\u03bd\u03b1 \u03c3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 (multicores), \u03bf\u03b9 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03b9\u03ba\u03ad\u03c2 \u03c3\u03c5\u03c3\u03c4\u03ac\u03b4\u03b5\u03c2 (clusters) \u03ba\u03b1\u03b8\u03ce\u03c2 \u03ba\u03b1\u03b9 \u03c0\u03bf\u03bb\u03cd \u03c3\u03cd\u03b3\u03c7\u03c1\u03bf\u03bd\u03b5\u03c2 \u03b1\u03c1\u03c7\u03b9\u03c4\u03b5\u03ba\u03c4\u03bf\u03bd\u03b9\u03ba\u03ad\u03c2 \u03cc\u03c0\u03c9\u03c2 \u03b1\u03c5\u03c4\u03ad\u03c2 \u03c4\u03c9\u03bd \u03b5\u03c0\u03b9\u03c4\u03b1\u03c7\u03c5\u03bd\u03c4\u03ce\u03bd (accelerators).(2) \u03a4\u03bf\u03bd \u03c0\u03c1\u03bf\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03b9\u03c3\u03bc\u03cc \u03c4\u03bf\u03c5\u03c2. \u039f \u03b1\u03bd\u03b1\u03b3\u03bd\u03ce\u03c3\u03c4\u03b7\u03c2 \u03b8\u03b1 \u03b3\u03bd\u03c9\u03c1\u03af\u03c3\u03b5\u03b9 \u03ba\u03b1\u03b9 \u03b8\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03c3\u03b5\u03b9 \u03c4\u03b1 \u03b4\u03b7\u03bc\u03bf\u03c6\u03b9\u03bb\u03ad\u03c3\u03c4\u03b5\u03c1\u03b1 \u03bc\u03bf\u03bd\u03c4\u03ad\u03bb\u03b1/\u03b3\u03bb\u03ce\u03c3\u03c3\u03b5\u03c2 \u03b3\u03b9\u03b1 \u03c4\u03bf\u03bd \u03c0\u03c1\u03bf\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03b9\u03c3\u03bc\u03cc \u03c4\u03c9\u03bd \u03c0\u03b1\u03c1\u03ac\u03bb\u03bb\u03b7\u03bb\u03c9\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ce\u03bd. \u039a\u03b1\u03bb\u03cd\u03c0\u03c4\u03bf\u03bd\u03c4\u03b1\u03b9 \u03cc\u03bb\u03b1 \u03c4\u03b1 \u03b5\u03c5\u03c1\u03ad\u03c9\u03c2 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03bf\u03cd\u03bc\u03b5\u03bd\u03b1 \u03bc\u03bf\u03bd\u03c4\u03b5\u03bb\u03b1, \u03cc\u03c0\u03c9\u03c2 \u03c4\u03b1 \u03bd\u03ae\u03bc\u03b1\u03c4\u03b1 POSIX \u03ba\u03b1\u03b9 \u03c4\u03bf \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:lSLTfruPkqcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "HOMPI: A hybrid programming framework for expressing and deploying task-based parallelism",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-23397-5_3",
            "Abstract": "This paper presents hompi, a framework for programming and executing task-based parallel applications on clusters of multiprocessors and multi-cores, while providing interoperability with existing programming systems such as mpi and OpenMP. hompi facilitates expressing irregular and adaptive master-worker and divide-and-conquer applications avoiding explicit mpi calls. It also allows hybrid sharedmemory / message-passing programming, exploiting fully the availability of multiprocessor and multi-core nodes, as it integrates by design with OpenMP; the runtime infrastructure presents a unified substrate that handles local threads and remote tasks seamlessly, allowing both programming flexibility and increased performance opportunities.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:QIV2ME_5wuYC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "On probabilistic flooding search over unstructured peer-to-peer networks",
            "Publication year": 2015,
            "Publication url": "https://link.springer.com/article/10.1007/s12083-014-0267-1",
            "Abstract": "Probabilistic flooding has been proposed as a means of reducing the excessive message overheads induced by plain flooding in unstructured peer-to-peer network search. We propose here Advanced Probabilistic Flooding (APF), a novel strategy which operates differently from other known strategies. In particular, the decision of a node to propagate a message (or not) is based on both the popularity of resources and the hop distance from the node that initiated the query. The latter is used to estimate the number of nodes reached by the query message. Based on these parameters we adjust the forwarding probability at the time a node receives the query message so as to reduce the duplicate message overhead while maintaining a high probability of query success. The primary goal of our approach is to minimize the cost of search associated with excessive message transmissions. Our claims are \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:M3NEmzRMIkIC",
            "Publisher": "Springer US"
        },
        {
            "Title": "Supporting adaptive and irregular parallelism for non-linear numerical optimization",
            "Publication year": 2014,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0096300313013829",
            "Abstract": "This paper presents an infrastructure for high performance numerical optimization on clusters of multicore systems. Building on a runtime system which implements a programming and execution environment for irregular and adaptive task-based parallelism, we extract and exploit the parallelism of a Multistart optimization strategy at multiple levels, which include second order derivative calculations for Newton-based local optimization. The runtime system can support a dynamically changing hierarchical execution graph, without any assumptions on the levels of parallelization. This enables the optimization practitioners to implement, transparently, even more complicated schemes. We discuss parallelization details and task distribution schemes for managing nested and dynamic parallelism. In addition, we apply our framework to a real-world application case that concerns the protein conformation problem. Finally \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:maZDTaKrznsC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Exploiting fine-grain thread parallelism on multicore architectures",
            "Publication year": 2009,
            "Publication url": "https://content.iospress.com/articles/scientific-programming/spr291",
            "Abstract": "In this work we present a runtime threading system which provides an efficient substrate for fine-grain parallelism, suitable for deployment in multicore platforms. Its architecture encompasses a number of optimizations that make it particularly effective in managing a large number of threads and with low overheads. The runtime system has been integrated into an OpenMP implementation to allow for transparent usage under a high level programming paradigm. We evaluate our implementation on two multicore systems using synthetic microbenchmarks and a real-time face detection application.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:mVmsd5A6BfQC",
            "Publisher": "IOS Press"
        },
        {
            "Title": "On single-port multinode broadcasting",
            "Publication year": 2001,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/953526/",
            "Abstract": "The advent of distributed-memory multiprocessors has spawned an increasing amount of research in information dissemination problems. Given a network of processors (or nodes) where some of them own pieces of information, the problem is to spread the information to a group of recipients using the links of the network. The term 'collective communications' has been coined to signify the fact that such problems involve more than two nodes. Multinode broadcasting, an important collective communication problem, involves simultaneous broadcastings from all the nodes in a network. We present algorithms for the minimum-time solution of the problem in packet-switched networks that follow the single-port model. In particular, we construct a general algorithm for the solution of the problem in arbitrary multidimensional networks and provide conditions that ensure its optimality.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:mB3voiENLucC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Compiler-Assisted OpenMP Runtime Organization for Embedded Multicores",
            "Publication year": 2016,
            "Publication url": "https://www.cs.uoi.gr/wp-content/uploads/publications/TR-2016-1.pdf",
            "Abstract": "The recently introduced OpenMP device constructs open a whole new world for application writers, enabling them to easily utilize the host cpus along with other attached computational resources, in an intuitive and productive manner. At the same time, multicore architectures have conquered the whole computing spectrum. General-purpose and embedded system alike integrate multicore cpus and multicore co-processors or accelerators. The new OpenMP target-related directives offload portions of the program code (kernels) to any of the available devices; the kernels themselves can take advantage of the multiplicity of processing elements within the target device by employing OpenMP constructs. However, most co-processors or accelerators, especially embedded ones, have limited resources. This severely constrains the extend of OpenMP support that can be implemented within a device. A usual design decision is to only support OpenMP partially, in effect hindering the full exploitation of the device capabilities through a high-level programming model. In this work, we present a novel solution to this problem. We propose a compiler-assisted, adaptive runtime system organization, which generates applicationspecific support by implementing only the OpenMP functionality required each time. In particular, based on extensive compiler analysis, the offloaded kernels can be accompanied by a runtime library tailored to the needs of the given application. Full OpenMP support is thus available, if needed. However, in the usual scenario where kernels do not require complex OpenMP functionalities, our method can lead to dramatically reduced \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:ns9cj8rnVeAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A runtime library for platform-independent task parallelism",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6169554/",
            "Abstract": "With the increasing diversity of computing systems and the rapid performance improvement of commodity hardware, heterogeneous clusters become the dominant platform for low-cost, high-performance computing. Grid-enabled and heterogeneous implementations of MPI establish it as the de facto programming model for these environments. On the other hand, task parallelism provides a natural way for exploiting their hierarchical architecture. This hierarchy has been further extended with the advent of general-purpose GPU devices. In this paper we present the implementation of an MPI-based task library for heterogeneous and GPU clusters. The library offers an intuitive programming interface for multilevel task parallelism with transparent data management and load balancing. We discuss design and implementation issues regarding heterogeneity support and report performance results on heterogeneous \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:TQgYirikUcIC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Creating and maintaining replicas in unstructured peer-to-peer systems",
            "Publication year": 2006,
            "Publication url": "https://link.springer.com/chapter/10.1007/11823285_107",
            "Abstract": "In peer-to-peer systems, replication is an important issue as it improves search performance and data availability. It has been shown that optimal replication is attained when the number of replicas per item is proportional to the square root of their popularity. In this paper, we focus on updates in the case of optimal replication. In particular, we propose a new practical strategy for achieving square root replication called pull-then-push replication (PtP). With PtP, after a successful search, the requesting node enters a replicate-push phase where it transmits copies of the item to its neighbors. We show that updating the replicas can be significantly improved through an update-push phase where the node that created the copies propagates any updates it has received using similar parameters as in replicate-push. Our experimental results show that replicate-push coupled with an update-push strategy achieves \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:9yKSN-GCB0IC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "All-port total exchange in cartesian product networks",
            "Publication year": 2004,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0743731504000875",
            "Abstract": "We present a general solution to the total exchange (TE) communication problem for any homogeneous multidimensional network under the all-port assumption. More specifically, we consider cartesian product networks where every dimension is the same graph (e.g. hypercubes, square meshes, n-ary d-cubes) and where each node is able to communicate simultaneously with all its neighbors. We show that if we are given an algorithm for a single n-node dimension which requires T steps, we can construct an algorithm for d-dimensions and running time of nd\u22121T steps, which is provably optimal for many popular topologies. Our scheme, in effect, generalizes the TE algorithm given by Bertsekas et al. (J. Parallel Distrib. Comput. 11 (1991) 263\u2013275) for the hypercubes and complements our theory (IEEE Trans. Parallel Distrib. Systems 9(7) (1998) 639) for the single-port model.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:aqlVkmm33-oC",
            "Publisher": "Academic Press"
        },
        {
            "Title": "CoDeL: A rapid prototyping environment for the specification and automatic synthesis of controllers for multiprocessor interconnection networks",
            "Publication year": 2003,
            "Publication url": "https://scholar.google.com/scholar?cluster=5435466924077854350&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:UeHWp8X0CEIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A peer-to-peer approach to resource discovery in multi-agent systems",
            "Publication year": 2003,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-45217-1_5",
            "Abstract": "A multi-agent system is a network of software agents that cooperate to solve problems. In open multi-agent systems, the agents that need resources provided by other agents are not aware of which agents provide the particular resources. We propose a fully distributed approach to this resource discovery problem. Each agent A maintains a limited size local cache in which it keeps information about k different resources, that is, for each of the k resources, it stores the contact information of one agent that provides it. The agents in the cache of agent A are called A\u2019s neighbors. An agent searching for a resource contacts its local cache and if there is no information for the resource, it contacts its neighbors, which in turn contact their neighbors and so on until the resource is found in some cache. We consider variations of this flooding-based search and develop and verify by simulation analytical models of their \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:IjCSPb-OGe4C",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Replication routing indexes for xml documents",
            "Publication year": 2007,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.101.7639&rep=rep1&type=pdf",
            "Abstract": "Peer-to-peer systems have attracted considerable attention as a means of sharing content among large and dynamic communities of nodes. In this paper, we consider sharing of XML documents. We propose a simple yet efficient replication method that is based on replication routing indexes. A replication routing index for a node is a path-based XML index that summarizes access information for each of the links of the node. The replication routing indexes are used for determining both the granularity of the XML fragments to be replicated as well as the appropriate sites for placing the fragments. We also present experimental results of the deployment of our indexes in a dynamic unstructured peer-to-peer system.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:kNdYIx-mwKoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The ompi openmp/c compiler",
            "Publication year": 2005,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.102.8762&rep=rep1&type=pdf",
            "Abstract": "We have designed and implemented OMPi, a portable compiler for OpenMP/C. This paper presents an overview of our compiler and its supporting libraries. OMPi is a C-to-C translator that takes C code with OpenMP directives and produces equivalent multithreaded C code ready for execution on a multiprocessor. Our compiler is the only publicly available one that adheres to version 2.0 of the standard. OpenMP uses POSIX threads for portability, but its architecture allows targeting other thread libraries, as well. It includes platform-specific optimizations and a full POMP library implementation for instrumentation and performance monitoring.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:hqOjcs7Dif8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "The SMart autonomous storage (SmAS) system",
            "Publication year": 2001,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/953583/",
            "Abstract": "The increasing demand for storage capacity and throughput has generated a need for storage architectures that scale their processing power with the growing size of datasets. In this paper, we give an overview of the SmAS system that employs network attached disks with processing capabilities. In the SmAS system, users can deploy and execute code at the disk. At-the-disk executed application code is written in a stream-based language that enforces code security and bounds the code's memory requirements. The SmAS disk's system software provides basic support for process scheduling and memory management. We present an initial implementation of the system and report performance results that validate our approach.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:Se3iqnhoufwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Task-parallel global optimization with application to protein folding",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5999823/",
            "Abstract": "This paper presents a software framework for high performance numerical global optimization. At the core, a run time library implements a programming environment for irregular and adaptive task-based parallelism. Building on this, we extract and exploit the multilevel parallelism of a global optimization application that is based on numerical differentiation and Newton-based local optimizations. Our framework is used in the efficient parallelization of a real application case that concerns the protein folding problem. The experimental evaluation presents performance results of our software system on a multicore cluster.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:ULOm3_A8WrAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Parallel programming models",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-1-4614-8800-2_1",
            "Abstract": "The parallel programming landscape is constantly changing and becoming enriched with new languages, tools and techniques. In this chapter we give a survey on the different parallel programming models available today. These models are suitable for general-purpose computing but are also suitable for programming specialized (e.g. embedded) systems that offer the required facilities. We start by categorizing the available models according to the memory abstraction they discuss to the programmer and then present the representative styles and languages in each category. We cover shared-memory models, distributed-memory models, models for devices with private memory spaces such as gpus and accelerators, as well as models that combine the aforementioned ones in some manner. We conclude with a look towards some other models that do not fall directly in the above categories, which however \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:k_IJM867U9cC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Openmp 4.0 device support in the ompi compiler",
            "Publication year": 2015,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-24595-9_15",
            "Abstract": "OpenMP 4.0 represents a major upgrade in the language specifications of the standard. Important constructs for the exploitation of simd parallelism, the support for dependencies among tasks and the ability to cancel the operations of a team of threads have been added. What is arguably the most important addition, however, is the introduction of the device model. A variety of computational units, such as gpus, dsps and general or special purpose accelerators are viewed as attached devices, where portion of a unified application code can be offloaded for execution. In this work we present the infrastructure for device support in the ompi research compiler, one of the few compilers that currently implement the new device directives. We discuss the necessary compiler transformations and the general runtime organization. For the first time, special emphasis is placed on the important problem of data \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:hMod-77fHWUC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Speeding up OpenMP tasking",
            "Publication year": 2012,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-32820-6_64",
            "Abstract": "In this work we present a highly efficient implementation of OpenMP tasks. It is based on a runtime infrastructure architected for data locality, a crucial prerequisite for exploiting the NUMA nature of modern multicore multiprocessors. In addition, we employ fast work-stealing structures, based on a novel, efficient and fair blocking algorithm. Synthetic benchmarks show up to a 6-fold increase in throughput (tasks completed per second), while for a task-based OpenMP application suite we measured up to 87% reduction in execution times, as compared to other OpenMP implementations.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:RHpTSmoSYBkC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Modeling and simulation tools for fog computing\u2014a comprehensive survey from a cost perspective",
            "Publication year": 2020,
            "Publication url": "https://www.mdpi.com/717928",
            "Abstract": "Fog computing is an emerging and evolving technology, which bridges the cloud with the network edges, allowing computing to work in a decentralized manner. As such, it introduces a number of complex issues to the research community and the industry alike. Both of them have to deal with many open challenges including architecture standardization, resource management and placement, service management, Quality of Service (QoS), communication, participation, to name a few. In this work, we provide a comprehensive literature review along two axes\u2014modeling with an emphasis in the proposed fog computing architectures and simulation which investigates the simulation tools which can be used to develop and evaluate novel fog-related ideas. View Full-Text",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:ldfaerwXgEUC",
            "Publisher": "Multidisciplinary Digital Publishing Institute"
        },
        {
            "Title": "Design and implementation of openmp tasks in the ompi compiler",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6065099/",
            "Abstract": "In this paper we present the design and implementation of tasks in the context of the OMPI OpenMP compiler. The modular architecture of OMPI's runtime system allows a wide range of choices for experimenting with OpenMP structures. We present two fully-fledged implementations of tasks: one based on POSIX threads, with the addition of a tasking layer, and another one based on an almost unmodified user-level threading library. Both allow the tuning of their scheduling parameters so as to optimize memory consumption and execution times, resulting in highly competitive performance.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:hFOr9nPyWt4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "A runtime system architecture for ubiquitous support of OpenMP",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4724246/",
            "Abstract": "In this work we present the runtime architecture of the OMPi OpenMP compiler. OMPi is a source-to-source C translator featuring a portable, modular and extensible runtime system. It allows for OpenMP threads to map to different execution entities which range from kernel/user-level threads to processes, providing transparent support of OpenMP applications on both SMP machines and clusters of SMPs. When operating within an SMP machine, arbitrary threading libraries can be employed; currently a multitude of such libraries is available, including one which is based on portable user-level threading, for high-performance nested parallelism support. When operating on a cluster, processes are used as the execution entities and different software DSM cores can be utilized under a unified interface; the runtime system uses a hybrid approach whereby its internal bookkeeping is done through explicit message \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:UebtZRa9Y70C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Data replication in p2p systems",
            "Publication year": 2010,
            "Publication url": "https://www.igi-global.com/chapter/data-replication-p2p-systems/40819",
            "Abstract": "Maintaining multiple copies of data items is a commonly used mechanism for improving the performance and fault-tolerance of any distributed system. By placing copies of data items closer to their requesters, the response time of queries can be improved. An additional reason for replication is load balancing. For instance, by allocating many copies to popular data items, the query load can be evenly distributed among the servers that hold these copies. Similarly, by eliminating hotspots, replication can lead to a better distribution of the communication load over the network links. Besides performance-related reasons, replication improves system availability, since the larger the number of copies of an item, the more site failures can be tolerated. In this chapter we survey replication methods applicable to p2p systems. Although there exist some general techniques, methodologies are distinguished according to the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:qxL8FJ1GzNcC",
            "Publisher": "IGI Global"
        },
        {
            "Title": "Deploying OpenMP on an embedded multicore accelerator",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6621121/",
            "Abstract": "Multiprocessor systems-on-chip (MPSoC) are now considered first-class citizens both in the embedded systems and in the high-performance computing arenas, in the form of specialized or general-purpose accelerators. Programming models for such systems is currently a hot research topic, and as a general rule require deep programmer knowledge of the underlying hardware architecture. In this paper we present the implementation of OpenMP, one of the most intuitive and productive programming models, on the STHORM accelerator. This particular platform provides a shared-memory substrate which OpenMP requires. An innovative feature of our design is the deployment of the OpenMP model both at the host and the fabric sides, in a seamless way, which provides the programmer with a simple but effective interface for offloading and executing OpenMP kernels on the MPSoC. The optimized runtime \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:bEWYMUwI8FkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A General-Purpose Mapper Module for Adaptive OpenMP Runtime Support",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8908491/",
            "Abstract": "The latest versions of the OpenMP specifications have introduced constructs that enable programmers to utilize heterogeneous compute units alongside the main multicore cpu. They allow offloading specific regions of the program code to any of the available computational devices; the offloaded code may itself generate parallelism by employing suitable OpenMP constructs. While the concept seems ideal, co-processors and accelerators, especially embedded ones, often have limited resources or capabilities to provide efficient OpenMP support. Designing an OpenMP infrastructure for such devices can be a real challenge. A very effective solution has been proposed in the form of compiler-assisted, adaptive runtime support that is tailored to each specific application. In this work, we present a general-purpose mapper module, which has the ability to select the best runtime configuration given a) a set of metrics that \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:2P1L_qKh6hAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "High-performance numerical optimization on multicore clusters",
            "Publication year": 2011,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-23397-5_35",
            "Abstract": "This paper presents a software infrastructure for high performance numerical optimization on clusters of multicore systems. At the core, a runtime system implements a programming and execution environment for irregular and adaptive task-based parallelism. Building on this, we extract and exploit the parallelism of a global optimization application at multiple levels, which include Hessian calculations and Newton-based local optimizations. We discuss parallel implementations details and task distribution schemes for managing nested parallelism. Finally, we report experimental performance results for all the components of our software system on a multicore cluster.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:3fE2CSJIrl8C",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Nested parallelism in the ompi openmp/c compiler",
            "Publication year": 2007,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-74466-5_70",
            "Abstract": "This paper presents a new version of the OMPi OpenMP C compiler, enhanced by lightweight runtime support based on user-level multithreading. A large number of threads can be spawned for a parallel region and multiple levels of parallelism are supported efficiently, without introducing additional overheads to the OpenMP library. Management of nested parallelism is based on an adaptive distribution scheme with hierarchical work stealing that not only favors computation and data locality but also maps directly to recent architectural developments in shared memory multiprocessors. A comparative performance evaluation of several OpenMP implementations demonstrates the efficiency of our approach.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:Tyk-4Ss8FVUC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "A microbenchmark study of OpenMP overheads under nested parallelism",
            "Publication year": 2008,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-79561-2_1",
            "Abstract": "In this work we present a microbenchmark methodology for assessing the overheads associated with nested parallelism in OpenMP. Our techniques are based on extensions to the well known EPCC microbenchmark suite that allow measuring the overheads of OpenMP constructs when they are effected in inner levels of parallelism. The methodology is simple but powerful enough and has enabled us to gain interesting insight into problems related to implementing and supporting nested parallelism. We measure and compare a number of commercial and freeware compilation systems. Our general conclusion is that while nested parallelism is fortunately supported by many current implementations, the performance of this support is rather problematic. There seem to exist issues which have not yet been addressed effectively, as most OpenMP systems do not exhibit a graceful reaction when made to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:_FxGoFyzp5QC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "A portable C compiler for OpenMP V. 2.0",
            "Publication year": 2003,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.477.4403&rep=rep1&type=pdf",
            "Abstract": "This paper presents an overview of OMPi, a portable implementation of the OpenMP API for C, adhering to the recently released version 2.0 of the standard. OMPi is a C-to-C translator which takes C code with OpenMP directives and produces equivalent C code which uses POSIX threads, similarly to other publicly available implementations. However, in contrast to the latter, OMPi is written entirely in C and, more importantly, implements fully version 2.0 of the OpenMP C API. We present major aspects of the implementation, along with performance results.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:u5HHmVD_uO8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "TORC: a tasking library for multicore clusters",
            "Publication year": 2011,
            "Publication url": "https://scholar.google.com/scholar?cluster=13108741168032968889&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:HDshCWvjkbEC",
            "Publisher": "Technical Report TR-2011-6, Dept. of Computer Science, University of Ioannina, Greece"
        },
        {
            "Title": "On the performance of flooding-based resource discovery",
            "Publication year": 2006,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1705462/",
            "Abstract": "We consider flooding-based resource discovery in distributed systems. With flooding, a node searching for a resource contacts its neighbors in the network, which in turn contact their own neighbors and so on until a node possessing the requested resource is located. Flooding assumes no knowledge about the network topology or the resource distribution thus offering an attractive means for resource discovery in dynamically evolving networks such as peer-to-peer systems. We provide analytical results for the performance of a number of flooding-based approaches that differ in the set of neighbors contacted at each step. The performance metrics we are interested in are the probability of locating a resource and the average number of steps and messages for doing so. We study both uniformly random resource requests and requests in the presence of popular (hot) resources. Our analysis is also extended to take \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:d1gkVwhDpl0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Support and Efficiency of Nested Parallelism in OpenMP Implementations",
            "Publication year": 2008,
            "Publication url": "https://paragroup.cs.uoi.gr/publications/files/147cpc_chap2008.pdf",
            "Abstract": "Nested parallelism has been a major feature of OpenMP since its very beginnings. As a programming style, it provides an elegant solution for a wide class of parallel applications, with the potential to achieve substantial utilization of the available computational resources, in situations where outer-loop parallelism simply can not. Notwithstanding its significance, nested parallelism support was slow to find its way into OpenMP implementations, commercial and research ones alike. Even nowadays, the level of support is varying greatly among compilers and runtime systems. In this work, we take a closer look at OpenMP implementations with respect to their level of support for nested parallelism. We classify them into three broad categories: those that provide full support, those that provide partial support and those that provide no support at all. The systems surveyed include commercial and research ones. Additionally, we proceed to quantify the efficiency of the implementation. With a representative set of compilers that provide adequate support, we perform a comparative performance evaluation. We evaluate both the incurred overheads and their overall behavior, using microbenchmarks and a full-fledged application. The results are interesting because they show that full support of nested parallelism does not necessarily guarantee scalable performance. Among our findings is the fact that most compilers do not seem to handle nested parallelism in a predictable and stable way as the number of threads increases beyond the system\u2019s processor count.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:hC7cP41nSMkC",
            "Publisher": "Nova Publishers"
        },
        {
            "Title": "On the Hamiltonicity of the Cartesian product",
            "Publication year": 2005,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S002001900500150X",
            "Abstract": "We examine the hamiltonicity of the cartesian product P= G 1\u00d7 G 2 of two graphs G 1, G 2. We provide necessary and/or sufficient conditions for P to be hamiltonian, depending on the hamiltonian properties of G 1 and G 2, with corresponding constructions. We also prove a conjecture by Batagelj and Pisanski related to the \u2018cyclic hamiltonicity\u2019of a graph.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:eQOLeE2rZwMC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Image Processing: Object Recognition",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-1-4614-8800-2_8",
            "Abstract": "HMAX is a powerful computational model of object recognition introduced by Riesenhuber and Poggio (Nat Neurosci (2):1019\u20131025, 1999) which attempts to follow the rapid object recognition as performed by the human brain. Hierarchical approaches to generic object recognition have become increasingly popular over the years. As advocated by Serre et al. (Proceedings of CVPR, IEEE Computer Society, San Diego, pp. 994\u20131000, 2005) and Mutch and Lowe (Int J Comput Vision 80(1):45\u201357, 2008), hierarchical approaches have been shown to consistently outperform flat single-template (holistic) object recognition systems on a variety of object recognition task. Recognition typically involves the computation of a set of target features at one step, and their combination in the next step. A combination of target features at one step is called a layer, and can be modeled by a 3D array of units which collectively \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:isC4tDSrTZIC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "A high\u2010performance face detection system using OpenMP",
            "Publication year": 2009,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.1389",
            "Abstract": "We present the development of a novel high\u2010performance face detection system using a neural network\u2010based classification algorithm and an efficient parallelization with OpenMP. We discuss the design of the system in detail along with experimental assessment. Our parallelization strategy starts with one level of threads and moves to the exploitation of nested parallel regions in order to further improve, by up to 19%, the image\u2010processing capability. The presented system is able to process images in real time (38 images/sec) by sustaining almost linear speedups on a system with a quad\u2010core processor and a particular OpenMP runtime library. Copyright \u00a9 2009 John Wiley & Sons, Ltd.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:YOwf2qJgpHMC",
            "Publisher": "John Wiley & Sons, Ltd."
        },
        {
            "Title": "Optimal total exchange in Cayley graphs",
            "Publication year": 2001,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/969126/",
            "Abstract": "Consider an interconnection network and the following situation: Every node needs to send a different message to every other node. This is the total exchange or all-to-all personalized communication problem, one of a number of information dissemination problems known as collective communications. Under the assumption that a node can send and receive only one message at each step (single-port model), it is seen that the minimum time required to solve the problem is governed by the status (or total distance) of the nodes in the network. We present a time-optimal solution for any Cayley network. Rings, hypercubes, cube-connected cycles, and butterflies are some well-known Cayley networks which can take advantage of our method. The solution is based on a class of algorithms which we call node-invariant algorithms and which behave uniformly across the network.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:YsMSGLbcyi4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Performance analysis of distributed search in open agent systems",
            "Publication year": 2003,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1213097/",
            "Abstract": "In open multi-agent systems agents need resources provided by other agents but they are not aware of which agents provide the particular resources. Most solutions to this problem are based on a central directory that maintains a mapping between agents and resources. However, such solutions do not scale well since the central directory becomes a bottleneck in terms of both performance and reliability. In this paper, we introduce a different approach: each agent maintains a limited size local cache in which it keeps information about k different resources, that is, for each of k resources, it stores the contact information of one agent that provides it. This creates a directed network of caches. We address the following fundamental problem: how can an agent that needs a particular resource find an agent that provides it by navigating through this network of caches? We propose and analytically compare the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:2osOgNQ5qMEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "On deploying and executing data-intensive code on smart autonomous storage (SmAS) disks",
            "Publication year": 2000,
            "Publication url": "https://link.springer.com/chapter/10.1007/3-540-44472-6_26",
            "Abstract": "There is an increasing demand for storage capacity and storage throughput, driven largely by new data types such as video data and satellite images as well as by the growing use of the Internet and the web that generate and transmit rapidly evolving datasets. Thus, there is a need for storage architectures that scale the processing power with the growing size of the datasets. In this paper, we present the SMAS system that employs network attached disks with processing capabilities. In the SMAS system, users can deploy and execute code at the disk. Application code is written in a stream-based language that enforces code security and bounds the code\u015b memory requirements. The SMAS operating system at the disk provides basic support for process scheduling and memory management. We present an initial implementation of the system and report performance results that validate our approach for data \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:8k81kl-MbHgC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "A novel probabilistic flooding strategy for unstructured peer-to-peer networks",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6065042/",
            "Abstract": "In this work we propose a novel probabilistic flooding strategy for unstructured p2p networks. Our strategy takes into account the popularity of resources and the hop distance from the node that initiated the query. The latter is used to estimate the number of nodes reached by the query message. Based on the above parameters we adjust the forwarding probability at the time a node receives the query message so as to reduce the duplicate message overhead while maintaining a high probability of query success. The primary goal of our approach is to minimize the cost of search associated with excessive message transmissions. The experimental results support our claims and provide insights into the effect of the above parameters to search performance.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:Wp0gIr-vW9MC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Adaptive openmp runtime system for embedded multicores",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8588866/",
            "Abstract": "The recent OpenMP device constructs enable application writers to utilize the host CPUs along with other attached computational resources, in an intuitive and productive manner. These target-related directives offload portions of the program code (kernels) to any of the available computational devices; the kernels themselves can take advantage of the multiplicity of processing elements within the target device by employing OpenMP constructs. However, most co-processors or accelerators, especially embedded ones, have limited resources. This severely constrains the extend of OpenMP support that can be implemented within a device. A usual design decision is to support OpenMP partially, in effect hindering the full exploitation of the device capabilities through a high-level programming model. In this work, we present a novel solution to this problem for embedded multicores. We propose a compiler-assisted \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:RYcK_YlVTxYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "All-port Total Exchange in Cartesian",
            "Publication year": 2002,
            "Publication url": "https://www.cs.uoi.gr/wp-content/uploads/publications/TR-2002-28.pdf",
            "Abstract": "We present a general solution to the total exchange communication problem for any homogeneous multidimensional network under the all-port assumption. More specifically, we consider cartesian product networks where every dimension is the same graph (eg hypercubes, square meshes, n-ary d-cubes) and where each node is able to communicate simultaneously with all its neighbors. We show that if we are given an algorithm for a single nnode dimension which requires T steps, we can construct an algorithm for d-dimensions and running time of n\u00ba\" Tsteps, which is provably optimal for many popular topologies. Our scheme, in effect, generalizes the total exchange algorithm given by Bertsekas et al [1] for the hypercubes and complements our theory (6) for the single-port model.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:RGFaLdJalmkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A study on the redundancy of flooding in unstructured p2p networks",
            "Publication year": 2013,
            "Publication url": "https://www.tandfonline.com/doi/abs/10.1080/17445760.2012.724067",
            "Abstract": "In this study we consider flooding, a fundamental mechanism for network discovery and query routing, in unstructured peer-to-peer networks. Flooding has well-known properties such as fast responses and quick network coverage but at the same time it suffers from high overheads due to unnecessarily generated traffic (duplicate messages). Although there has been a significant amount of research on strategies that try to moderate this drawback, there has been no work that aims at quantifying it. This is the subject of this paper; we analyse the behaviour of flooding related to duplicate messages and provide simple bounds and approximate models to assess the associated overheads.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:j3f4tGmQtD8C",
            "Publisher": "Taylor & Francis Group"
        },
        {
            "Title": "Cache updates in a peer-to-peer network of mobile agents",
            "Publication year": 2004,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1334926/",
            "Abstract": "In open multi-agent systems, agents need resources provided by other agents but they are not aware of which agents provide particular resources. We consider a peer-to-peer approach, in which each agent maintains a local cache with information about k resources, that is for each of the k resources, an agent that provides it. However, when an agent or a resource moves, cache entries become obsolete. We propose a suite of cache update policies that combine pull-based invalidation that is initiated by the agent that maintains the cache with push-based invalidation that is initiated by the agent that moves. We study and compare variations of oblivious flooding-based push/pull along with an informed push approach where each agent maintains a list of the agents that have it cached. Our experimental results indicate that a novel variation of flooding for push where a moving agent propagates its new location to \u2026",
            "Abstract entirety": 0,
            "Author pub id": "JIGQWuAAAAAJ:qjMakFHDy7sC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Task-based execution of nested openmp loops",
            "Publication year": 2012,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-30961-8_16",
            "Abstract": "In this work we propose a novel technique to reduce the overheads related to nested parallel loops in OpenMP programs. In particular we show that in many cases it is possible to replace the code of a nested parallel-for loop with equivalent code that creates tasks instead of threads, thereby limiting parallelism levels while allowing more opportunities for runtime load balancing. In addition we present the details of an implementation of this technique that is able to perform the whole procedure completely transparently. We have experimented extensively to determine the effectiveness of our methods. The results show the actual performance gains we obtain (up to 25% in a particular application) as compared to other OpenMP implementations that are forced to suffer nested parallelism overheads.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:e5wmG9Sq2KIC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "\u0395\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae: \u03a0\u03b1\u03c1\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03a3\u03c5\u03c3\u03c4\u03ae\u03bc\u03b1\u03c4\u03b1 \u03ba\u03b1\u03b9 \u03a0\u03c1\u03bf\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03b9\u03c3\u03bc\u03cc\u03c2",
            "Publication year": 2015,
            "Publication url": "https://repository.kallipos.gr/handle/11419/3210",
            "Abstract": "\u03a3\u03c4\u03bf \u03ba\u03b5\u03c6\u03ac\u03bb\u03b1\u03b9\u03bf \u03b1\u03c5\u03c4\u03cc \u03b3\u03af\u03bd\u03b5\u03c4\u03b1\u03b9 \u03bc\u03af\u03b1 \u03c3\u03cd\u03bd\u03c4\u03bf\u03bc\u03b7 \u03b5\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03c3\u03c4\u03b7\u03bd \u03b9\u03c3\u03c4\u03bf\u03c1\u03af\u03b1 \u03ba\u03b1\u03b9 \u03c4\u03b9\u03c2 \u03b5\u03c0\u03b9\u03b4\u03cc\u03c3\u03b5\u03b9\u03c2 \u03c4\u03c9\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03b9\u03ba\u03ce\u03bd \u03c3\u03c5\u03c3\u03c4\u03b7\u03bc\u03ac\u03c4\u03c9\u03bd, \u03b5\u03be\u03b5\u03c4\u03ac\u03b6\u03b5\u03c4\u03b1\u03b9 \u03b7 \u03b5\u03be\u03ad\u03bb\u03b9\u03be\u03b7 \u03ba\u03b1\u03b9 \u03bf\u03b9 \u03b5\u03c6\u03b1\u03c1\u03bc\u03bf\u03b3\u03ad\u03c2 \u03c4\u03c9\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ce\u03bd \u03c5\u03c8\u03b7\u03bb\u03ce\u03bd \u03b5\u03c0\u03b9\u03b4\u03cc\u03c3\u03b5\u03c9\u03bd. \u0391\u03bd\u03b1\u03bb\u03cd\u03b5\u03c4\u03b1\u03b9 \u03b5\u03c0\u03af\u03c3\u03b7\u03c2 \u03b7 \u03c0\u03bf\u03c1\u03b5\u03af\u03b1 \u03c4\u03b7\u03c2 \u03b2\u03b9\u03bf\u03bc\u03b7\u03c7\u03b1\u03bd\u03af\u03b1\u03c2 \u03b5\u03c0\u03b5\u03be\u03b5\u03c1\u03b3\u03b1\u03c3\u03c4\u03ce\u03bd \u03ba\u03b1\u03b9 \u03bf\u03b9 \u03bb\u03cc\u03b3\u03bf\u03b9 \u03c0\u03bf\u03c5 \u03bf\u03b4\u03ae\u03b3\u03b7\u03c3\u03b1\u03bd \u03c3\u03c4\u03b7\u03bd \u03b5\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03ba\u03b1\u03b9 \u03c0\u03bb\u03ad\u03bf\u03bd \u03c3\u03c4\u03b7\u03bd \u03bf\u03bb\u03bf\u03ba\u03bb\u03b7\u03c1\u03c9\u03c4\u03b9\u03ba\u03ae \u03ba\u03b1\u03b8\u03b9\u03ad\u03c1\u03c9\u03c3\u03b7 \u03c4\u03c9\u03bd \u03c0\u03bf\u03bb\u03c5\u03c0\u03cd\u03c1\u03b7\u03bd\u03c9\u03bd \u03c3\u03c5\u03c3\u03c4\u03b7\u03bc\u03ac\u03c4\u03c9\u03bd, \u03b5\u03bd\u03ce \u03c1\u03af\u03c7\u03bd\u03b5\u03c4\u03b1\u03b9 \u03ba\u03b1\u03b9 \u03bc\u03af\u03b1 \u03bc\u03b1\u03c4\u03b9\u03ac \u03c3\u03c4\u03bf \u03bc\u03ad\u03bb\u03bb\u03bf\u03bd. \u0393\u03af\u03bd\u03b5\u03c4\u03b1\u03b9, \u03c4\u03ad\u03bb\u03bf\u03c2, \u03bc\u03af\u03b1 \u03b5\u03b9\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae \u03c3\u03c4\u03bf\u03c5\u03c2 \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03b5\u03c4\u03b9\u03ba\u03bf\u03cd\u03c2 \u03c4\u03cd\u03c0\u03bf\u03c5\u03c2 \u03c0\u03b1\u03c1\u03ac\u03bb\u03bb\u03b7\u03bb\u03c9\u03bd \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03b9\u03c3\u03c4\u03ce\u03bd \u03ba\u03b1\u03b9 \u03c4\u03bf\u03bd \u03c4\u03c1\u03cc\u03c0\u03bf \u03c0\u03bf\u03c5 \u03b1\u03c5\u03c4\u03bf\u03af \u03bc\u03c0\u03bf\u03c1\u03bf\u03cd\u03bd \u03bd\u03b1 \u03c0\u03c1\u03bf\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1\u03c4\u03b9\u03c3\u03c4\u03bf\u03cd\u03bd.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:vV6vV6tmYwMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Simulating search protocols in large-scale dynamic networks",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7445328/",
            "Abstract": "Reproducing complex networks with features of real-life networks is exciting and challenging at the same time. Based on the popular Omnet++ discrete event simulator, we introduce Armonia, a framework for modeling massive networks and their dynamic interactions. It includes a collection of topology generators, a set of resource placement and replication modules, a component for specifying resource location strategies, while also offering support for exporting data in order to visualize or analyze with other appropriate tools. Our framework targets search protocols in large-scale dynamic networks. Here, we apply it to simulate various probabilistic flooding strategies, making a comparative study of their performance over different network topologies.",
            "Abstract entirety": 1,
            "Author pub id": "JIGQWuAAAAAJ:O3NaXMp0MMsC",
            "Publisher": "IEEE"
        }
    ]
}]