[{
    "name": "\u0394\u03b9\u03bf\u03bc\u03ae\u03b4\u03b7\u03c2 \u03a3\u03c0\u03b9\u03bd\u03ad\u03bb\u03bb\u03b7\u03c2",
    "romanize name": "Diomidis Spinellis",
    "School-Department": "\u0394\u03b9\u03bf\u03b9\u03ba\u03b7\u03c4\u03b9\u03ba\u03ae\u03c2 \u0395\u03c0\u03b9\u03c3\u03c4\u03ae\u03bc\u03b7\u03c2 \u03ba\u03b1\u03b9 \u03a4\u03b5\u03c7\u03bd\u03bf\u03bb\u03bf\u03b3\u03af\u03b1\u03c2",
    "University": "aueb",
    "Rank": "\u039a\u03b1\u03b8\u03b7\u03b3\u03b7\u03c4\u03ae\u03c2",
    "Apella_id": 17574,
    "Scholar name": "Diomidis Spinellis",
    "Scholar id": "RjXNgA8AAAAJ",
    "Affiliation": "Professor, AUEB and TUDelft",
    "Citedby": 11295,
    "Interests": [
        "Software Engineering",
        "IT Security"
    ],
    "Scholar url": "https://scholar.google.com/citations?user=RjXNgA8AAAAJ&hl=en",
    "Publications": [
        {
            "Title": "Mastering Uncertainty in the Software Industry: Risks, Rewards, and Reality",
            "Publication year": 2012,
            "Publication url": "http://hakanerdogmus.net/weblog/wp-content/uploads/SES2012FullPage_revised2.pdf",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:XoXfffV-tXoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A Dataset of Open-Source Safety-Critical Software\u22c6",
            "Publication year": 2021,
            "Publication url": "http://ceur-ws.org/Vol-2878/paper6.pdf",
            "Abstract": "We describe the method used to create a dataset of open-source safety-critical software, such as that used for autonomous cars, healthcare, and autonomous aviation, through a systematic and rigorous selection process. The dataset can be used for empirical studies regarding the quality assessment of safety-critical software, its dependencies, and its development process, as well as comparative studies considering software from other domains.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:NrcdxztAscQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Evolution of the Unix system architecture: an exploratory case study",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8704965/",
            "Abstract": "Unix has evolved for almost five decades, shaping modern operating systems, key software technologies, and development practices. Studying the evolution of this remarkable system from an architectural perspective can provide insights on how to manage the growth of large, complex, and long-lived software systems. Along main Unix releases leading to the FreeBSD lineage we examine core architectural design decisions, the number of features, and code complexity, based on the analysis of source code, reference documentation, and related publications. We report that the growth in size has been uniform, with some notable outliers, while cyclomatic complexity has been religiously safeguarded. A large number of Unix-defining design decisions were implemented right from the very early beginning, with most of them still playing a major role. Unix continues to evolve from an architectural perspective, but the rate \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:3eDEwZmXtlkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Syndication as a business strategy for cross",
            "Publication year": 2001,
            "Publication url": "https://scholar.google.com/scholar?cluster=15031097606090008391&hl=en&oi=scholarr",
            "Abstract": "Due to the proliferation of many types of wireless devices, one of the key issues in the world of mobile environment is for the business players to adapt their content and applications to a plethora of wireless devices. This process of transferring content and applications to multiple devices is called cross-media publishing. In this paper we are going to examine the implication of cross-media publishing for the mobile industry. From a business point of view the suggested business strategy for making the most of all the possibilities opened by cross-media is syndication. From a technical point of view this tactic requires the utilization of transcoding tools for managing and delivering content across multiple devices.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:V3RZsmw8swMC",
            "Publisher": "media publishing in mobile environments"
        },
        {
            "Title": "Against the odds: Managing the unmanagable in a time of crisis",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-07881-6_3",
            "Abstract": "Information technology systems at the Greek Ministry of Finance could be the ideal tools for fighting widespread tax evasion, bureaucratic inefficiency, waste, and corruption. Yet making this happen requires battling against protracted procurement processes and implementation schedules, ineffective operations, and rigid management structures. This experience report details some unconventional measures, tools, and techniques that were adopted to sidestep the barriers in a time of crisis. The measures involved meritocracy, it utilization, and management by objectives. Sadly, this report is also a story (still being written) on the limits of such approaches. On balance, it demonstrates that in any large organization there are ample opportunities to bring about change, even against considerable odds.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:_UIRw3K-QSMC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Foundations and Trends\u00ae in Technology, Information and Operations Management",
            "Publication year": 2011,
            "Publication url": "https://scholar.google.com/scholar?cluster=15847218803613901847&hl=en&oi=scholarr",
            "Abstract": "Open source software (oss), the origins of which can be traced back to the 1950s, is software distributed with a license that allows access to its source code, free redistribution, the creation of derived works, and unrestricted use. oss applications cover most areas of consumer and business software and their study touches many disciplines, including computer science, information systems, economics, psychology, and law. Behind a successful oss project lies a community of actors, ranging from core developers to passive users, held together by a flexible governance structure and membership, leadership and contribution policies that align their interests. The motivation behind individuals participating in oss projects can be, among others, social, ideological, hedonistic, or signaling, while companies gain from their access to high-quality, innovative projects and an increase in their reputation and visibility. Nowadays \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:lvd772isFD0C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Open Source Adoption In Large US Companies.",
            "Publication year": 2009,
            "Publication url": "https://core.ac.uk/download/pdf/301352250.pdf",
            "Abstract": "Various organizations increasingly adopt open source software, both on desktop PCs and servers. Since the first movements in open source in the 1960\u2019s its growth has lead to new approaches in software development, licensing, and distribution, as well as in software vendors\u2019 business models. The literature includes very interesting studies regarding prospective benefits, business models and case studies. However, the adoption of open source in large, global companies and its relationship with factors such as profitability, revenues and industry sector has not yet been researched. This study aims to answer these questions based on data we collected from Fortune 1000 companies and provides a method that can be applied in similar contexts.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:8AbLer7MMksC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Index-based persistent document identifiers",
            "Publication year": 2005,
            "Publication url": "https://link.springer.com/article/10.1023/B:INRT.0000048494.05013.6a",
            "Abstract": "The infrastructure of a typical search engine can be used to calculate and resolve persistent document identifiers: a string that can uniquely identify and locate a document on the Internet without reference to its original location (URL). Bookmarking a document using such an identifier allows its retrieval even if the document's URL, and, in many cases, its contents change. Web client applications can offer facilities for users to bookmark a page by reference to a search engine and the persistent identifier instead of the original URL. The identifiers are calculated using a global Internet term index; a document's unique identifier consists of a word or word combination that occurs uniquely in the specific document. We use a genetic algorithm to locate a minimal unique document identifier: the shortest word or word combination that will locate the document. We tested our approach by implementing tools for indexing \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:1qzjygNMrQYC",
            "Publisher": "Kluwer Academic Publishers"
        },
        {
            "Title": "Tuning Java\u2019s memory manager for high performance server applications",
            "Publication year": 2008,
            "Publication url": "https://www.academia.edu/download/41975050/download.pdf",
            "Abstract": "Java is a strong player in the application server market and thus the performance of its virtual machine is an important aspect of a server\u2019s performance. One of the components that affect the performance of a JVM is the memory manager, which also includes the garbage collector. Modern virtual machines offer a multitude of options for tuning the memory manager, which can have a significant impact on server application performance. In this paper, we examine the effect of tuning the garbage collection in an application server environment. By employing both synthetic and real world application benchmarks, we assess the various garbage collection strategies offered by two popular virtual machines. Finally, we present a comprehensive list of generally applicable garbage collection guidelines.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:hkOj_22Ku90C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Smelly relations: measuring and understanding database schema quality",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3183519.3183529",
            "Abstract": "Context: Databases are an integral element of enterprise applications. Similarly to code, database schemas are also prone to smells-best practice violations.Objective: We aim to explore database schema quality, associated characteristics and their relationships with other software artifacts.Method: We present a catalog of 13 database schema smells and elicit developers' perspective through a survey. We extract embedded sql statements and identify database schema smells by employing the DbDeo tool which we developed. We analyze 2925 production-quality systems (357 industrial and 2568 well-engineered open-source projects) and empirically study quality characteristics of their database schemas. In total, we analyze 629 million lines of code containing more than 393 thousand sql statements.Results: We find that the index abuse smell occurs most frequently in database code, that the use of an orm \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:ptF5elMcwUYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Type checking for reliable apis",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7965487/",
            "Abstract": "In this paper, we propose to configure at compiletime the checking associated with Application ProgrammingInterfaces' methods that can receive possibly malformed values (e.g. erroneous user inputs and problematic retrieved recordsfrom databases) and thus cause application execution failures. To achieve this, we design a type system for implementing apluggable checker on the Java's compiler and find at compile timeinsufficient checking bugs that can lead to application crashesdue to malformed inputs. Our goal is to wrap methods whenthey receive external inputs so that the former generate checkedinstead of unchecked exceptions. We believe that our approachcan improve Java developers' productivity, by using exceptionhandling only when it is required, and ensure client applications'stability. We want to evaluate our checker by using it to verifythe source code of Java projects from the Apache ecosystem \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:yG35QFzCZWcC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software reuse cuts both ways: An empirical analysis of its relationship with security vulnerabilities",
            "Publication year": 2021,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121220301199",
            "Abstract": "Software reuse is a widely adopted practice among both researchers and practitioners. The relation between security and reuse can go both ways: a system can become more secure by relying on mature dependencies, or more insecure by exposing a larger attack surface via exploitable dependencies. To follow up on a previous study and shed more light on this subject, we further examine the association between software reuse and security threats. In particular, we empirically investigate 1244 open-source projects in a multiple-case study to explore and discuss the distribution of security vulnerabilities between the code created by a development team and the code reused through dependencies. For that, we consider both potential vulnerabilities, as assessed through static analysis, and disclosed vulnerabilities, reported in public databases. The results suggest that larger projects in size are associated with an \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:_2SDbzJQXqAC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "The Software Heritage Graph Dataset: Large-scale Analysis of Public Software Development History",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3379597.3387510",
            "Abstract": "Software Heritage is the largest existing public archive of software source code and accompanying development history. It spans more than five billion unique source code files and one billion unique commits, coming from more than 80 million software projects. These software artifacts were retrieved from major collaborative development platforms (eg, GitHub, GitLab) and package repositories (eg, PyPI, Debian, NPM), and stored in a uniform representation linking together source code files, directories, commits, and full snapshots of version control systems (VCS) repositories as observed by Software Heritage during periodic crawls. This dataset is unique in terms of accessibility and scale, and allows to explore a number of research questions on the long tail of public software development, instead of solely focusing on\" most starred\" repositories as it often happens.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:OqSZBmoviqwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Reflecting on quality",
            "Publication year": 2016,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2016/04/mso2016040004/13rRUxBJhDY",
            "Abstract": "The production of quality software requires data-driven quality management. Fortunately, developers can use a plethora of tools and techniques for this.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:lCdzyD0WTL4C",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Systems software",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6504881/",
            "Abstract": "Systems software is the low-level infrastructure that applications run on. As an applications programmer, first try to find existing systems software rather than writing it from scratch. Once you start writing systems software, use the most efficient algorithms and data structures that gracefully accommodate the workload. Have your code check for all error returns, block when it has nothing to do, and avoid repeatedly processing data in memory. You can accelerate stress testing your software by configuring your testing environment to exercise its edge cases. To debug your software, instrument it with copious amounts of configurable logging. The Web extra at http://youtu.be/b8wWr36CiE8 is an audio podcast of author Diomidis Spinellis discussing how with mean and lean code, paranoid testing, and comprehensive logging, programmers can write the systems software that their applications deserve.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:yMeIxYmEMEAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Tools of the Trade-Git",
            "Publication year": 2012,
            "Publication url": "https://scholar.google.com/scholar?cluster=16055187160635097375&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:quBVm8e4N6QC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Enabling Practices for Information Systems Adoption in the Complex Context of Greek E-Government",
            "Publication year": 2018,
            "Publication url": "https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1033&context=mcis2018",
            "Abstract": "The Greek administrative context is characterized by a centralized and bureaucratic culture and is heavily influenced by the ongoing financial crisis. E-government is under development and remains greatly fragmented while adoption is low and resistance by public agencies and citizens is often high. Against this background, this paper provides an in-depth study of four nation-wide e-government projects recently adopted in Greece that were successfully implemented and widely adopted by their intended stakeholders. The study of these projects reveals common enabling factors. Based on our findings, we propose a framework that links together three enabling practices for the adoption of egovernment projects, namely, top-down pressures, agency ownership and user engagement. We discuss how these are interrelated and their implications for improving e-government adoption \u2018against the odds\u2019.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:H4IpxOyCX80C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Targeted messages in indoor mobile environment: A software-oriented approach.",
            "Publication year": 2004,
            "Publication url": "https://www.academia.edu/download/54636393/tpas04.pdf",
            "Abstract": "Considering the advances of wireless, mobile and positioning technologies and the high requirement of the mobile marketing world for reaching as many customers as possible in a personalized way, this paper presents a wireless technology solution for sending targeted advertising or information messages on mobile devices. The research and development work presented in this paper has been conducted as part of a European-funded project named mEXPRESS (mobile in-EXhibition PRovision of Electronic Support Services) which aims at developing a Mobile Exhibition Guide providing location based services. In this context, we have built a Targeted Messenger subsystem enabling on-site promotion of exhibits via targeted spots as well as targeted announcements to user groups based on their profile, preferences and location in exhibition halls. This paper discusses the Targeted Messenger component\u2019s architecture and design specification, with the aid of UML tools, as well as its implementation, based on J2EE multitier implementation platform.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:sSrBHYA8nusC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Project asset portability",
            "Publication year": 2006,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1576665/",
            "Abstract": "Nowadays, a software system's program source code makes up only a small part of its assets stored as bits - taking up a larger percentage are specifications, design diagrams, application server deployment scripts, build rules, version history, documentation, and regression tests. Only the source code and the documentation are relatively portable between different tools. The version history and the issues are stored in tool-specific formats that hold the project hostage to their corresponding tools. In this article the author discusses the importance of project asset portability",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:XD-gHx7UXLsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Design of Production Lines",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_3",
            "Abstract": "This chapter is essentially a prelude to the rest of the text and its objective is to assist the reader to understand the main initial design problems that arise with production lines. It is important for the reader to clarify the context of any design problem related to any production line, e.g., is it a green fields situation, a modification of an existing production line to enhance performance or the adaptation of an existing line to produce products not produced already?Once the strategic decision to use a production line to manufacture the products has been made, the design of the line must be undertaken. To remind the reader of the complexities involved, in Figure 3.1, an example of a relatively complex production line, adapted from Li (2003), is shown.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:olpn-zPbct0C",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Dealing with aging systems-Diomidis Spinellis responds",
            "Publication year": 2007,
            "Publication url": "https://scholar.google.com/scholar?cluster=5293758878837588518&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:yqoGN6RLRZoC",
            "Publisher": "IEEE COMPUTER SOC"
        },
        {
            "Title": "Extending Our Field's Reach",
            "Publication year": 2015,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2015/06/mso2015060004/13rRUwdrdNT",
            "Abstract": "The techniques and processes software engineers have perfected to manage complex projects, version control, and international collaboration could benefit other fields and industries.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:N5ITjzxXrcwC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "A comparison of portable dynamic web content technologies for the Apache web server",
            "Publication year": 2002,
            "Publication url": "https://scholar.google.com/scholar?cluster=1363933108990350114&hl=en&oi=scholarr",
            "Abstract": "Apache is considered to be the most extensible, secure and widely used server on the Internet. On our talk we focus on its first characteristic, extensibility, analyzing many techniques used to provide dynamic content. Available solutions are based either on extensions to the web server itself or on the execution of userspace programs. These solutions include, among others, CGI scripts, PHP, mod perl, mod python and Java Servlets. For each technology we present its basic design goals and the development facilities it offers. We compare the efficiency of these technologies by means of custom-made benchmarks we run to measure each solution\u2019s throughput. Finally, we present each technique\u2019s drawbacks, with references to lessons learned during the complete deploy-and-test process.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:HDshCWvjkbEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A platform for software engineering research",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5069478/",
            "Abstract": "Research in the fields of software quality, maintainability and evolution requires the analysis of large quantities of data, which often originate from open source software projects. Collecting and preprocessing data, calculating metrics, and synthesizing composite results from a large corpus of project artifacts is a tedious and error prone task lacking direct scientific value. The Alitheia Core tool is an extensible platform for software quality analysis that is designed specifically to facilitate software engineering research on large and diverse data sources, by integrating data collection and preprocessing phases with an array of analysis services, and presenting the researcher with an easy to use extension mechanism. Alitheia Core aims to be the basis of an ecosystem of shared tools and research data that will enable researchers to focus on their research questions at hand, rather than spend time on re-implementing \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:CHSYGLWDkRkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The virtual channel model for personalized television",
            "Publication year": 2003,
            "Publication url": "https://www.researchgate.net/profile/George-Lekakos/publication/2889681_The_Virtual_Channel_Model_for_Personalized_Television/links/0912f50b5ffb1ca77c000000/The-Virtual-Channel-Model-for-Personalized-Television.pdf",
            "Abstract": "This research* is based on the realization that the desktop computing paradigm is not appropriate for television, because it is adapted to fundamentally different user aspirations and activities. Instead, the virtual channel is proposed as a model that explains the proper design of user access to personalized television programming. The virtual channel is a model that aids the organization and dynamic presentation of television programming from a combination of live broadcasts, prerecorded content and Internet resources at each set-top box. In this paper, we describe two applications that have been used to validate the virtual channel model. We have employed the properties of the virtual channel model into the design of personalized television advertising and interactive music video clip programming. Finally, we describe an ActiveX control that implements a core set of the virtual channel\u2019s features.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:4DMP91E08xMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "ASSOCIATE EDITORS IN CHIEF",
            "Publication year": 2021,
            "Publication url": "https://www.computer.org/csdl/api/v1/periodical/mags/pc/2021/01/09379963/1s113bLQIWk/download-article/pdf",
            "Abstract": "IEEE Pervasive Computing January-March 2021 Page 1 IEEE Pervasive Computing 3 \nJanuary-March 2021 Reuse Rights and Reprint Permissions: Educational or per- sonal use of \nthis material is permitted without fee, provided such use: 1) is not made for profit; 2) includes \nthis notice and a full citation to the original work on the first page of the copy; and 3) does not \nimply IEEE endorsement of any third-party products or services. Authors and their companies \nare permitted to post the accepted version of their IEEE-copyrighted material on their own web \nservers without permission, provided that the IEEE copyright notice and a full citation to the \noriginal work appear on the first screen of the posted copy. An accepted manuscript is a version \nthat has been revised by the author to incorporate review suggestions, but not the published \nversion with copyediting, proofreading, and formatting added by IEEE. For more information\u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:5pGZGXnFQ_sC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Application interconnection and execution of Business to Business transactions over the Internet",
            "Publication year": 2004,
            "Publication url": "https://www.academia.edu/download/41975053/SCK04.pdf",
            "Abstract": "The project must produce a set of 23 electronic processes. These are categorized in two classes:(1) The internal processes are small transactions in the PRAXIS Server. A business process consists of a set of internal processes. Only the system is aware of these processes.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:FAceZFleit8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Where's My Jetpack?",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4602669/",
            "Abstract": "Software development tools often fail to deliver on inflated promises. Rather than the predicted progression toward ever-increasing levels of abstraction, two simple trends have driven the evolution of currently available software development tools: integration at the source-code level and a focus on quality. Thus source code has become the bus that tools tap into for communicating with other tools. Also, focus has shifted from defect removal in the later phases to defect prevention in the earlier phases. In the future, tools are likely to support higher levels of abstraction, perhaps in the form of domain-specific languages communicated using XML.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:K3LRdlH-MEoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Practical testing advice [Book Review]",
            "Publication year": 2001,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/922737/",
            "Abstract": "bug-tracking system, which is outlined in a separate chapter, is likely to bring forward political issues. Although many useful metrics can be extracted from such a system, the authors wisely point out that it would be counterproductive to use it for tracking individual performance of programmers or testers. Reports can still help make estimates based on past performance figures and judging project progress. Another particularly thorny issue concerns the problem report life cycle. A state diagram would help readers better understand the temporal and organizational relationship between problem resolution and status. However, even the authors appear split on the issue of how to treat deferred bugs.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:W5xh706n7nkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Power laws in software",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1391984.1391986",
            "Abstract": "A single statistical framework, comprising power law distributions and scale-free networks, seems to fit a wide variety of phenomena. There is evidence that power laws appear in software at the class and function level. We show that distributions with long, fat tails in software are much more pervasive than previously established, appearing at various levels of abstraction, in diverse systems and languages. The implications of this phenomenon cover various aspects of software engineering research and practice.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:WF5omc3nYNoC",
            "Publisher": "ACM"
        },
        {
            "Title": "Code smell detection by deep direct-learning and transfer-learning",
            "Publication year": 2021,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121221000339",
            "Abstract": "An excessive number of code smells make a software system hard to evolve and maintain. Machine learning methods, in addition to metric-based and heuristic-based methods, have been recently applied to detect code smells; however, current methods are considered far from mature.First, explore the feasibility of applying deep learning models to detect smells without extensive feature engineering. Second, investigate the possibility of applying transfer-learning in the context of detecting code smells.We train smell detection models based on Convolution Neural Networks and Recurrent Neural Networks as their principal hidden layers along with autoencoder models. For the first objective, we perform training and evaluation on C# samples, whereas for the second objective, we train the models from C# code and evaluate the models over Java code samples and vice-versa.We \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:qRvB3I1gqpcC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "The information furnace: User-friendly home control",
            "Publication year": 2002,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.2.9310&rep=rep1&type=pdf",
            "Abstract": "The Information Furnace is a basement-installed PC-type device that integrates existing consumer home-control, infotainment, security, and communication technologies to transparently provide user-friendly access and value-added services. A modern home contains a large number of sophisticated devices and technologies. Access to these devices is currently provided through a wide variety of disparate interfaces. As a result, end-users face a bewildering array of confusing userinterfaces, access modes, and affordances. In addition, as most devices function in isolation, important opportunities to exploit synergies between their functionalities are lost. The information furnace distributes data, provides services, and controls an apartment\u2019s digital devices. Emphasis is placed on user-friendliness and on exploiting the synergies that inevitably come up when these technologies and services are housed under a single \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:RYcK_YlVTxYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Using object-oriented design metrics to predict software defects",
            "Publication year": 2010,
            "Publication url": "https://www2.dmst.aueb.gr/dds/pubs/conf/2010-DepCoS-RELCOMEX-ckjm-defects/html/JS10.pdf",
            "Abstract": "Many object-oriented design metrics have been developed [1, 3, 8, 17, 24] to help in predict software defects or evaluate design quality. Since a defect prediction model may give crucial clues about the distribution and location of defects and, thereby, test prioritization, accurate prediction can save costs in the testing process. Considerable research has been performed on defect prediction methods; see the surveys by Purao and Vaishnavi [22] and by Wahyudin et al.[25], unfortunately few results appear at statistically significant level. Therefore, further empirical validation is necessary to prove the usefulness of the metrics and software prediction models in industrial practice. Our study was made possible through the creation of a new metric calculation tool 4. There are many tools that calculate object-oriented metrics. What is the reason to create another one? In fact the situation is not so perfect. The available programs are either extremely inefficient (sometimes they do not work with big software projects at all), not available as open source and therefore difficult to reason about their results, or incomplete\u2014the set of calculated metrics is not wide enough. It is extremely hard to find a tool that calculates all metrics from the Chidamber and Kemerer (C&K) metrics suite [3]. Having both, C&K and QMOOD metrics suites [1] in one tool is even rarer, and according to the authors' knowledge there is no other tool, that calculates metrics suggested by Tang et al.[24]. Ckjm calculates metrics that have been recommended as good quality indicators. There are several works that investigate the C&K metric suite and that have empirically proven their usability in \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:70eg2SAEIzsC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A PRoactive malware identification system based on the computer hygiene principles",
            "Publication year": 2007,
            "Publication url": "https://www.emerald.com/insight/content/doi/10.1108/09685220710817815/full/html",
            "Abstract": "To present a new technique that contains the spread of rapid malcode, which is based on peer\u2010to\u2010peer (P2P) communication and the principles of computer hygiene.Two proof\u2010of\u2010concept prototypes demonstrate the feasibility of the introduced technique. The effectiveness of the proposed model is supported by experimental findings through simulation tests. Additional software tools have been developed to ensure the correctness of the simulation.Provides supportive information regarding the efficiency of computer hygiene practices. Moreover, theoretical and empirical results show that P2P networks could play an important role in the containment of worm epidemics.A stable system deployed in large\u2010scale is yet to be implement in order to produce decisive results regarding the benefits of the proposed algorithm \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:vV6vV6tmYwMC",
            "Publisher": "Emerald Group Publishing Limited"
        },
        {
            "Title": "Open source software: A survey from 10,000 feet",
            "Publication year": 2011,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.958.7204&rep=rep1&type=pdf",
            "Abstract": "Open source software (OSS), the origins of which can be traced back to the 1950s, is software distributed with a license that allows access to its source code, free redistribution, the creation of derived works, and unrestricted use. OSS applications cover most areas of consumer and business software and their study touches many disciplines, including computer science, information systems, economics, psychology, and law. Behind a successful OSS project lies a community of actors, ranging from core developers to passive users, held together by a flexible governance structure and membership, leadership and contribution policies that align their interests. The motivation behind individuals participating in OSS projects can be, among others, social, ideological, hedonistic, or signaling, while companies gain from their access to high-quality, innovative projects and an increase in their reputation and visibility. Nowadays many business models rely on OSS as a product through the provision of associated services, or in coexistence with proprietary software, hardware, services, or licensing. The numerous OSS licenses mainly differ",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Ehil0879vHcC",
            "Publisher": "Now Publishers, PO Box 179 2600 AD Delft The Netherlands"
        },
        {
            "Title": "A model for detecting faults in build specifications",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3428212",
            "Abstract": "Incremental and parallel builds are crucial features of modern build systems. Parallelism enables fast builds by running independent tasks simultaneously, while incrementality saves time and computing resources by processing the build operations that were affected by a particular code change. Writing build definitions that lead to error-free incremental and parallel builds is a challenging task. This is mainly because developers are often unable to predict the effects of build operations on the file system and how different build operations interact with each other. Faulty build scripts may seriously degrade the reliability of automated builds, as they cause build failures, and non-deterministic and incorrect outputs.  To reason about arbitrary build executions, we present BuildFS, a generally-applicable model that takes into account the specification (as declared in build scripts) and the actual behavior (low-level file \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:WtgKeONp1i0C",
            "Publisher": "ACM"
        },
        {
            "Title": "Developing in the Cloud",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6774357/",
            "Abstract": "Many affordable cloud-based offerings that cover software development needs, like version control, issue tracking, remote application monitoring, localization, deployment, payment processing, and continuous integration, do away with the setup, maintenance, and user support costs and complexity associated with running such systems in-house. The most important risks of cloud-based tools concern control of the data stored and the services an organization uses. On the other hand, cloud-based tools dramatically lower the capital requirements and setup costs of a software development organization. They also help organizations adopt best practices in each domain simply by registering with the corresponding service. Using a cloud-based service also means fewer worries regarding scalability, while from the customers' perspective delivering a service through the cloud allows an organization to have a much closer \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:mCmIWee0OMYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Improving the quality of APIs through the analysis of software crash reports",
            "Publication year": 2013,
            "Publication url": "https://drops.dagstuhl.de/opus/volltexte/2013/4272/",
            "Abstract": "Modern programs depend on APIS to implement a significant part of their functionality. Apart from the way developers use APIS to build their software, the stability of these programs relies on the APIS design and implementation. In this work, we evaluate the reliability of APIS, by examining software telemetry data, in the form of stack traces, coming from Android application crashes. We got 4.9 GB worth of crash data that thousands of applications send to a centralized crash report management service. We processed that data to extract approximately a million stack traces, stitching together parts of chained exceptions, and established heuristic rules to draw the border between applications and API calls. We examined 80% of the stack traces to map the space of the most common application failure reasons. Our findings show that the top ones can be attributed to memory exhaustion, race conditions or deadlocks, and missing or corrupt resources. At the same time, a significant number of our stack traces (over 10%) remains unclassified due to generic unchecked exceptions, which do not highlight the problems that lead to crashes. Finally, given the classes of crash causes we found, we argue that API design and implementation improvements, such as specific exceptions, non-blocking algorithms, and default resources, can eliminate common failures.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:gVv57TyPmFsC",
            "Publisher": "Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik"
        },
        {
            "Title": "What are your programming language's energy-delay implications?",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3196398.3196414",
            "Abstract": "Motivation: Even though many studies examine the energy efficiency of hardware and embedded systems, those that investigate the energy consumption of software applications are still limited, and mostly focused on mobile applications. As modern applications become even more complex and heterogeneous a need arises for methods that can accurately assess their energy consumption.Goal: Measure the energy consumption and run-time performance of commonly used programming tasks implemented in different programming languages and executed on a variety of platforms to help developers to choose appropriate implementation platforms.Method: Obtain measurements to calculate the Energy Delay Product, a weighted function that takes into account a task's energy consumption and run-time performance. We perform our tests by calculating the Energy Delay Product of 25 programming tasks, found in the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:evIcR_-jKtEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The strategic importance of release engineering",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7057563/",
            "Abstract": "Release engineering affects the software we build, how we build it, and how we can make money out of it. It also presents many challenges that will take time to overcome.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:scjTk0LcRdsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "J%: Integrating domain-specific languages with java",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5298887/",
            "Abstract": "J% (J-mod), is a Java language extension that supports integration with domain-specific languages (DSLs). The integration is realized through an architecture that permits external modules to support DSLs. The DSL statements can be syntactically checked at compile-time. An additional facility allows the static type checking of Java variables that appear within DSL code. To support this process each DSL module comes as a library that is used both at compile time and during program execution.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:tOudhMTPpwUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "I spy",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4118645/",
            "Abstract": "The ultimate source of truth regarding a program is its execution. When a program runs, everything comes to light: correctness, CPU and memory use, and even interactions with (potentially buggy) libraries, operating systems, and hardware. Yet, this source of truth is also fleeting, rushing into oblivion at the tune of billions of instructions per second. Worse, capturing that truth can be a tricky, tortuous, or downright treacherous affair. Peeking into a program's operation typically involves preparing a special version of it: we might compile it with specific flags or options, link it with appropriate libraries, or run it with suitable arguments. Often, we can't easily reproduce a problem, so we need to ship our carefully crafted program version to a customer, who then will have to wait for the problem to appear again. Irritatingly, some of the ways we instrument programs make the program too slow for production use or obfuscate the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:URolC5Kub84C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Position-annotated photographs: A geotemporal web",
            "Publication year": 2003,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1203756/",
            "Abstract": "With the advent of digital cameras, photographs are no longer gathering dust, forgotten in old shoeboxes. Instead, they are lying unused in hard disk dircctories and on CDs. The Geotemporal Web system, belonging to the \"capture and access\" class of ubiquitous computing applications, addresses this phenomenon by automatically converting raw data from the typical vacation trip into a lively Web site. Exploiting the synergies of integrating different consumer-grade information appliances and publicly accessible databases, a GTWeb site presents a trip overview, timelines, maps, and annotated photographs.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Zph67rFs4hoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Using Linux Live CDs for penetration testing",
            "Publication year": 2006,
            "Publication url": "https://dialnet.unirioja.es/servlet/articulo?codigo=4957192",
            "Abstract": "What would you think if in minutes you could have a full Linux system with almost all the neccesary tools for penetration testing and securiting auditing, without having to install it on a dedicated machine? Wheter you are a security professional or a system administrator, a bootable Linux live CD can be your best friend.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ouq6-fJ2VSQC",
            "Publisher": "USENIX Association"
        },
        {
            "Title": "The tools at hand",
            "Publication year": 2005,
            "Publication url": "https://www.academia.edu/download/30699903/v22n1.pdf",
            "Abstract": "TOOLS OF THE TRADE numbers. The semiconductor industry\u2019s capital expenditures amount to 23 percent of its revenue. This is how it has succeeded in following Moore\u2019s law for more than 30 consecutive years. The car industry\u2019s robotic factories, seen as patterns for emulation by proponents of software assembly plants, soak up 8 percent of its revenues. Even the nomadic heavy-construction industry\u2014our perennial favorite when we compare software engineering to bridge building\u2014spends on capital equipment nearly twice the percentage of revenues that our own custom software construction (programming services) firms spend. I hear you saying that software\u2019s economies are different: we can duplicate software at a zero marginal cost, so the low cost of tools reflects the realities of their distribution rather than their intrinsic value. I only wish this was true\u2014that we\u2019re all buying expensively developed tools at rock-bottom prices. I can vouch from experience that the effort our industry puts into developing software development tools is apparently miniscule. A couple of years ago I developed UML-Graph, a prototype of a declarative UML diagramming tool, and made it available over my Web site. I wrote the tool\u2019s first version over a single weekend, yet I regularly receive email from enthusiastic users. This fact definitely doesn\u2019t reflect on my programming brilliance, but says a lot about the state of the art in diagramming software and the amount of cash employers are willing to spend on purchasing diagramming (and conceivably other software development) tools. What would happen if an established tool vendor with deep pockets decided to build a \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:l7t_Zn2s7bgC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Half-century of unix: history, preservation, and lessons learned",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7962349/",
            "Abstract": "The Unix operating system stands out as a major engineering achievement due to its exemplary design, technical contributions, impact, development model, and widespread use. Its evolution is made available as a revision management repository, covering the period from its inception in 1970 until today. The data set is being used for empirical research in the evolution of code, programming practices, systems, and software architecture.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:LYW2S8xaXYEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A repository of Unix history and evolution",
            "Publication year": 2017,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-016-9445-5",
            "Abstract": "The history and evolution of the Unix operating system is made available as a revision management repository, covering the period from its inception in 1972 as a five thousand line kernel, to 2016 as a widely-used 27 million line system. The 1.1gb repository contains 496 thousand commits and 2,523 branch merges. The repository employs the commonly used Git version control system for its storage, and is hosted on the popular GitHub archive. It has been created by synthesizing with custom software 24 snapshots of systems developed at Bell Labs, the University of California at Berkeley, and the 386bsd team, two legacy repositories, and the modern repository of the open source Freebsd system. In total, 973 individual contributors are identified, the early ones through primary research. The data set can be used for empirical research in software engineering, information systems, and software archaeology.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:SuREjsGmJT0C",
            "Publisher": "Springer US"
        },
        {
            "Title": "Tools! Tools! We need tools!",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B9780128042069000283",
            "Abstract": "Science has always progressed mightily through the use of tools. A key element for the application of data science in software engineering is the availability of suitable tools. Such tools allow us to obtain data from novel sources, measure processes and products, and analyze all that data to derive insights that can advance science and everyday practice. Given the importance of tools in conducting software engineering research, hone your tool-building skills, test your tools thoroughly, and share the results of your efforts as open source software.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:n35PH7pn8T4C",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "SDriver: Location-specific signatures prevent SQL injection attacks",
            "Publication year": 2009,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0167404808000928",
            "Abstract": "SQL injection attacks involve the construction of application input data that will result in the execution of malicious SQL statements. Many web applications are prone to SQL injection attacks. This paper proposes a novel methodology of preventing this kind of attacks by placing a secure database driver between the application and its underlying relational database management system. To detect an attack, the driver uses stripped-down SQL queries and stack traces to create SQL statement signatures that are then used to distinguish between injected and legitimate queries. The driver depends neither on the application nor on the RDBMS and can be easily retrofitted to any system. We have developed a tool, SDriver, that implements our technique and used it on several web applications with positive results.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:EUQCXRtRnyEC",
            "Publisher": "Elsevier Advanced Technology"
        },
        {
            "Title": "Code reading: the open source perspective, vol. 1.",
            "Publication year": 2004,
            "Publication url": "https://scholar.google.com/scholar?cluster=14138642874021947652&hl=en&oi=scholarr",
            "Abstract": "Spinellis' book provides comprehensive coverage of issues related to using open source C code. It contains 11 chapters and five indices, which address different aspects of open source software.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:3GgZsIzdB2YC",
            "Publisher": "Unknown"
        },
        {
            "Title": "PyCG: Practical Call Graph Generation in Python",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9402076/",
            "Abstract": "Call graphs play an important role in different contexts, such as profiling and vulnerability propagation analysis. Generating call graphs in an efficient manner can be a challenging task when it comes to high-level languages that are modular and incorporate dynamic features and higher-order functions. Despite the language\u2019s popularity, there have been very few tools aiming to generate call graphs for Python programs. Worse, these tools suffer from several effectiveness issues that limit their practicality in realistic programs. We propose a pragmatic, static approach for call graph generation in Python. We compute all assignment relations between program identifiers of functions, variables, classes, and modules through an inter-procedural analysis. Based on these assignment relations, we produce the resulting call graph by resolving all calls to potentially invoked functions. Notably, the underlying analysis is \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:rZ6lE9DvW78C",
            "Publisher": "IEEE"
        },
        {
            "Title": "CScout: A refactoring browser for C",
            "Publication year": 2010,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S016764230900121X",
            "Abstract": "Despite its maturity and popularity, the C programming language still lacks tool support for reliably performing even simple refactoring, browsing, or analysis operations. This is primarily due to identifier scope complications introduced by the C preprocessor. The CScout refactoring browser analyses complete program families by tagging the original identifiers with their precise location and classifying them into equivalence classes orthogonal to the C language\u2019s namespace and scope extents. A web-based user interface provides programmers with an intuitive source code analysis and navigation front-end, while an sql-based back-end allows more complex source code analysis and manipulation. CScout has been successfully applied to many medium and large-sized proprietary and open-source projects identifying thousands of modest refactoring opportunities.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:cFHS6HbyZ2cC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "ASSOCIATE EDITOR IN CHIEF",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9371466/",
            "Abstract": "EDITOR IN CHIEF Gerardo Con Diaz, University of California, Davis condiaz@ucdavis.edu \nASSOCIATE EDITOR IN CHIEF David Hemmending Page 1 January-March 2021 EDITOR IN \nCHIEF Gerardo Con Diaz, University of California, Davis condiaz@ucdavis.edu ASSOCIATE \nEDITOR IN CHIEF David Hemmendinger, Union College hemmendd@union.edu ASSOCIATE \nEDITORS Mar Hicks, Illinois Institute of Technology Jeffrey R. Yost, Charles Babbage Institute \nDEPARTMENT EDITORS Anecdotes: annals-anecdotes@computer.org Biographies: \nannals-biographies@computer.org Events and Sightings: annals-es@computer.org Interviews: \nDag Spicer, Computer History Museum (annals-interviews@computer.org) Reviews: Theodora \nDryer, AI Now Institute (annals-reviews@computer.org) Think Piece: condiaz@gmail.com \nFORMER EDITORS IN CHIEF Bernard A. Galler, 1979\u20131987 JAN Lee, 1987\u20131995 Michael \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:LkrQC8aPkXYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "RepoFS: File system view of Git repositories",
            "Publication year": 2019,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S2352711018300712",
            "Abstract": "Empirical software engineering work often involves studying revision control system repositories maintained using the popular Git system. Checking out each revision one wants to study is inefficient. On the other hand the examination of directories and files of past revisions using Git\u2019s commands suffers from a usability perspective. We introduce repofs, a tool that exposes a Git repository as a virtual user-level file system. Commits, branches, and tags appear as separate directory trees allowing them to be efficiently processed through command-line tools and file explorers. We illustrate these points through motivating examples and discuss the advantages and drawbacks of the proposed approach.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:lOLSY4hLU6kC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Code review comments: language matters",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3183399.3183411",
            "Abstract": "Recent research provides evidence that effective communication in collaborative software development has significant impact on the software development lifecycle. Although related qualitative and quantitative studies point out textual characteristics of well-formed messages, the underlying semantics of the intertwined linguistic structures still remain largely misinterpreted or ignored. Especially, regarding quality of code reviews the importance of thorough feedback, and explicit rationale is often mentioned but rarely linked with related linguistic features. As a first step towards addressing this shortcoming, we propose grounding these studies on theories of linguistics. We particularly focus on linguistic structures of coherent speech and explain how they can be exploited in practice. We reflect on related approaches and examine through a preliminary study on four open source projects, possible links between existing \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:KjbfwUOO_FMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A simulated annealing approach for buffer allocation in reliable production lines",
            "Publication year": 2000,
            "Publication url": "https://link.springer.com/article/10.1023/A:1018984125703",
            "Abstract": "We describe a simulated annealing approach for solving the buffer allocation problem in reliable production lines. The problem entails the determination of near optimal buffer allocation plans in large production lines with the objective of maximizing their average throughput. The latter is calculated utilizing a decomposition method. The allocation plan is calculated subject to a given amount of total buffer slots in a computationally efficient way.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Y0pCki6q_DkC",
            "Publisher": "Kluwer Academic Publishers"
        },
        {
            "Title": "GHTorrent: GitHub's data from a firehose",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6224294/",
            "Abstract": "A common requirement of many empirical software engineering studies is the acquisition and curation of data from software repositories. During the last few years, GitHub has emerged as a popular project hosting, mirroring and collaboration platform. GitHub provides an extensive REST API, which enables researchers to retrieve both the commits to the projects' repositories and events generated through user actions on project resources. GHTorrent aims to create a scalable off line mirror of GitHub's event streams and persistent data, and offer it to the research community as a service. In this paper, we present the project's design and initial implementation and demonstrate how the provided datasets can be queried and processed.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:foquWX3nUaYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Standing on shoulders or feet? An extended study on the usage of the MSR data papers",
            "Publication year": 2020,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-020-09834-7",
            "Abstract": "The establishment of the Mining Software Repositories (MSR) data showcase conference track has encouraged researchers to provide data sets as a basis for further empirical studies. The objective of this study is to examine the usage of data papers published in the MSR proceedings in terms of use frequency, users, and use purpose. Data track papers were collected from the MSR data showcase track and through the manual inspection of older MSR proceedings. The use of data papers was established through manual citation searching followed by reading the citing studies and dividing them into strong and weak citations. Contrary to weak, strong citations truly use the data set of a data paper. Data papers were then manually clustered based on their content, whereas their strong citations were classified by hand according to the knowledge areas of the Guide to the Software Engineering Body of \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:ZDu_srLEjN8C",
            "Publisher": "Springer US"
        },
        {
            "Title": "Start with the most difficult part",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4786956/",
            "Abstract": "Any development project involves elements that we don't know at the beginning and discover as we progress. In this paper, the author discusses the advantages of starting with the most difficult part of a software development process.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:t7zJ5fGR-2UC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A gentle introduction to embedded systems [Book Review]",
            "Publication year": 2002,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/976950/",
            "Abstract": "Information appliances and ubiquitous computing are the wave of the future, yet many of us are designing and implementing software for desktop or server machines with hundreds of Mbytes of RAM running at hundreds of MHz, thereby drawing hundreds of watts. To exploit the power of our machines, we run complex operating systems, programming languages, development tools, and communication protocols on them. Microcontroller Projects with Basic",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:LPZeul_q3PIC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Architecture from a Developer's Perspective",
            "Publication year": 2015,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2015/05/mso2015050004/13rRUwbaqSK",
            "Abstract": "I CAN STILL remember when, back in 2003, a fellow FreeBSD developer chastised me for an architectural misstep. I had proposed adding a reference to a related C library function in the documentation of a Unix system call.\u201cI believe this is bad practice (a layering violation),\u201d he wrote to me. He was right; I hadn\u2019t thought carefully about that small addition. The truth is that as a developer you practice architecture daily, but only rarely do you have time to reflect on your corresponding decisions, actions, and their consequences. Software architecture affects the quality of what you build and how you build it.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:MkYP4vM-iK8C",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Barriers to the adoption of B2B e-marketplaces by large enterprises: lessons learned from the hellenic aerospace industry",
            "Publication year": 2011,
            "Publication url": "https://www.tandfonline.com/doi/abs/10.1080/10580530.2011.562129",
            "Abstract": "This article investigates the main barriers to the adoption of B2B e-marketplaces by large enterprises and at the same time the expected benefits that push in the opposite direction towards the adoption, through a case study conducted at the Hellenic Aerospace Industry (HAI), one of the largest industrial enterprises of Greece. The evidence collected from this case has been analyzed using various frameworks from the literature and also the innovation diffusion theory of Rogers, and shed light on the specificity of the large enterprises concerning e-marketplaces adoption.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:J-pR_7NvFogC",
            "Publisher": "Taylor & Francis Group"
        },
        {
            "Title": "The SQO-OSS quality model: measurement based open source software evaluation",
            "Publication year": 2008,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-09684-1_19",
            "Abstract": "Software quality evaluation has always been an important part of software business. The quality evaluation process is usually based on hierarchical quality models that measure various aspects of software quality and deduce a characterization of the product quality being evaluated. The particular nature of open source software has rendered existing models inappropriate for detailed quality evaluations. In this paper, we present a hierarchical quality model that evaluates source code and community processes, based on automatic calculation of metric values and their correlation to a set of predefined quality profiles.1 ",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:hqOjcs7Dif8C",
            "Publisher": "Springer, Boston, MA"
        },
        {
            "Title": "MITOS: An integrated web-based system for information management",
            "Publication year": 2008,
            "Publication url": "https://www.researchgate.net/profile/Vangelis-Karkaletsis/publication/250162061_MITOS_An_Integrated_Web-based_System_for_Information_Management/links/02e7e52a317e9df542000000/MITOS-An-Integrated-Web-based-System-for-Information-Management.pdf",
            "Abstract": "The wide availability and accessibility of information have made its management and deployment even more difficult. To this end, remarkable effort has been made for the development of information systems that handle the processing, analysis and management of information. However, the success of these systems does not only depend on the quality of information handling, but also on the appropriate presentation of information to the end-user. MITOS 1 system analyses financial news by employing techniques from the areas of Natural Language Processing, Information Filtering and Information Extraction. Moreover, by acknowledging the importance of the presentation of information, MITOS has also incorporated User Modelling techniques, which enable the provision of personalized content adapted to each user\u2019s profile.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:b0M2c_1WBrUC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A framework for the static verification of API calls",
            "Publication year": 2007,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121206002755",
            "Abstract": "A number of tools can statically check program code to identify commonly encountered bug patterns. At the same time, programs are increasingly relying on external apis for performing the bulk of their work: the bug-prone program logic is being fleshed-out, and many errors involve tricky subroutine calls to the constantly growing set of external libraries. Extending the static analysis tools to cover the available apis is an approach that replicates scarce human effort across different tools and does not scale. Instead, we propose moving the static api call verification code into the api implementation, and distributing the verification code together with the library proper. We have designed a framework for providing static verification code together with Java classes, and have extended the FindBugs static analysis tool to check the corresponding method invocations. To validate our approach we wrote verification tests for 100 \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:_xSYboBqXhAC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Systems architecture for pervasive retail",
            "Publication year": 2003,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/952532.952656",
            "Abstract": "Recent developments in mobile technologies and associated economics of scale via mature manufacturing processes have made possible the construction of pervasive systems in specific application areas. In this paper we discuss a novel type of retail service based on wireless and mobile technologies for the automated replenishment of home product supplies. The primary motivation for this work is the optimization of the efficiency and effectiveness of the fast moving consumer goods Box 407, FIN-00045, Helsinki, Finland",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:_kc_bZDykSQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "TRACER: A Platform for Securing Legacy Code",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/978-3-319-08593-7_20.pdf",
            "Abstract": "Static Analysis, Software Security, Trusted Applications, Legacy software.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:dL6bBWYs_hoC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Editorial message: special track on ubiquitous computing",
            "Publication year": 2004,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/967900.968213",
            "Abstract": "Ubiquitous computing places humans in the center of environments saturated with computing and wireless communications capabilities, yet gracefully integrated, so that technology recedes in the background of everyday activities. The ubiquitous computing world then, is a world largely defined by applications. But such applications present an altogether new set of requirements. The special track on ubiquitous computing applications, first introduced in ACM SAC 2004, provides a forum for the discussion of all types of ubiquitous computing applications and related specialized infrastructures built for the deployment of targeted applications. Individual papers place applications within their use context and introduce novel and appropriate interaction paradigms while at the same time addressing related technical and business aspects and consequently identify novel opportunities or constraints.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:uJ-U7cs_P_0C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Beautiful architecture: leading thinkers reveal the hidden beauty in software design",
            "Publication year": 2009,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=h34pwy005nYC&oi=fnd&pg=PR5&dq=info:y8H9PrUTjhsJ:scholar.google.com&ots=YVjecEmUV3&sig=zZ5fx23E9Hc1ajxqVIfAAP2957s",
            "Abstract": "What are the ingredients of robust, elegant, flexible, and maintainable software architecture? Beautiful Architecture answers this question through a collection of intriguing essays from more than a dozen of today's leading software designers and architects. In each essay, contributors present a notable software architecture, and analyze what makes it innovative and ideal for its purpose. Some of the engineers in this book reveal how they developed a specific project, including decisions they faced and tradeoffs they made. Others take a step back to investigate how certain architectural aspects have influenced computing as a whole. With this book, you'll discover: How Facebook's architecture is the basis for a data-centric application ecosystem The effect of Xen's well-designed architecture on the way operating systems evolve How community processes within the KDE project help software architectures evolve from rough sketches to beautiful systems How creeping featurism has helped GNU Emacs gain unanticipated functionality The magic behind the Jikes RVM self-optimizable, self-hosting runtime Design choices and building blocks that made Tandem the choice platform in high-availability environments for over two decades Differences and similarities between object-oriented and functional architectural views How architectures can affect the software's evolution and the developers' engagement Go behind the scenes to learn what it takes to design elegant software architecture, and how it can shape the way you approach your own projects, with Beautiful Architecture.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:SeFeTyx0c_EC",
            "Publisher": "\" O'Reilly Media, Inc.\""
        },
        {
            "Title": "Serving Professionals",
            "Publication year": 2016,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2016/02/mso2016020004/13rRUxD9h3o",
            "Abstract": "Editor in Chief Diomidis Spinellis discusses what IEEE Software is doing to provide more practitioner-focused material.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:oJsGIWVkmIMC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Unix and Windows-Response",
            "Publication year": 2006,
            "Publication url": "https://scholar.google.com/scholar?cluster=14614702266227605935&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:HeT0ZceujKMC",
            "Publisher": "IEEE COMPUTER SOC"
        },
        {
            "Title": "Why computing parallels brain function",
            "Publication year": 2005,
            "Publication url": "https://www.spinellis.gr/pubs/letters/2005-CACM-Brain/html/Spi05m.pdf",
            "Abstract": "Why Computing Parallels Brain Function Page 1 COMMUNICATIONS OF THE ACM October \n2005/Vol. 48, No. 10 11 PETER J. DENNING\u2019S \u201cTHE Profession of IT\u201d column (\u201cThe Locality \nPrinciple,\u201d July 2005) invoked an anthropomorphic explanation for the prevalence of the locality \nprinciple in computational systems, observing that humans gather the most useful objects close \naround them to minimize the time and work required for their use, and that we\u2019ve transferred \nthese behaviors into the computational systems we design. A more intellectually satisfying \nexplanation might be that we are dealing with two parallel and independent evolutionary \ndesign paths. Trading some expensive high-quality space (fast memory) in order to gain time \nperformance is a sound engineering decision. It is therefore likely that evolution first adapted \nthe human brain by endowing it with limited but versatile short-term memory and large -\u2014\u2019\u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:ZzlSgRqYykMC",
            "Publisher": "ASSOC COMPUTING MACHINERY"
        },
        {
            "Title": "Clonos: Consistent Causal Recovery for Highly-Available Streaming Dataflows",
            "Publication year": 2021,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3448016.3457320",
            "Abstract": "Stream processing lies in the backbone of modern businesses, being employed for mission critical applications such as real-time fraud detection, car-trip fare calculations, traffic management, and stock trading. Large-scale applications are executed by scale-out stream processing systems on thousands of long-lived operators, which are subject to failures. Recovering from failures fast and consistently are both top priorities, yet they are only partly satisfied by existing fault tolerance methods due to the strong assumptions these make. In particular, prior solutions fail to address consistency in the presence of nondeterminism, such as calls to external services, asynchronous timers and processing-time windows. This paper describes Clonos, a fault tolerance approach that achieves fast, local operator recovery with exactly-once guarantees and high availability by instantly switching to passive standby operators. Clonos \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:xyKys1DtkaQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Software evolution: the lifetime of fine-grained elements",
            "Publication year": 2021,
            "Publication url": "https://peerj.com/articles/cs-372.pdf",
            "Abstract": "A model regarding the lifetime of individual source code lines or tokens can estimate maintenance effort, guide preventive maintenance, and, more broadly, identify factors that can improve the efficiency of software development. We present methods and tools that allow tracking of each line\u2019s or token\u2019s birth and death. Through them, we analyze 3.3 billion source code element lifetime events in 89 revision control repositories. Statistical analysis shows that code lines are durable, with a median lifespan of about 2.4 years, and that young lines are more likely to be modified or deleted, following a Weibull distribution with the associated hazard rate decreasing over time. This behavior appears to be independent from specific characteristics of lines or tokens, as we could not determine factors that influence significantly their longevity across projects. The programing language, and developer tenure and experience were not found to be significantly correlated with line or token longevity, while project size and project age showed only a slight correlation.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:6ftYtcnYaCAC",
            "Publisher": "PeerJ, Inc"
        },
        {
            "Title": "Organizational adoption of open source software",
            "Publication year": 2012,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121211002512",
            "Abstract": "Organizations and individuals can use open source software (OSS) for free, they can study its internal workings, and they can even fix it or modify it to make it suit their particular needs. These attributes make OSS an enticing technological choice for a company. Unfortunately, because most enterprises view technology as a proprietary differentiating element of their operation, little is known about the extent of OSS adoption in industry and the key drivers behind adoption decisions. In this article we examine factors and behaviors associated with the adoption of OSS and provide empirical findings through data gathered from the US Fortune-1000 companies. The data come from each company's web browsing and serving activities, gathered by sifting through more than 278 million web server log records and analyzing the results of thousands of network probes. We show that the adoption of OSS in large US companies \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:evX43VCCuoAC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Mining software engineering data from GitHub",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7965403/",
            "Abstract": "GitHub is the largest collaborative source code hosting site built on top of the Git version control system. The availability of a comprehensive API has made GitHub a target for many software engineering and online collaboration research efforts. In our work, we have discovered that a) obtaining data from GitHub is not trivial, b) the data may not be suitable for all types of research, and c) improper use can lead to biased results. In this tutorial, we analyze how data from GitHub can be used for large-scale, quantitative research, while avoiding common pitfalls. We use the GHTorrent dataset, a queryable offline mirror of the GitHub API data, to draw examples from and present pitfall avoidance strategies.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:_sH1KHQ1xKcC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Tools of the Trade-I Spy",
            "Publication year": 2007,
            "Publication url": "https://scholar.google.com/scholar?cluster=17172226954537478210&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:QvnCfHfiBIkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Under the Covers of IEEE Software",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8239946/",
            "Abstract": "Ecosystems that thrive are those whose members contribute more than they take away. Judging by the growth of its offerings and volunteers, IEEE Software is clearly such a case: over the past year, more than 1,500 people have contributed to it as authors, reviewers, editors, podcast hosts and guests, advisors, curators, and many other roles. Here, Editor in Chief Diomidis Spinellis discusses what makes Software tick and how can you participate in its community of volunteers.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:rbgNTKsR3fAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Code documentation",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5484109/",
            "Abstract": "The basic principles of good code documentation include the avoidance of repetition, the coexistence of code and its documentation, the documentation of all artifacts, and a preference for clear code and automated processes to explanatory documentation. Existing tools can help us by extracting documentation from specially formatted comments and by formatting code listed in documents. We can also automate the generation of bespoke documentation with a custom-made tool. When you document code, strive for completeness, consistency, effortless accessibility, and an automated low-overhead generation process.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ZHo1McVdvXMC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Large production line optimization using simulated annealing",
            "Publication year": 2000,
            "Publication url": "https://www.tandfonline.com/doi/abs/10.1080/002075400189284",
            "Abstract": "We present a robust generalized queuing network algorithm as an evaluative procedure for optimizing production line configurations using simulated annealing. We compare the results obtained with our algorithm to those of other studies and find some interesting similarities but also striking differences between them in the allocation of buffers, numbers of servers, and their service rates. While context dependent, these patterns of allocation are one of the most important insights which emerge in solving very long production lines. The patterns, however, are often counter-intuitive, which underscores the difficulty of the problem we address. The most interesting feature of our optimization procedure is its bounded execution time, which makes it viable for optimizing very long production line configurations. Based on the bounded execution time property, we have optimized configurations of up to 60 stations with 120 \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:YsMSGLbcyi4C",
            "Publisher": "Taylor & Francis Group"
        },
        {
            "Title": "A modest proposal for curing the public field phobia",
            "Publication year": 2002,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/510857.510868",
            "Abstract": "Field accessor methods have become a ubiquitous feature of object-oriented programming. The definition and use of such methods promote code bloat and an unnatural expression style. We propose a simple addition to the C++ language that can move the burden of providing abstraction support for fields from the programmer to the compiler.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:geHnlv5EZngC",
            "Publisher": "ACM"
        },
        {
            "Title": "Ubiquitous computing(UC)",
            "Publication year": 2004,
            "Publication url": "https://scholar.google.com/scholar?cluster=15954421530144507824&hl=en&oi=scholarr",
            "Abstract": "not available.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Z5m8FVwuT1cC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Measuring developer contribution from software repository data",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1370750.1370781",
            "Abstract": "Apart from source code, software infrastructures supporting agile and distributed software projects contain traces of developer activity that does not directly affect the product itself but is important for the development process. We propose a model that, by combining traditional contribution metrics with data mined from software repositories, can deliver accurate developer contribution measurements. The model creates clusters of similar projects to extract weights that are then applied to the actions a developer performed on project assets to extract a combined measurement of the developer's contribution. We are currently implementing the model in the context of a software quality monitoring system while we are also validating its components by means of questionnaires.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:eflP2zaiRacC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The exception handling riddle: An empirical study on the Android API",
            "Publication year": 2018,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121218300724",
            "Abstract": "We examine the use of the Java exception types in the Android platform\u2019s Application Programming Interface (API) reference documentation and their impact on the stability of Android applications. We develop a method that automatically assesses an API\u2019s quality regarding the exceptions listed in the API\u2019s documentation. We statically analyze ten versions of the Android platform\u2019s API (14\u201323) and 3539 Android applications to determine inconsistencies between exceptions that analysis can find in the source code and exceptions that are documented. We cross-check the analysis of the Android platform\u2019s API and applications with crash data from 901,274 application execution failures (crashes). We discover that almost 10% of the undocumented exceptions that static analysis can find in the Android platform\u2019s API source code manifest themselves in crashes. Additionally, we observe that 38% of the undocumented \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:sK9NQJKSZRcC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Commercial uses: Going functional on exotic trades",
            "Publication year": 2009,
            "Publication url": "https://www.cambridge.org/core/journals/journal-of-functional-programming/article/commercial-uses-going-functional-on-exotic-trades/C151F30DBC7391CE0E4D7091DD9784E9",
            "Abstract": "The Functional Payout Framework (fpf) is a Haskell application that uses an embedded domain-specific functional language to represent and process exotic financial derivatives. Whereas scripting languages for pricing exotic derivatives are common in banking, fpf uses multiple interpretations to not only price such trades, but also to analyse the scripts to provide lifecycle support and more. This paper discusses fpf in relation to the wider trading workflow and our experiences in using a functional language in such a system as both an implementation language and a domain-specific language.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:xtRiw3GOFMkC",
            "Publisher": "Cambridge University Press"
        },
        {
            "Title": "Do We Need Improved Code Quality Metrics?",
            "Publication year": 2020,
            "Publication url": "https://arxiv.org/abs/2012.12324",
            "Abstract": "The software development community has been using code quality metrics for the last five decades. Despite their wide adoption, code quality metrics have attracted a fair share of criticism. In this paper, first, we carry out a qualitative exploration by surveying software developers to gauge their opinions about current practices and potential gaps with the present set of metrics. We identify deficiencies including lack of soundness, i.e., the ability of a metric to capture a notion accurately as promised by the metric, lack of support for assessing software architecture quality, and insufficient support for assessing software testing and infrastructure. In the second part of the paper, we focus on one specific code quality metric-LCOM as a case study to explore opportunities towards improved metrics. We evaluate existing LCOM algorithms qualitatively and quantitatively to observe how closely they represent the concept of cohesion. In this pursuit, we first create eight diverse cases that any LCOM algorithm must cover and obtain their cohesion levels by a set of experienced developers and consider them as a ground truth. We show that the present set of LCOM algorithms do poorly w.r.t. these cases. To bridge the identified gap, we propose a new approach to compute LCOM and evaluate the new approach with the ground truth. We also show, using a quantitative analysis using more than 90 thousand types belonging to 261 high-quality Java repositories, the present set of methods paint a very inaccurate and misleading picture of class cohesion. We conclude that the current code quality metrics in use suffer from various deficiencies, presenting ample \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:ayFkJB35JP4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Beautiful Architecture",
            "Publication year": 2009,
            "Publication url": "https://scholar.google.com/scholar?cluster=12083108420287419635&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:47CO7rCGma4C",
            "Publisher": "O'Reilly"
        },
        {
            "Title": "Data mining in software engineering",
            "Publication year": 2011,
            "Publication url": "https://content.iospress.com/articles/intelligent-data-analysis/ida00475",
            "Abstract": "The increased availability of data created as part of the software development process allows us to apply novel analysis techniques on the data and use the results to guide the process's optimization. In this paper we describe various data sources and discuss the principles and techniques of data mining as applied on software engineering data. Data that can be mined is generated by most parts of the development process: requirements elicitation, development analysis, testing, debugging, and maintenance. Based on this classification we survey the mining approaches that have been used and categorize them according to the corresponding parts of the development process and the task they assist. Thus the survey provides researchers with a concise overview of data mining techniques applied to software engineering data, and aids practitioners on the selection of appropriate data mining techniques for their work.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:OU6Ihb5iCvQC",
            "Publisher": "IOS Press"
        },
        {
            "Title": "Coding for Numbers [Bookshelf]",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1377130/",
            "Abstract": "P rograms that perform sophisticated numerical calculations critically depend on the algorithms they use. Even if you obtain the correct requirements, come up with a brilliant architectural design, and write maintainable and efficient code, it\u2019s the underlying algorithm that will often make or break your application. The \u201cNumerical Recipes\u201d series of books distills in an accessible format the background theory, solid algorithms, and working programs for performing all but the most advanced numericalanalysis tasks needed for scientific computing and many engineering applications. The book series has grown from the 1988 original Fortran-based book to include separate versions for Fortran 77, Fortran 90 (dealing with parallel computing), C, and C++. The second edition of Numerical Recipes in C++: The Art of Scientific Computing is more than50 percent larger than the first and includes more than 300 algorithms.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:cTdzRpWJKHEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "PiCO QL: A software library for runtime interactive queries on program data",
            "Publication year": 2016,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S2352711016300176",
            "Abstract": "Pico ql is an open source c/c++ software whose scientific scope is real-time interactive analysis of in-memory data through sql queries. It exposes a relational view of a system\u2019s or application\u2019s data structures, which is queryable through sql. While the application or system is executing, users can input queries through a web-based interface or issue web service requests. Queries execute on the live data structures through the respective relational views. pico ql makes a good candidate for ad-hoc data analysis in applications and for diagnostics in systems settings. Applications of pico ql include the Linux kernel, the Valgrind instrumentation framework, a gis application, a virtual real-time observatory of stellar objects, and a source code analyser.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:7eciy3tyNvQC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Reading, Writing, and Code: The key to writing readable code is developing good coding style.",
            "Publication year": 2003,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/957717.957782",
            "Abstract": "Forty years ago, when computer programming was an individual experience, the need for easily readable code wasn\u2019t on any priority list. Today, however, programming usually is a team-based activity, and writing code that others can easily decipher has become a necessity. Creating and developing readable code is not as easy as it sounds.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:RHpTSmoSYBkC",
            "Publisher": "ACM"
        },
        {
            "Title": "Introductions",
            "Publication year": 2015,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2015/04/mso2015040003/13rRUxBa59V",
            "Abstract": "Editor in Chief Diomidis Spinellis introduces 12 editorial board members, four advisory board members, the initiatives team, and two magazine departments.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:gyFZhc6YOh8C",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Securing Legacy Code with the TRACER Platform",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2645791.2645796",
            "Abstract": "Software vulnerabilities can severely affect an organization's infrastructure and cause significant financial damage to it. A number of tools and techniques are available for performing vulnerability detection in software written in various programming platforms, in a pursuit to mitigate such defects. However, since the requirements for running such tools and the formats in which they store and present their results vary wildly, it is difficult to utilize many of them in the scope of a project. By simplifying the process of running a variety of vulnerability detectors and collecting their results in an efficient, automated manner during development, the task of tracking security defects throughout the evolution history of software projects is bolstered. In this paper we present tracer, a software framework and platform to support the development of more secure applications by constantly monitoring software projects for vulnerabilities \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:5MWWCdJses0C",
            "Publisher": "Unknown"
        },
        {
            "Title": "The MoR-Trust distributed trust management system: Design and simulation results",
            "Publication year": 2007,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1571066107002988",
            "Abstract": "MoR-Trust is a purely decentralized peer-to-peer trust management system, targeted towards networks and applications supporting transactions or collaborations of a quantitative nature. MoR-Trust is based on the notion of expressing trust in terms of monetary units, thus directly coupling the trust estimates circulated in the network with the values of the transactions taking place and their outcomes. We have validated our design decisions and algorithms through simulation. The results indicate that our system converges towards a small error in the trust estimates distributed throughout the network.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:JV2RwH3_ST0C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Static program analysis for Java Card applets",
            "Publication year": 2008,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-540-85893-5_2",
            "Abstract": "The Java Card API provides a framework of classes and interfaces that hides the details of the underlying smart card interface, thus relieving developers from going through the swamps of microcontroller programming. This allows application developers to concentrate most of their effort on the details of application, assuming proper use of the Java Card API calls regarding (i) the correctness of the methods\u2019 invocation targets and their arguments and (ii) temporal safety, i.e. the requirement that certain method calls have to be used in certain orders. Several characteristics of the Java Card applets and their multiple-entry-point program structure make it possible for a potentially unhandled exception to reach the invoked entry point. This contingency opens a possibility to leave the applet in an unpredictable state that is potentially dangerous for the application\u2019s security. Our work introduces automatic static \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:BrmTIyaxlBUC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Code quality: the open source perspective",
            "Publication year": 2006,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=vEN-ckcdtCwC&oi=fnd&pg=PA1&dq=info:OgiZz8lwvnoJ:scholar.google.com&ots=sJ2q76-RvH&sig=ySMmpLA-iPgd4cDjQxxhDJcOaDo",
            "Abstract": "Page 26: How can I avoid off-by-one errors? Page 143: Are Trojan Horse attacks for real? Page 158: Where should I look when my application can't handle its workload? Page 256: How can I detect memory leaks? Page 309: How do I target my application to international markets? Page 394: How should I name my code's identifiers? Page 441: How can I find and improve the code coverage of my tests? Diomidis Spinellis' first book, Code Reading, showed programmers how to understand and modify key functional properties of software. Code Quality focuses on non-functional properties, demonstrating how to meet such critical requirements as reliability, security, portability, and maintainability, as well as efficiency in time and space. Spinellis draws on hundreds of examples from open source projects--such as the Apache web and application servers, the BSD Unix systems, and the HSQLDB Java database--to illustrate concepts and techniques that every professional software developer will be able to appreciate and apply immediately. Complete files for the open source code illustrated in this book are available online at: http://www. spinellis. gr/codequality/",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:zYLM7Y9cAGgC",
            "Publisher": "Adobe Press"
        },
        {
            "Title": "Tool writing: a forgotten art?(software tools)",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1463199/",
            "Abstract": "The author decided to create a tool to fit the needs. In the process, the author discovered something important: writing stand-alone tools that you can combine efficiently with others to handle more demanding tasks appears to be becoming a forgotten art. The author created a metric tool, named ckjm, using the design principles the author outlined earlier. The tool operates on a list of compiled Java classes specified as arguments or read from its standard input. It then prints to its standard output a single line for each class, containing the class name and the six metrics values. Ant Java-based build tool and adding an XML output option.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:YFjsv_pBGBYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "ACM SIGSOFT empirical standards",
            "Publication year": 2020,
            "Publication url": "https://spiral.imperial.ac.uk/handle/10044/1/83790",
            "Abstract": "Empirical Standards are brief public document that communicate expectations for a specific kind of study (e.g. a questionnaire survey). The ACM SIGSOFT Paper and Peer Review Quality Initiative generated empirical standards for common research methods in software engineering. These living documents, which should be continuously revised to reflect evolving consensus around research best practices, can be used to make peer review more transparent, structured, harmonious and fair.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:p2vkXumR6kMC",
            "Publisher": "arXiv"
        },
        {
            "Title": "Open source licensing across package dependencies",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5600285/",
            "Abstract": "Licensing dependencies among open source software (oss) packages reveal a lot about software compatibility relationships and the practicalities of oss licensing. There is, however, limited information on these in the literature. In this paper, we discuss various aspects of oss licensing, and we present an empirical study on FreeBSD ports collections concerning their licensing dependencies, in an attempt to identify specific patterns. Our results highlight different types of dependencies, that could be used to explain, or even guide the license selection process of oss projects.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:tS2w5q8j5-wC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Don't install software by hand",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6265084/",
            "Abstract": "An IT system's setup and configuration affects developers mainly due to the proliferation and complexity of Internet-facing systems. Fortunately, we can control and conquer this complexity by adopting IT-system configuration management tools. By stipulating that all modifications to a system's configuration can only be performed through its configuration management system and by treating the system's rules as code, an organization ensures that the IT systems it delivers to its clients are not inscrutable monoliths that just happen to work but documented modular engines that work by design.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ClCfbGk0d_YC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Data-oriented differential testing of object-relational mapping systems",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9401963/",
            "Abstract": "We introduce, what is to the best of our knowledge, the first approach for systematically testing Object-Relational Mapping (ORM) systems. Our approach leverages differential testing to establish a test oracle for ORM-specific bugs. Specifically, we first generate random relational database schemas, set up the respective databases, and then, we query these databases using the APIs of the ORM systems under test. To tackle the challenge that ORMs lack a common input language, we generate queries written in an abstract query language. These abstract queries are translated into concrete, executable ORM queries, which are ultimately used to differentially test the correctness of target implementations. The effectiveness of our method heavily relies on the data inserted to the underlying databases. Therefore, we employ a solver-based approach for producing targeted database records with respect to the constraints \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:FHdxMmblzioC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Analyzing Programming Languages' Energy Consumption: An Empirical Study",
            "Publication year": 2017,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3139367.3139418",
            "Abstract": "Motivation: The energy efficiency of it-related products, from the software perspective, has gained vast popularity the recent years and paved a new emerging research field. However, there is limited number of research works regarding the energy consumption of relatively small programming tasks. This knowledge is critical to be known especially in cases where millions of small tasks are running in parallel on multiple devices all around the globe.Goal: In this preliminary study, we aim to identify energy implications of small, independent tasks developed in different programming languages; compiled, semi-compiled, and interpreted ones.Method: To achieve our purpose, we collected, refined, compared, and analyzed a number of implemented tasks from Rosetta Code, that is a publicly available Repository for programming chrestomathy.Results: Our analysis shows that among compiled programming languages \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:8wCixH_E2vEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Identifying Bugs in Make and JVM-Oriented Builds",
            "Publication year": 2020,
            "Publication url": "https://arxiv.org/abs/2005.06881",
            "Abstract": "Incremental and parallel builds are crucial features of modern build systems. Parallelism enables fast builds by running independent tasks simultaneously, while incrementality saves time and computing resources by processing the build operations that were affected by a particular code change. Writing build definitions that lead to error-free incremental and parallel builds is a challenging task. This is mainly because developers are often unable to predict the effects of build operations on the file system and how different build operations interact with each other. Faulty build scripts may seriously degrade the reliability of automated builds, as they cause build failures, and non-deterministic and incorrect build results. To reason about arbitrary build executions, we present buildfs, a generally-applicable model that takes into account the specification (as declared in build scripts) and the actual behavior (low-level file system operation) of build operations. We then formally define different types of faults related to incremental and parallel builds in terms of the conditions under which a file system operation violates the specification of a build operation. Our testing approach, which relies on the proposed model, analyzes the execution of single full build, translates it into buildfs, and uncovers faults by checking for corresponding violations. We evaluate the effectiveness, efficiency, and applicability of our approach by examining hundreds of Make and Gradle projects. Notably, our method is the first to handle Java-oriented build systems. The results indicate that our approach is (1) able to uncover several important issues (245 issues found in 45 open-source \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:zvUQpHOXRJ8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Fortifying Applications Against Xpath Injection Attacks.",
            "Publication year": 2009,
            "Publication url": "https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1100&context=mcis2009",
            "Abstract": "Code injection derives from a software vulnerability that allows a malicious user to inject custom code into the server engine. In recent years, there have been a great number of such exploits targeting web applications. In this paper we propose an approach that prevents a specific kind of code injection attacks known as xpath injection in a novel way. To detect an attack, our scheme uses location-specific identifiers to validate the executable xpath code. These identifiers represent all the unique fragments of this code along with their call sites within the application.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:pyW8ca7W8N0C",
            "Publisher": "Unknown"
        },
        {
            "Title": "How to select open source components",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8909944/",
            "Abstract": "With millions of open source projects available on forges such as GitHub, it may be difficult to select those that best match your requirements. Examining each project's product and development process can help you confidently select the open source projects required for your work.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:u2ZU9_Z9f7QC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Coding for Numbers [Bookshelf]",
            "Publication year": 2005,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2005/01/01377130/13rRUxCRFUq",
            "Abstract": "94, IEEE SOFTWARE, Published by the IEEE Computer Society, 0740-7459/05/$20.00\u00a9 2005 IEEE, bookshelf, Editor: Warren Keuffel,\u25a0, wkeuffel@ computer. org, P, rograms that perform sophisticated, numerical calculations critically, depend on the algorithms they use. Even, if you obtain the correct requirements,, come up with a brilliant architectural, design, and write maintainable and, efficient code, it\u2019s the underlying algorithm that, will often make or break your application. The,\u201cNumerical Recipes\u201d series of books distills in, an accessible format the background theory,, solid algorithms, and working programs for, performing all but the most advanced, numericalanalysis tasks needed for scientific computing, and many engineering applications., The book series has grown from the 1988, original Fortran-based book to include, separate versions for Fortran 77, Fortran 90,(dealing with parallel computing), C, and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:5bGIVMdsOr0C",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Measuring developer contribution from software repository data",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1370750.1370781",
            "Abstract": "Apart from source code, software infrastructures supporting agile and distributed software projects contain traces of developer activity that does not directly affect the product itself but is important for the development process. We propose a model that, by combining traditional contribution metrics with data mined from software repositories, can deliver accurate developer contribution measurements. The model creates clusters of similar projects to extract weights that are then applied to the actions a developer performed on project assets to extract a combined measurement of the developer's contribution. We are currently implementing the model in the context of a software quality monitoring system while we are also validating its components by means of questionnaires.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:aqlVkmm33-oC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Deploying a Secure Cyberbazaar by adding Trust on Commercial Transactions",
            "Publication year": 2002,
            "Publication url": "https://www.spinellis.gr/pubs/jrnl/2002-eJETA-Cosacc/html/cyberbazaar.pdf",
            "Abstract": "Traditional business practice depends on trust relations between the transacting parties. One of the most important aspects of this trust is the quality of the offered services or products. The Web currently constitutes an enabler for Electronic Commerce, providing a global transaction platform that does not require physical presence. However, transferring trust from the physical world to the electronic one is a process that requires a trust infrastructure to be provided by the electronic world. We believe that current infrastructure models based on Trusted Third Parties can be enhanced. We introduce the notion of Digital Seals and we provide a mechanism for transferring the trust placed by users to companies in the physical world, to the electronic one.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:j8SEvjWlNXcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Manufacturing Systems: Types and Modeling",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_1",
            "Abstract": "In this chapter we give a brief overview of the significant technological changes which have occurred since the 1950s. The importance of information technology in manufacturing systems and the need for the designer to have performance measures other than throughput in mind during the design process is treated. A presentation of some areas in mathematical analysis, which are important for our work, is contained in Appendix A. In Section 1.1, the evolution and classification of manufacturing systems is covered. Section 1.2 treats mathematical models and the modeling process. Section 1.3 attempts a general classification of manufacturing systems with a view to showing the inherent complexities. Section 1.4 discusses models in the context of manufacturing systems, whereas Section 1.5 treats methods of analysis of such models. Finally, Section 1.6 presents measures of performance in manufacturing \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:p__nRnzSRKYC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Documented Unix facilities over 48 years",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3196398.3196476",
            "Abstract": "The documented Unix facilities data set provides the details regarding the evolution of 15 596 unique facilities through 93 versions of Unix over a period of 48 years. It is based on the manual transcription of early scanned documents, on the curation of text obtained through optical character recognition, and on the automatic extraction of data from code available on the Unix History Repository. The data are categorized into user commands, system calls, C library functions, devices and special files, file formats and conventions, games et. al., miscellanea, system maintenance procedures and commands, and system kernel interfaces. A timeline view allows the visualization of the evolution across releases. The data can be used for empirical research regarding API evolution, system design, as well as technology adoption and trends.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:r0s_y6AIs4IC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Reflection as a mechanism for software integrity verification",
            "Publication year": 2000,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/353323.353383",
            "Abstract": "The integrity verification of a device's controlling software is an important aspect of many emerging information appliances. We propose the use of reflection, whereby the software is able to examine its own operation, in conjunction with cryptographic hashes as a basis for developing a suitable software verification protocol. For more demanding applications meta-reflective techniques can be used to thwart attacks based on device emulation strategies. We demonstrate how our approach can be used to increase the security of mobile phones, devices for the delivery of digital content, and smartcards.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:0EnyYjriUFMC",
            "Publisher": "ACM"
        },
        {
            "Title": "First, Do No Harm",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6898723/",
            "Abstract": "When we maintain existing code, we must be very careful to avoid breaking or degrading the system we're working on. During development, we can minimize problems through reviews, adherence to style rules, defensive programming, maintenance of backward compatibility, and the preservation of architectural properties. Thorough testing at all levels can catch many issues before they reach the deployment stage. Finally, during deployment, a phased rollout, a back-off plan, and careful planning can minimize the occurrence of catastrophic failures. The Web extra at http://youtu.be/pifgzfFXanE is an audio podcast of the Tools of the Trade column in which author Diomidis Spinellis discusses how we must be very careful to avoid breaking or degrading the system while working to maintain existing code.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:wNiDLpJVIZAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Reflections on trusting trust revisited",
            "Publication year": 2003,
            "Publication url": "https://dl.acm.org/doi/pdf/10.1145/777313.777347",
            "Abstract": "Reflections on trusting trust revisited Page 1 112 June 2003/Vol. 46, No. 6 \nCOMMUNICATIONS OF THE ACM Security is often described as a weak-link phe- nomenon. \nKen Thompson in his 1983 Turing Award Lecture [3] described how a compiler could be \nmodified to plant a Trojan horse into the system\u2019s login authentication program so that it \nwould accept a known password. In addition, the C compiler could be altered to propagate \nthis change when it was recompiled from its (unmodified) source code. The system \nThompson described was seriously compromised and could never be trusted: even a \nrecompilation from clean source code would yield a Trojaned compiler and login program. \nTwenty years later we find efforts such as the Trusted Computing Group (the retooled \nTrusted Computing Platform Alliance, a 190-company industry work group), Intel\u2019s LaGrande, \nand Microsoft\u2019s NGSCB (Next Generation Secure , [\u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:hMod-77fHWUC",
            "Publisher": "ACM"
        },
        {
            "Title": "The decay and failures of web references",
            "Publication year": 2003,
            "Publication url": "https://dl.acm.org/doi/fullHtml/10.1145/602421.602422",
            "Abstract": "Attempting to determine how quickly archival information becomes outdated.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:d1gkVwhDpl0C",
            "Publisher": "ACM"
        },
        {
            "Title": "Charting the API minefield using software telemetry data",
            "Publication year": 2015,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-014-9343-7?sa_campaign=email/event/articleAuthor/onlineFirst&error=cookies_not_supported&error=cookies_not_supported&code=fb82f934-e812-4bd3-b2fe-2877f9cc93b8&code=d038e42f-ba4d-432a-a502-abfbacedf0e0",
            "Abstract": "Programs draw significant parts of their functionality through the use of Application Programming Interfaces (API s). Apart from the way developers incorporate API s in their software, the stability of these programs depends on the design and implementation of the API s. In this work, we report how we used software telemetry data to analyze the causes of API failures in Android applications. Specifically, we got 4.9 gb worth of crash data that thousands of applications sent to a centralized crash report management service. We processed that data to extract approximately a million stack traces, stitching together parts of chained exceptions, and established heuristic rules to draw the border between applications and the API calls. We examined a set of more than a half million stack traces associated with risky API calls to map the space of the most common application failure reasons. Our findings show that the top ones \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:0KrOiVmbFBYC",
            "Publisher": "Springer US"
        },
        {
            "Title": "Fewer Dead Trees, More Engagement",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7030241/",
            "Abstract": "New IEEE Software editor in chief Diomidis Spinellis discusses the IEEE Computer Society's switch to digital as the primary delivery option for its publication. He also outlines his vision for Software's future and calls for volunteer help.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:53CL4OiWbn0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Implementing regular cash with blind fixed-value electronic coins",
            "Publication year": 2007,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0920548906000687",
            "Abstract": "We propose a generic framework for the development of an off-line peer-to-peer electronic payment system with fixed-value electronic coins. The proposed scheme simulates the issuance, circulation and characteristics of conventional cash and satisfies important security, privacy and usability requirements, offering a comparative advantage over other existing solutions. We exploit the strong security characteristics of a typical tamperproof device such as a smart card, and the trust services provided by a Public Key Infrastructure. The electronic coins are fixed, signed data structures that may be distributed, stored and processed by external applications only in their blind (encrypted) form. Non-divisibility is counterbalanced by the low complexity of the proposed solution, which enables the efficient exchange of multiple coins per transaction.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:RGFaLdJalmkC",
            "Publisher": "North-Holland"
        },
        {
            "Title": "Countering code injection attacks: a unified approach",
            "Publication year": 2011,
            "Publication url": "https://www.emerald.com/insight/content/doi/10.1108/09685221111153555/full/html",
            "Abstract": "The purpose of this paper is to propose a generic approach that prevents a specific class of code injection attacks (CIAs) in a novel way.To defend against CIAs this approach involves detecting attacks by using location\u2010specific signatures to validate code statements. The signatures are unique identifiers that represent specific characteristics of a statement's execution. The key property that differentiates the scheme presented in this paper is that these characteristics do not depend entirely on the code statement, but also take into account elements from its execution context.The approach was applied successfully to defend against attacks targeting structured query language (SQL), XML Path Language and JavaScript with positive results.Despite many countermeasures that have been proposed the number of CIAs has been increasing \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:SdhP9T11ey4C",
            "Publisher": "Emerald Group Publishing Limited"
        },
        {
            "Title": "The way we program",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4548413/",
            "Abstract": "Code lacking comments, meaningful identifiers, and correct indentation is a nightmare. By studying 30 programs of various sizes to measure what percentage of their source code consisted of comments, meaningful identifiers, and whitespace, the author found that more than half of the code served developers rather than the compiler. The relative composition of the three elements was equally distributed and didn't appear to vary with project size. This finding substantiates the view of programming as an art form and the importance of source code in the software development process. Therefore we need to focus management's attention on code and its developers.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:J_g5lzvAfSwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Version control systems",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1504674/",
            "Abstract": "Sane programmers don't write production code without the help of an editor and an interpreter or a compiler, yet the author has seen many software projects limping along without using a version control system. We can explain this contrast if we think in terms of the increased start-up costs and delayed gratification associated with adopting a VCS. We humans typically discount the future, and therefore implementing version control in a project appears to be a fight against human nature. It's true that you can't beat the productivity boost that compilers and editors provide, but four decades after punched-card programming in assembly language has gone out of fashion, we must now look elsewhere for our next efficiency gains. And if you or your project isn't using a VCS, adopting one might well be the single most important tooling improvement you can undertake.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:maZDTaKrznsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Git",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6188603/",
            "Abstract": "Git is a distributed revision control system available on all mainstream development platforms through a free software license. An important difference of git over its older ancestors is that it elevates the software's revisions to first-class citizens. Developers care deeply about software revisions, and git supports this by giving each developer a complete private copy of the software repository and numerous ways to manage revisions within its context. The ability to associate a local repository with numerous remote ones allows developers and their managers to build a variety of interesting distributed workflows, most of which are impossible to run on a traditional centralized version control system. The local repository also makes git responsive, easy to setup, and able to operate without Internet connectivity. GitHub is a git repository hosting provider that simplifies many repository management tasks through a Web-based \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:xtoqd-5pKcoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers",
            "Publication year": 2021,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3485500",
            "Abstract": "Despite the substantial progress in compiler testing, research endeavors have mainly focused on detecting compiler crashes and subtle miscompilations caused by bugs in the implementation of compiler optimizations. Surprisingly, this growing body of work neglects other compiler components, most notably the front-end. In statically-typed programming languages with rich and expressive type systems and modern features, such as type inference or a mix of object-oriented with functional programming features, the process of static typing in compiler front-ends is complicated by a high-density of bugs. Such bugs can lead to the acceptance of incorrect programs (breaking code portability or the type system's soundness), the rejection of correct (e.g. well-typed) programs, and the reporting of misleading errors and warnings.  We conduct, what is to the best of our knowledge, the first empirical study for understanding \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:Zk83zdSX4-UC",
            "Publisher": "ACM"
        },
        {
            "Title": "User interface evaluation of interactive TV: a media studies perspective",
            "Publication year": 2006,
            "Publication url": "https://link.springer.com/article/10.1007/s10209-006-0032-1",
            "Abstract": "A diverse user population employs interactive TV (ITV) applications in a leisure context for entertainment purposes. The traditional user interface (UI) evaluation paradigm involving efficiency and task completion may not be adequate for the assessment of such applications. In this paper, we argue that unless ITV applications are evaluated with consideration for the ordinary TV viewer, they are going to be appropriate only for the computer literate user, thus excluding the TV audience from easy access to information society services. The field of media studies has accumulated an extensive theory of TV and associated methods. We applied the corresponding findings in the domain of ITV to examine how universal access to ITV applications can be obtained. By combining these results with emerging affective quality theories for interactive products, we propose a UI evaluation framework for ITV applications.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Se3iqnhoufwC",
            "Publisher": "Springer-Verlag"
        },
        {
            "Title": "An empirical investigation on the relationship between design and architecture smells",
            "Publication year": 2020,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-020-09847-2",
            "Abstract": "Architecture of a software system represents the key design decisions and therefore its quality plays an important role to keep the software maintainable. Code smells are indicators of quality issues in a software system and are classified based on their granularity, scope, and impact. Despite a plethora of existing work on smells, a detailed exploration of architecture smells, their characteristics, and their relationships with smells in other granularities is missing.The paper aims to study architecture smells characteristics, investigate correlation, collocation, and causation relationships between architecture and design smells.We implement smell detection support for seven architecture smells. We mine 3 073 open-source repositories containing more than 118 million lines of C# code and empirically investigate the relationships between seven architecture and 19 design smells \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:W5d1EEiaRJMC",
            "Publisher": "Springer US"
        },
        {
            "Title": "Fatal injection: a survey of modern code injection attack countermeasures",
            "Publication year": 2017,
            "Publication url": "https://peerj.com/articles/cs-136/",
            "Abstract": "With a code injection attack (CIA) an attacker can introduce malicious code into a computer program or system that fails to properly encode data that comes from an untrusted source. A CIA can have different forms depending on the execution context of the application and the location of the programming flaw that leads to the attack. Currently, CIAs are considered one of the most damaging classes of application attacks since they can severely affect an organisation\u2019s infrastructure and cause financial and reputational damage to it. In this paper we examine and categorize the countermeasures developed to detect the various attack forms. In particular, we identify two distinct categories. The first incorporates static program analysis tools used to eliminate flaws that can lead to such attacks during the development of the system. The second involves the use of dynamic detection safeguards that prevent code injection attacks while the system is in production mode. Our analysis is based on nonfunctional characteristics that are considered critical when creating security mechanisms. Such characteristics involve usability, overhead, implementation dependencies, false positives and false negatives. Our categorization and analysis can help both researchers and practitioners either to develop novel approaches, or use the appropriate mechanisms according to their needs.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:9tJtKg94vZsC",
            "Publisher": "PeerJ Inc."
        },
        {
            "Title": "UML everywhere",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5551018/",
            "Abstract": "A standardized and widely used diagramming notation is a sign of a profession's maturity. It simplifies the life of the diverse group of people who read the drawings, it improves the quality of the drawings, and it benefits the profession through network effects. In the field of software engineering we've got a long way to travel. Every one of us should make a concerted effort to use the same graphic notation for drawing all our diagrams. We should adopt the graphic notation techniques of Unified Modeling Language (UML).",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:UxriW0iASnsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Tricky Telecoms",
            "Publication year": 2020,
            "Publication url": "https://research.tudelft.nl/en/publications/tricky-telecoms",
            "Abstract": "Tricky Telecoms \u2014 TU Delft Research Portal Skip to main navigation Skip to search Skip to \nmain content TU Delft Research Portal Logo Help & FAQ Home Researchers Research \nUnits Research output Activities Datasets Press / Media Prizes Projects Search by expertise, \nname or affiliation Tricky Telecoms Diomidis Spinellis Research output: Contribution to \njournal \u203a Letter \u203a Popular Overview Original language English Pages (from-to) 15 Number of \npages 1 Journal De Economist Volume 434 Issue number 9184 Publication status \nPublished - 1 Mar 2020 Externally published Yes Access to Document https://www.economist.com/letters/2020/03/07/letters-to-the-editor \nCite this APA Author BIBTEX Harvard Standard RIS Vancouver Spinellis, D. (2020). Tricky \nTelecoms. De Economist, 434(9184), 15. https://www.economist.com/letters/2020/03/07/letters-to-the-editor \nSpinellis, Diomidis. / Tricky Telecoms. In: De Economist. '\u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:JLWRInN_eHMC",
            "Publisher": "Springer"
        },
        {
            "Title": "Securing the network client",
            "Publication year": 2002,
            "Publication url": "https://www.spinellis.gr/pubs/conf/2002-INC-Sec/html/inc2002.pdf",
            "Abstract": "We enumerate and compare a number of security-enabling architectures for network clients. These architectures, either proposed as methodologies or currently implemented in software and/or hardware, are capable of protecting the client\u2019s software integrity and its environment. The most important methodologies include the reference monitor model, firewalls and virtual machines. Software implementations are the Java sandbox and the code signing concept. Hardware that can be used includes smart cards. We describe their most important features and provide a review and comparative study based on a number of criteria. We believe that ongoing research can empower these mechanisms for protecting network clients in a more effective way.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:5Ul4iDaHHb8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "A survey of peer-to-peer content distribution technologies",
            "Publication year": 2004,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1041680.1041681",
            "Abstract": "Distributed computer architectures labeled \"peer-to-peer\" are designed for the sharing of computer resources (content, storage, CPU cycles) by direct exchange, rather than requiring the intermediation or support of a centralized server or authority. Peer-to-peer architectures are characterized by their ability to adapt to failures and accommodate transient populations of nodes while maintaining acceptable connectivity and performance.Content distribution is an important peer-to-peer application on the Internet that has received considerable research attention. Content distribution applications typically allow personal computers to function in a coordinated manner as a distributed storage medium by contributing, searching, and obtaining digital content.In this survey, we propose a framework for analyzing peer-to-peer content distribution technologies. Our approach focuses on nonfunctional characteristics such as \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:u5HHmVD_uO8C",
            "Publisher": "ACM"
        },
        {
            "Title": "Detecting Missing Dependencies and Notifiers in Puppet Programs",
            "Publication year": 2019,
            "Publication url": "https://arxiv.org/abs/1905.11070",
            "Abstract": "Puppet is a popular computer system configuration management tool. It provides abstractions that enable administrators to setup their computer systems declaratively. Its use suffers from two potential pitfalls. First, if ordering constraints are not specified whenever an abstraction depends on another, the non-deterministic application of abstractions can lead to race conditions. Second, if a service is not tied to its resources through notification constructs, the system may operate in a stale state whenever a resource gets modified. Such faults can degrade a computing infrastructure's availability and functionality. We have developed an approach that identifies these issues through the analysis of a Puppet program and its system call trace. Specifically, we present a formal model for traces, which allows us to capture the interactions of Puppet abstractions with the file system. By analyzing these interactions we identify (1) abstractions that are related to each other (e.g., operate on the same file), and (2) abstractions that should act as notifiers so that changes are correctly propagated. We then check the relationships from the trace's analysis against the program's dependency graph: a representation containing all the ordering constraints and notifications declared in the program. If a mismatch is detected, our system reports a potential fault. We have evaluated our method on a large set of Puppet modules, and discovered 57 previously unknown issues in 30 of them. Benchmarking further shows that our approach can analyze in minutes real-world configurations with a magnitude measured in thousands of lines and millions of system calls.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Fd3FjPIBfbkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Being a software developer",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8405631/",
            "Abstract": "If you want to be a professional developer, you'll need to continuously invest substantial time to acquire highly specialized knowledge and develop diverse cognitive and interpersonal skills. A university can kindle your passion and provide incentives to expand your horizons, and your employer may support specialized training. But in the end, becoming a professional software developer is your decision and responsibility.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:P0sSKRC7TM0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "The collaborative organization of knowledge",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/fullHtml/10.1145/1378704.1378720",
            "Abstract": "Why Wikipedia's remarkable growth is sustainable.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:qxL8FJ1GzNcC",
            "Publisher": "ACM"
        },
        {
            "Title": "Avoiding the top 10 software security design flaws",
            "Publication year": 2014,
            "Publication url": "https://www.intgovforum.org/cms/igf2016/uploads/proposal_background_paper/Top-10-Flaws.pdf",
            "Abstract": "Most software that has been built and released typically comes with a set of defects\u2014implementation bugs and design flaws. To date, there has been a larger focus on finding implementation bugs rather than on identifying flaws.In 2014, the IEEE Computer Society, the leading association for computing professionals, launched a cybersecurity initiative with the aim of expanding and escalating its ongoing involvement in the field of cybersecurity. The first step for the initiative was to launch the IEEE Computer Society Center for Secure Design. The Center intends to shift some of the focus in security from finding bugs to identifying common design flaws in the hope that software architects can learn from others\u2019 mistakes. To achieve this goal, the Center brought people together from different organizations at a workshop in early 2014.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:xEh6bupSuykC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Security architectures for network clients",
            "Publication year": 2003,
            "Publication url": "https://www.emerald.com/insight/content/doi/10.1108/09685220310468664/full/html",
            "Abstract": "Enumerates and compares a number of security\u2010enabling architectures for network clients. These architectures, either proposed as methodologies or currently implemented in software and/or hardware, are capable of protecting the client\u2019s software integrity and its environment. The most important methodologies include the reference monitor model, firewalls, and virtual machines. Software implementations are the Java Sandbox, and the code signing concept. Hardware that can be used includes smart cards, and the TCPA/Palladium security initiative. Describes their most important features and provide a review and comparative study based on a number of criteria. Believes that ongoing research can empower these mechanisms for protecting network clients in a more effective way.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:O3NaXMp0MMsC",
            "Publisher": "MCB UP Ltd"
        },
        {
            "Title": "How Abundance Changes Software Engineering",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7927929/",
            "Abstract": "The abundance of processing power is changing the nature of software engineering. By reducing the cost of failure, abundance changes how developers use computing technologies. Also, abundance changes the developer's role by moving the focus from technology to management. This article also contains an erratum. In \"App Store 2.0: From Crowdsourced Information to Actionable Feedback in Mobile Ecosystems\" (DOI: 10.1109/MS.2017.46) from the Mar./Apr. 2017 issue, in the fifth line of the second column on p. 83, \"see sia\" should be \"see Figure 2a.\"",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:yDGX1xMBWXcC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Stochastic algorithms for buffer allocation in reliable production lines",
            "Publication year": 2000,
            "Publication url": "https://www.hindawi.com/journals/mpe/2000/350598/",
            "Abstract": "The allocation of buffers between workstations is a major optimization problem faced by manufacturing systems designers. It entails the determination of optimal buffer allocation plans in production lines with the objective of maximizing their throughput. We present and compare two stochastic approaches for solving the buffer allocation problem in large reliable production lines. The allocation plan is calculated subject to a given amount of total buffer slots using simulated annealing and genetic algorithms. The throughput is calculated utilizing a decomposition method.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:4TOpqqG69KYC",
            "Publisher": "Hindawi"
        },
        {
            "Title": "Reliable identification of bounded-length viruses is NP-complete",
            "Publication year": 2003,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1159781/",
            "Abstract": "A virus is a program that replicates itself by copying its code into other files. A common virus-protection mechanism involves scanning files to detect code patterns of known viruses. We prove that the problem of reliably identifying a bounded-length mutating virus is NP-complete by showing that a virus detector for a certain virus strain can be used to solve the satisfiability problem. The implication of this result is that virus identification methods will be facing increasing strain as virus mutation and hosting strategies mature, and that different protection methods should be developed and employed.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:qjMakFHDy7sC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Fundamental limitations in domain-specific language evolution",
            "Publication year": 2009,
            "Publication url": "https://scholar.google.com/scholar?cluster=16013471129680842171&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Tiz5es2fbqcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Countering SQL injection attacks with a database driver",
            "Publication year": 2007,
            "Publication url": "http://pci2007.upatras.gr/proceedings/PCI2007_volB/B_105-115_Mitropoulos.pdf",
            "Abstract": "SQL injection attacks involve the construction of application input data that will result in the execution of malicious SQL statements. Many web applications today, are prone to SQL injection attacks. This paper proposes a novel methodology of preventing this kind of attacks by placing a secure database driver between the application and its underlying relational database management system. To detect an attack, the driver creates query blueprints that are then used to distinguish between injected and legitimate queries. The driver depends neither on the application nor the RDBMS and can be easily retrofitted to any system. Finally we have developed a tool, SDriver, that implements our technique and used it on several web applications with positive results.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:dfsIfKJdRG4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Open Problems and Challenges in Software Analytics",
            "Publication year": 2014,
            "Publication url": "https://research.birmingham.ac.uk/portal/en/publications/open-problems-and-challenges-in-software-analytics(46183a4f-46d6-44ec-a02b-ca28fd4ecf3e).html",
            "Abstract": "- University of Birmingham research gateway University of Birmingham research gateway \nUniversity of Birmingham research gateway Research Portal Schools Publications \nResearchers Research Projects Activities Datasets Staff login HomePublicationsOpen \nProblems and Challenges in Software Analytics Open Problems and Challenges in \nSoftware Analytics Research output: Book/Report \u203a Other report Overview Citation formats \nAuthors G. Gousios Leandro Minku M. Nagappan D. Spinellis Colleges, School and \nInstitutes Computer Science Details Original language English Place of Publication \nDagstuhl, Germany Publication status Published - 2014 Save citation Saved citations (0) \nCopy the text from this field... Close View graph of relations By the same authors Multi-stream \nonline transfer learning for software effort estimation - is it necessary? Leandro Minku, 2 Jul \n2021, (Accepted/In press) PROMISE 2021: of the . \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:gYAb_yFic6IC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Java makes scripting languages irrelevant?",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1438332/",
            "Abstract": "In computing, we often solve a complex problem by adding another level of indirection. When we want to customize large, complex systems or express fluid, rapidly changing requirements, we frequently add a scripting layer on top of the corresponding system. Scripting languages glued to applications serve an important purpose: they greatly ease the application's configuration and customization and support end-user programming by offering a safe and friendly development environment. The scripting language typically offers automatic memory management, a powerful string data type, sophisticated data structures, a rich repertoire of operations, and an intuitive API for manipulating application data and state. Additionally, by interpreting the scripting language, the application can isolate itself from undesirable effects of the scripting code, such as crashes and data corruption. With the evolution of Java and Microsoft \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:k_IJM867U9cC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Basic Etiquette of Technical Communication",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5287016/",
            "Abstract": "Advice on courteousness and politeness in technical communication is in short supply, yet this is needed when developers communicate with other people. When discussing technical problems, aim to encourage rather than complain, focusing on technology issues rather than the people behind them. Every email should tackle one topic and that topic should be the subject line. Quote email discussions with care, taking into account differences in personality, language, and culture. Avoid wasting your colleagues' time by doing your homework before communicating with them. Take time to learn and adopt your organization's specific practices. When talking to higher-ups, be sincere, avoid technical jargon, and appreciate their priorities and constraints.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:UHK10RUVsp4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "A repository with 44 years of Unix evolution",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7180118/",
            "Abstract": "The evolution of the Unix operating system is made available as a version-control repository, covering the period from its inception in 1972 as a five thousand line kernel, to 2015 as a widely-used 26 million line system. The repository contains 659 thousand commits and 2306 merges. The repository employs the commonly used Git system for its storage, and is hosted on the popular GitHub archive. It has been created by synthesizing with custom software 24 snapshots of systems developed at Bell Labs, Berkeley University, and the 386BSD team, two legacy repositories, and the modern repository of the open source FreeBSD system. In total, 850 individual contributors are identified, the early ones through primary research. The data set can be used for empirical research in software engineering, information systems, and software archaeology.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:MagRZZew-58C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Java performance evaluation using external instrumentation",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4621558/",
            "Abstract": "The performance of programs written in the Java programming language is not trivial to analyse. The Java Virtual Machine hides the details of bytecode execution while not providing an accessible profiling mechanism. Most tools used for Java performance evaluations are based on sampling and only resent engineers with sampled data aggregations. In this paper, we present the Java DTrace Toolkit, a collection of scripts that is specifically designed to assist engineers in identifying the roots of various performance problems observed with other tools.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:5awf1xo2G04C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Choosing and using open source components",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5756297/",
            "Abstract": "The developers of the SQLite open source database engine estimate that it's deployed in roughly half a billion systems around the world. Think of the hundreds of thousands of open source components in just one click away. If the user know how to choose and use them effectively, the project can benefit mightily.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:yFnVuubrUp4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Global software development in the FreeBSD project",
            "Publication year": 2006,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1138506.1138524",
            "Abstract": "FreeBSD is a sophisticated operating system developed and maintained as open-source software by a team of more than 350 individuals located throughout the world. This study uses developer location data, the configuration management repository, and records from the issue database to examine the extent of global development and its effect on productivity, quality, and developer cooperation. The key findings are that global development allows round-the-clock work, but there are some marked differences between the type of work performed at different regions. The effects of multiple dispersed developers on the quality of code and productivity are negligible. Mentoring appears to be sometimes associated with developers living closer together, but ad-hoc cooperation seems to work fine across continents.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:L8Ckcad2t8MC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A dataset for github repository deduplication",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3379597.3387496",
            "Abstract": "GitHub projects can be easily replicated through the site's fork process or through a Git clone-push sequence. This is a problem for empirical software engineering, because it can lead to skewed results or mistrained machine learning models. We provide a dataset of 10.6 million GitHub projects that are copies of others, and link each record with the project's ultimate parent. The ultimate parents were derived from a ranking along six metrics. The related projects were calculated as the connected components of an 18.2 million node and 12 million edge denoised graph created by directing edges to ultimate parents. The graph was created by filtering out more than 30 hand-picked and 2.3 million pattern-matched clumping projects. Projects that introduced unwanted clumping were identified by repeatedly visualizing shortest path distances between unrelated important projects. Our dataset identified 30 thousand \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:lgavJseCKEcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Package management systems",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6155145/",
            "Abstract": "A package management system organizes and simplifies the installation and maintenance of software by standardizing and organizing the production and consumption of software collections. As a software developer, you can benefit from package managers in two ways: through a rich and stable development environment and through friction-free reuse. Promisingly, the structure that package managers bring both to the tools we use in our development process and the libraries we reuse in our products ties nicely with the recent move emphasizing DevOps (development operations) as an integration between software development and IT operations.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:oNZyr7d5Mn4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software Tracks",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5420789/",
            "Abstract": "Railroad tracks offer guidance and support. There are various tools that can give our software the same handling. The main tool for guiding the code's direction is the language's type system. For values, the type system can help us by establishing a separate type for each distinct class; for code, interfaces and abstract classes ensure that we won't forget some crucial methods when we add functionality through a new class. With domain-specific languages or even suitably initialized data structures we can efficiently express exactly what the designer intended and nothing more. At a higher level, architectures that enforce a particular open-ended but well-defined interface will also guide a software's progress. Finally, the most flexible track-laying approach is a tool-supported software development process.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:WbkHhVStYXYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "State-of-the-art software testing",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8048644/",
            "Abstract": "Best practices for software testing include unit testing, test-driven development, using a test pyramid, test automation, continuous integration, test coverage analysis, A/B testing, and employing the appropriate metrics.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:UOgPUojWnykC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Conspicuous corruption: Evidence at a country level",
            "Publication year": 2021,
            "Publication url": "https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0255970",
            "Abstract": "People can exhibit their status by the consumption of particular goods or experiential purchases; this is known as \u201cconspicuous consumption\u201d; the practice is widespread and explains the market characteristics of a whole class of goods, Veblen goods, demand for which increase in tandem with their price. The value of such positional goods lies in their distribution among the population\u2014the rarer they are, the more desirable they become. At the same time, higher income, often associated with higher status, has been studied in its relation to unethical behavior. Here we present research that shows how a particular Veblen good, illicit behavior, and wealth, combine to produce the display of illegality as a status symbol. We gathered evidence at a large, country-level, scale of a particular form of consumption of an illictly acquired good for status purposes. We show that in Greece, a developed middle-income country, where authorities cannot issue custom vanity license plates, people acquire distinguishing plate numbers that act as vanity plate surrogates. We found that such license plates are more common in cars with bigger engines and in luxury brands, and are therefore associated with higher value vehicles. This cannot be explained under the lawful procedures for allocating license plates and must therefore be the result of illegal activities, such as graft. This suggests a pattern of \u201cconspicuous corruption\u201d, where individuals break the law and use their gains as status symbols, knowing that the symbols hint at rule-breaking, as long as the unlawful practice cannot be incontestably established.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:K1TAGxA9IWwC",
            "Publisher": "Public Library of Science"
        },
        {
            "Title": "Live interactive queries to a software application's memory profile",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/document/8789793/",
            "Abstract": "Memory operations are critical to an application's reliability and performance. To reason about their correctness and track opportunities for optimisations, sophisticated instrumentation frameworks, such as Valgrind and Pin, have been developed. Both provide only limited facilities for analysing the collected data. This work presents a Valgrind's extension for examining a software applications' dynamic memory profile through live interactive analysis with SQL. The Pico COllections Query Library (pico ql) module maps Valgrind's data structures that contain the instrumented application's memory operations metadata to a relational interface. Queries are type-safe and the module imposes only a trivial overhead when idle. The authors evaluate the proposed approach on ten applications and through a qualitative study. They find 900 kb of undefined bytes in  bzip2  that account for 12% of its total memory use and a \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:ooaom_WTAwIC",
            "Publisher": "IET"
        },
        {
            "Title": "The Journal of Systems & Software",
            "Publication year": 2020,
            "Publication url": "https://research.rug.nl/files/175420128/1_s2.0_S0164121220301199_main.pdf",
            "Abstract": "Software reuse is a widely adopted practice among both researchers and practitioners. The relation between security and reuse can go both ways: a system can become more secure by relying on mature dependencies, or more insecure by exposing a larger attack surface via exploitable dependencies. To follow up on a previous study and shed more light on this subject, we further examine the association between software reuse and security threats. In particular, we empirically investigate 1244 open-source projects in a multiple-case study to explore and discuss the distribution of security vulnerabilities between the code created by a development team and the code reused through dependencies. For that, we consider both potential vulnerabilities, as assessed through static analysis, and disclosed vulnerabilities, reported in public databases. The results suggest that larger projects in size are associated with an increase on the amount of potential vulnerabilities in both native and reused code. Moreover, we found a strong correlation between a higher number of dependencies and vulnerabilities. Based on our empirical investigation, it appears that source code reuse is neither a silver bullet to combat vulnerabilities nor a frightening werewolf that entail an excessive number of them.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:TciIZjdTqZoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "How to analyze git repositories with command line tools: we're not in kansas anymore",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3183440.3183469",
            "Abstract": "Git repositories are an important source of empirical software engineering product and process data. Running the Git command-line tool and processing its output with other Unix tools allows the incremental construction of sophisticated data processing pipelines. Git data analytics on the command-line can be systematically presented through a pattern that involves fetching, selection, processing, summarization, and reporting. For each part of the processing pipeline, we examine the tools and techniques that can be most effectively used to perform the task at hand. The presented techniques can be easily applied, first to get a feeling of version control repository data at hand and then also for extracting empirical results.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:FQnhRx9bfrkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Undocumented and unchecked: exceptions that spell trouble",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2597073.2597089",
            "Abstract": "Modern programs rely on large application programming interfaces (APIs). The Android framework comprises 231 core APIs, and is used by countless developers. We examine a sample of 4,900 distinct crash stack traces from 1,800 different Android applications, looking for Android API methods with undocumented exceptions that are part of application crashes. For the purposes of this study, we take as a reference the version 15 of the Android API, which matches our stack traces. Our results show that a significant number of crashes (19%) might have been avoided if these methods had the corresponding exceptions documented as part of their interface.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:JNgBMBbBnUoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Notable design patterns for domain-specific languages",
            "Publication year": 2001,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121200000893",
            "Abstract": "The realisation of domain-specific languages (dsls) differs in fundamental ways from that of traditional programming languages. We describe eight recurring patterns that we have identified as being used for dsl design and implementation. Existing languages can be extended, restricted, partially used, or become hosts for dsls. Simple dsls can be implemented by lexical processing. In addition, dsls can be used to create front-ends to existing systems or to express complicated data structures. Finally, dsls can be combined using process pipelines. The patterns described form a pattern language that can be used as a building block for a systematic view of the software development process involving dsls.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:u-x6o8ySG0sC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Evaluating certificate status information mechanisms",
            "Publication year": 2000,
            "Publication url": "https://dl.acm.org/doi/pdf/10.1145/352600.352603",
            "Abstract": "A wide spectrum of certificate revocation mechanisms is currently in use. A number of them have been proposed by standardisation bodies, while some others have originated from academic or private institutions. What is still missing is a systematic and robust framework for the sound evaluation of these mechanisms. We present a mechanism-neutral framework for the evaluation of mechanisms, which collect, process and distribute certificate status information. A detailed demonstration of its exploitation is also provided. The demonstration is mainly based on the evaluation of Certificate Revocation Lists, as well as of the Online Certificate Status Protocol.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ZeXyd9-uunAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Optimizing header file include directives",
            "Publication year": 2009,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.369",
            "Abstract": "A number of widely used programming languages use lexically included files as a way to share and encapsulate declarations, definitions, code, and data. As the code evolves files included in a compilation unit are often no longer required, yet locating and removing them is a haphazard operation, which is therefore neglected. The difficulty of reasoning about included files stems primarily from the fact that the definition and use of macros complicates the notions of scope and of identifier boundaries. By defining four successively refined identifier equivalence classes we can accurately derive dependencies between identifiers. A mapping of those dependencies on a relationship graph between included files can then be used to determine included files that are not required in a given compilation unit and can be safely removed. We validate our approach through a number of experiments on numerous large \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:nb7KW1ujOQ8C",
            "Publisher": "John Wiley & Sons, Ltd."
        },
        {
            "Title": "How is open source affecting software development?",
            "Publication year": 2004,
            "Publication url": "https://www2.dmst.aueb.gr/dds/pubs/jrnl/2004-IEEESW-OSS/html/ge-intro.pdf",
            "Abstract": "Clemens Szyperski, Microsoft Research tributed with the FreeBSD operating system.(Many projects appear on more than one of the locations just listed.) Following the reused open source code\u2019s evolution and deploying the corresponding components are also becoming less haphazard operations, with mechanisms such as installable packages and anonymous Concurrent Versions System (CVS) access enabling the automation of many operations. This special issue examines how the proliferation and availability of open source are affecting software development practices. From a developer\u2019s perspective, open source is a combination of two important properties: visible source code and a right to make (relatively) unencumbered derivatives. The motivations behind the two properties are different, and each can occur in isolation\u2014examples include Microsoft\u2019s shared source and library vendors\u2019 code licenses for developing derivative products from nonvisible source. Both properties affect\u2014in positive and negative ways\u2014the software artifacts (products) we develop and how we develop them (process).",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:2osOgNQ5qMEC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Usability design for the home media station",
            "Publication year": 2003,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=s6YW-cZBTqwC&oi=fnd&pg=PA439&dq=info:t75Zp4yhFeEJ:scholar.google.com&ots=T_4C8PTVSg&sig=pOCE24biI2wnibh9iL27vKy2UYk",
            "Abstract": "A different usability design approach is needed for the emerging class of home infotainment appliances, collectively referred to as the home media station (HMS). Mass-media theory, consumer electronics engineering, content creation and content distribution play a major role towards the human-centered design of home media appliances. Different audience behavior factors, such as the attention span, and group watching, affect the design of the HMS. We have employed our approach in the design of a system offering dynamic synthesis of the advertisingbreak at each television set-top box.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:yD5IFk8b50cC",
            "Publisher": "CRC Press"
        },
        {
            "Title": "Quality wars: Open source versus proprietary software",
            "Publication year": 2011,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=DxuGi5h2-HEC&oi=fnd&pg=PA259&dq=info:1o2s1FplJJsJ:scholar.google.com&ots=0XsAkiSbrT&sig=NCu7rM3YBaK9M7ZuJ69vceP9qFs",
            "Abstract": "\u2022 Another approach involves examining the software\u2019s external quality attributes, which reflect how the software appears to its end users [Kuan 2003].\u2022 Then, instead of the product, one can look at the process and examine measures related to the code\u2019s construction and maintenance, such as the how much code is being added each week or how swiftly bugs are closed [Paulson et al. 2004].",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:NJ774b8OgUMC",
            "Publisher": "O\u2019Reilly Media, Inc"
        },
        {
            "Title": "Detailed Overview of Software Smells",
            "Publication year": 2017,
            "Publication url": "https://core.ac.uk/download/pdf/144871495.pdf",
            "Abstract": "This document provides an overview of literature concerning software smells covering various dimensions of smells along with their corresponding references.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:83hVMSBzrWwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "NGCE\u2013network graphs for computer epidemiologists",
            "Publication year": 2005,
            "Publication url": "https://link.springer.com/chapter/10.1007/11573036_64",
            "Abstract": "Graphs are useful data structures capable of efficiently representing a variety of technological and social networks. They are therefore utilized in simulation-based studies of new algorithms and protocols. Inspired by the popular tgff (Task Graphs For Free) toolkit, which creates task graphs for embedded systems, we present the ngce, an easy to use graph generator that produces structures for the study of the propagation of viral agents in complex computer networks. Designated track: Computer Security",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:BqipwSGYUEgC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "A tale of four kernels",
            "Publication year": 2008,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1368088.1368140",
            "Abstract": "The FreeBSD, GNU/Linux, Solaris, and Windows operating systems have kernels that provide comparable facilities. Interestingly, their code bases share almost no common parts, while their development processes vary dramatically. We analyze the source code of the four systems by collecting metrics in the areas of file organization, code structure, code style, the use of the C preprocessor, and data organization. The aggregate results indicate that across various areas and many different metrics, four systems developed using wildly different processes score comparably. This allows us to posit that the structure and internal quality attributes of a working, non-trivial software artifact will represent first and foremost the engineering requirements of its construction, with the influence of process being marginal, if any.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:YOwf2qJgpHMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A complete set of related git repositories identified via community detection approaches based on shared commits",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3379597.3387499",
            "Abstract": "In order to understand the state and evolution of the entirety of open source software we need to get a handle on the set of distinct software projects. Most of open source projects presently utilize Git, which is a distributed version control system allowing easy creation of clones and resulting in numerous repositories that are almost entirely based on some parent repository from which they were cloned. Git commits are unlikely to get produce and represent a way to group cloned repositories. We use World of Code infrastructure containing approximately 2B commits and 100M repositories to create and share such a map. We discover that the largest group contains almost 14M repositories most of which are unrelated to each other. As it turns out, the developers can push git object to an arbitrary repository or pull objects from unrelated repositories, thus linking unrelated repositories. To address this, we apply Louvain \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:WC4w5-ZrDNIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Open source and professional advancement",
            "Publication year": 2006,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1687864/",
            "Abstract": "Open source software development efforts offer us professionals a new and valuable way to obtain significant experience in a wide range of areas and to advance professionally. The most obvious way for a professional to benefit from open source software is by fixing and improving existing open source code. Many open source projects have lists chock-full of exciting additions and obscure bugs eagerly waiting for us developers to get our hands on them. By joining an existing open source software project, we can immediately practice the art of maintaining other people's code and sharpen our corresponding skills",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:IWHjjKOFINEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Code reading: the open source perspective",
            "Publication year": 2003,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=8lYbNfsAVT4C&oi=fnd&pg=PR7&dq=info:2fC35K0-HGAJ:scholar.google.com&ots=i2RYkycNyK&sig=Hc8NRSxweg9tYzGaBYWDN5T8UQo",
            "Abstract": "If you are a programmer, you need this book. You've got a day to add a new feature in a 34,000-line program: Where do you start? Page 333 How can you understand and simplify an inscrutable piece of code? Page 39 Where do you start when disentangling a complicated build process? Page 167 How do you comprehend code that appears to be doing five things in parallel? Page 132 You may read code because you have to--to fix it, inspect it, or improve it. You may read code the way an engineer examines a machine--to discover what makes it tick. Or you may read code because you are scavenging--looking for material to reuse. Code-reading requires its own set of skills, and the ability to determine which technique you use when is crucial. In this indispensable book, Diomidis Spinellis uses more than 600 real-world examples to show you how to identify good (and bad) code: how to read it, what to look for, and how to use this knowledge to improve your own code. Fact: If you make a habit of reading good code, you will write better code yourself.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:UeHWp8X0CEIC",
            "Publisher": "Addison-Wesley Professional"
        },
        {
            "Title": "The Information Train",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-1-4939-0965-0_7",
            "Abstract": "The increased application of software-controlled digital electronics hinders the understanding of how things work. The information train is a scientific experiment exhibit that physically demonstrates how computers communicate. It comprises a network in which a model Lego train acts as a physical carrier transferring a picture\u2019s pixels from one computer to the other. The sending end computer scans a simple picture, and directs a model train to send that pixel to the receiving end computer. This is done by sensing the approaching train and switching a rail junction depending on whether a pixel is on or off. The train carries on its top a piece that rotates depending on the train\u2019s route, thus carrying the data between the two computers. At the receiving end, two sensors detect the shape\u2019s orientation allowing the receiving-end computer to reassemble the picture bit-by-bit, pixel-by-pixel. The receiving-end computer \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:PflRiyi98mgC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Job Security",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5222787/",
            "Abstract": "In this paper, job security in code design is discussed. Techniques on how to make codes unreadable is mentioned. Like when naming variables, methods, fields, and classes, the readers can use some languages such as Java that is well-established naming conventions regarding capitalization and the joining of words. The author also suggest that the reader can make use of many IDEs that insert boilerplate comments at the beginning of each method and class. This column also suggest that the more unreadable the code the more indispensable a programmer with his job.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:eMMeJKvmdy0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "A type-safe embedding of SQL into Java using the extensible compiler framework J%",
            "Publication year": 2015,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1477842415000020",
            "Abstract": "J% is an extension of the Java programming language that efficiently supports the integration of domain-specific languages. In particular, J% allows the embedding of domain-specific language code into Java programs in a syntax-checked and type-safe manner. This paper presents J%\u05f3s support for the sql language. J% checks the syntax and semantics of sql statements at compile-time. It supports query validation against a database schema or through execution to a live database server. The J% compiler generates code that uses standard jdbc api calls, enhancing runtime efficiency and security against sql injection attacks.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:gqw4OU68NNkC",
            "Publisher": "Pergamon"
        },
        {
            "Title": "Silver bullets and other mysteries",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4163023/",
            "Abstract": "What can developers do when faced with an aged software system? This is where a silver bullet comes in handy. At various times, this silver bullet has been known by names such as structured programming, object-oriented languages, 4GLs (fourth-generation programming languages), CASE (computer-aided software engineering) tools, RDBMSs (relational database management systems), XML, visual programming, n-tier architectures, managed code - the list goes on. What's important is that the move suits everybody perfectly. Software ages and becomes increasingly expensive to maintain. New technologies offer modest but not spectacular improvements in productivity. It's therefore sensible from time to time to rebuild a system from scratch. It might be harmless and politically expedient to claim that we've found a silver bullet, but it's even better to know what we're really doing",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:a0OBvERweLwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Using and Abusing XML",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4455638/",
            "Abstract": "XML is an extremely nifty format. Computers can easily parse XML data, yet humans can also understand it. By adopting XML, we can take advantage of the scores of tools that work on arbitrary XML documents. Common tasks like editing, validation, transformations, and queries become just a matter of selecting and applying the right tool.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:zLWjf1WUPmwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The bug catalog of the maven ecosystem",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2597073.2597123",
            "Abstract": "Examining software ecosystems can provide the research community with data regarding artifacts, processes, and communities. We present a dataset obtained from the Maven central repository ecosystem (approximately 265GB of data) by statically analyzing the repository to detect potential software bugs. For our analysis we used FindBugs, a tool that examines Java bytecode to detect numerous types of bugs. The dataset contains the metrics results that FindBugs reports for every project version (a JAR) included in the ecosystem. For every version we also stored specific metadata such as the JAR's size, its dependencies and others. Our dataset can be used to produce interesting research results, as we show in specific examples.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:pKq9KLJfUZEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Cyberdiversity: Measures and initial results",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5600450/",
            "Abstract": "Cyberdiversity is a concept borrowed from biology and refers to the introduction of diversity into the different levels of a computer. This kind of diversity is used to avert attacks that can threat a large number of systems that share common characteristics and as a result common vulnerabilities. Currently, there are many methods that introduce cyberdiversity into systems but there is no attempt to measure the existing cyberdiversity. In this paper we introduce a novel approach that measures the existing diversity in software. To accomplish that, we specify three different metrics. The concept of our approach is to collect specific information and then process it in order to find distinct similarities or differences within software. To test our approach, we implemented a system, based on the client-server architecture.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:_Ybze24A_UAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Measuring the occurrence of security-related bugs through software evolution",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6377377/",
            "Abstract": "A security-related bug is a programming error that introduces a potentially exploitable weakness into a computer system. This weakness could lead to a security breach with unfortunate consequences. Version control systems provide an accurate historical record of the software code's evolution. In this paper we examine the frequency of the security-related bugs throughout the evolution of a software project by applying the Find Bugs static analyzer on all versions of its revision history. We have applied our approach on four projects and we have come out with some interesting results including the fact that the number of the security-related bugs increase as the project evolves.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:IUKN3-7HHlwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Sandboxing Applications.",
            "Publication year": 2001,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.4424&rep=rep1&type=pdf",
            "Abstract": "Users frequently have to choose between functionality and security. When running popular Web browsers or email clients, they frequently find themselves turning off features such as JavaScript, only to switch them back on in order to view a certain site or read a particular message. Users of Unix (or similar) systems can construct a sandbox where such programs execute in a restricted environment. Creating such a sandbox is not trivial; one has to determine what files or services to place within the sandbox to facilitate the execution of the application. In this paper we describe a portable system that tracks the file requests made by applications creating an access log. The same system can then use the access log as a template to regulate file access requests made by sandboxed applications. We present an example of how this system was used to place Netscape Navigator in a sandbox.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:IjCSPb-OGe4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Beautiful Architecture: Leading Software Engineers Explain How They Think",
            "Publication year": 2009,
            "Publication url": "https://scholar.google.com/scholar?cluster=14487484548665709738&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:xvKSgulxyWUC",
            "Publisher": "O\u2019Reilly Media"
        },
        {
            "Title": "The long\u2010term growth rate of evolving software: Empirical results and implications",
            "Publication year": 2017,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1847",
            "Abstract": "The amount of code in evolving software\u2010intensive systems appears to be growing relentlessly, affecting products and entire businesses. Objective figures quantifying the software code growth rate bounds in systems over a large time scale can be used as a reliable predictive basis for the size of software assets. We analyze a reference base of over 404 million lines of open source and closed software systems to provide accurate bounds on source code growth rates. We find that software source code in systems doubles about every 42 months on average, corresponding to a median compound annual growth rate of 1.21 \u00b1 0.01. Software product and development managers can use our findings to bound estimates, to assess the trustworthiness of road maps, to recognise unsustainable growth, to judge the health of a software development project, and to predict a system's hardware footprint.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:4z9AjAXnHeAC",
            "Publisher": "John Wiley & Sons, Ltd"
        },
        {
            "Title": "Why computing students should contribute to open source software projects",
            "Publication year": 2021,
            "Publication url": "https://dl.acm.org/doi/pdf/10.1145/3437254",
            "Abstract": "Acquiring developer-prized practical skills, knowledge, and experiences.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:VqEBHV59gIcC",
            "Publisher": "ACM"
        },
        {
            "Title": "Component mining: A process and its pattern language",
            "Publication year": 2000,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0950584900001051",
            "Abstract": "An important issue in a component-based software development process is the supply source of mature, reliable, adaptable and maintainable components. We define as component mining the deliberate, organised and automated process of extracting reusable components from an existing rich software base and present a pattern language used for mining components from programs that are typically executed as non-interactive autonomous processes. We describe the patterns in terms of intent, motivation, applicability, structure, participants, consequences and implementation. Based on the pattern language, we describe the implementation of a set of COM components that encapsulate the Unix filters and an exemplar application that uses them.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:KlAtU1dfN6UC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "A survey on software smells",
            "Publication year": 2018,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121217303114",
            "Abstract": "Smells in software systems impair software quality and make them hard to maintain and evolve. The software engineering community has explored various dimensions concerning smells and produced extensive research related to smells. The plethora of information poses challenges to the community to comprehend the state-of-the-art tools and techniques.We aim to present the current knowledge related to software smells and identify challenges as well as opportunities in the current practices.We explore the definitions of smells, their causes as well as effects, and their detection mechanisms presented in the current literature. We studied 445 primary studies in detail, synthesized the information, and documented our observations.The study reveals five possible defining characteristics of smells \u2014 indicator, poor solution, violates best-practices, impacts quality, and recurrence. We \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:_Nt1UvVys9QC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Choosing a programming language",
            "Publication year": 2006,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1657941/",
            "Abstract": "This paper evaluates the use of a functional language for implementing domain-specific functionality. The factors we consider when choosing a programming language are programmer productivity, maintainability, efficiency, portability, tool support, and software and hardware interfaces. The choice of programming language is a fine balancing act. Modern object-oriented languages such as Java and C# are more orthogonal and hide fewer surprises for the programmer, although the inevitable accumulation of features makes this statement less true with every new version of each language",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ldfaerwXgEUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Aspects of the History of Computing in Modern Greece",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8356170/",
            "Abstract": "This article aims to shed light on notable aspects of the history of computing in Greece, starting from 1920. We cover six areas, including the early days of computing in the country, the transition to the Internet era, the formation of a computer-related educational infrastructure, the evolution of data networks, and the growth of the software and hardware industry. In each area we highlight findings that involve the important role of women in this technological evolution, how the risks taken by particular individuals pushed the boundaries of the field, the slow pace of the universities at the early stages, and the key part of multinational technology companies and state-controlled banks. Apart from numerous reports and publications, our sources also include interviews with individuals who played a major part in the development of computing in Greece.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:SenaEjHFqFYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Does your configuration code smell?",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7832899/",
            "Abstract": "Infrastructure as Code (IaC) is the practice of specifying computing system configurations through code, and managing them through traditional software engineering methods. The wide adoption of configuration management and increasing size and complexity of the associated code, prompt for assessing, maintaining, and improving the configuration code's quality. In this context, traditional software engineering knowledge and best practices associated with code quality management can be leveraged to assess and manage configuration code quality. We propose a catalog of 13 implementation and 11 design configuration smells, where each smell violates recommended best practices for configuration code. We analyzed 4,621 Puppet repositories containing 8.9 million lines of code and detected the cataloged implementation and design configuration smells. Our analysis reveals that the design configuration \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:B9zx5l6rxUEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "ASSOCIATE EDITORS IN CHIEF",
            "Publication year": 2020,
            "Publication url": "https://www.computer.org/csdl/magazine/ic/2020/02/09086932/1jAclvUxHLq",
            "Abstract": "Presents a listing of the editorial board, board of governors, current staff, committee members, and/or society editors for this issue of the publication.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:6QQEcPiluMcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Security applications of peer-to-peer networks",
            "Publication year": 2004,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1389128604000076",
            "Abstract": "Open networks are often insecure and provide an opportunity for viruses and DDOS activities to spread. To make such networks more resilient against these kind of threats, we propose the use of a peer-to-peer architecture whereby each peer is responsible for: (a) detecting whether a virus or worm is uncontrollably propagating through the network resulting in an epidemic; (b) automatically dispatching warnings and information to other peers of a security-focused group; and (c) taking specific precautions for protecting their host by automatically hardening their security measures during the epidemic. This can lead to auto-adaptive secure operating systems that automatically change the trust level of the services they provide. We demonstrate our approach through a prototype application based on the Jxta peer-to-peer infrastructure.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ufrVoPGSRksC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Global analysis and transformations in preprocessed languages",
            "Publication year": 2003,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1245303/",
            "Abstract": "Tool support for refactoring code written in mainstream languages such as C and C++ is currently lacking due to the complexity introduced by the mandatory preprocessing phase that forms part of the C/C++ compilation cycle. The definition and use of macros complicates the notions of scope and of identifier boundaries. The concept of token equivalence classes can be used to bridge the gap between the language proper semantic analysis and the non-preprocessed source code. The CScout toolchest uses the developed theory to analyze large interdependent program families. A Web-based interactive front end allows the precise realization of rename and remove refactorings on the original C source code. In addition, CScout can convert programs into a portable obfuscated format or store a complete and accurate representation of the code and its identifiers in a relational database.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:UebtZRa9Y70C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Trial evaluation of wireless info-communication and indoor location-based services in exhibition shows",
            "Publication year": 2005,
            "Publication url": "https://link.springer.com/chapter/10.1007/11573036_19",
            "Abstract": "Exhibition shows are essentially information exchange hubs. Their success relies on the quantity and quality of interaction of the involved parties: exhibitors, visitors, and organizers. The introduction of advanced wireless applications in the exhibition industry is a major opportunity for improving interaction and communications, thus leveraging the value proposition of exhibition services. This paper discusses the development and commercial trial of a Wireless Exhibition Guide that employs mobile terminals, wireless networks, and indoor location positioning technologies integrated through a set of software components, to introduce sophisticated information, communication, and navigation services for exhibition environments. Results indicate acceptance of the Wireless Exhibition Guide amongst the stakeholders of the exhibition industry, organizers, exhibitors, and visitors alike, and provide guidance \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:4OULZ7Gr8RgC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Organized pruning of file sets",
            "Publication year": 2003,
            "Publication url": "https://dialnet.unirioja.es/servlet/articulo?codigo=4957324",
            "Abstract": "Organized pruning of file sets - Dialnet Ayuda \u00bfEn qu\u00e9 podemos ayudarle? \u00d7 Buscar en la ayuda \nBuscar Consultar la ayuda Ir al contenido Dialnet Buscar Revistas Tesis Congresos Ayuda \nOrganized pruning of file sets Autores: Diomidis D. Spinellis Localizaci\u00f3n: ;login:: the magazine \nof USENIX & SAGE, ISSN 1044-6397, Vol. , N\u00ba. (JUN), 2003, p\u00e1gs. 39-42 Idioma: ingl\u00e9s Texto \ncompleto no disponible (Saber m\u00e1s ...) Fundaci\u00f3n Dialnet Acceso de usuarios registrados \nImagen de identificaci\u00f3n Identificarse \u00bfOlvid\u00f3 su contrase\u00f1a? \u00bfEs nuevo? Reg\u00edstrese \nVentajas de registrarse Dialnet Plus M\u00e1s informaci\u00f3n sobre Dialnet Plus Opciones de \ncompartir Facebook Twitter Opciones de entorno Sugerencia / Errata \u00a9 2001-2021 Fundaci\u00f3n \nDialnet \u00b7 Todos los derechos reservados Dialnet Plus Accesibilidad Aviso Legal Coordinado \npor: Fundaci\u00f3n Dialnet Inicio Buscar Revistas Tesis Congresos Ayuda Registrarse de La Rioja \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:CUz-cjXBMXMC",
            "Publisher": "USENIX Association"
        },
        {
            "Title": "The risks digest",
            "Publication year": 2008,
            "Publication url": "http://catless.ncl.ac.uk/Risks/",
            "Abstract": "RISKS-LIST: RISKS-FORUM Digest The RISKS Digest Forum on Risks to the Public in \nComputers and Related Systems ACM Committee on Computers and Public Policy, Peter G. \nNeumann, moderator Search RISKS The RISKS Forum is a moderated digest. Its USENET \nequivalent is comp.risks. (Google archive) Volume 32 Issue 72 (Tuesday, 22nd June 2021) <= \nLatest Issue Volume 32 Issue 71 (Saturday, 12th June 2021) Volume 32 Issue 70 (Saturday, \n5th June 2021) News about the RISKS web pages Subscriptions, contributions and archives \nFeeds RSS 1.0 (full text) RSS 2.0 (full text) ATOM (full text) RDF feed Simplified (latest issue) \nJSON Feed Please report any website or feed problems you find. Report issues with the digest \ncontent to the moderator. Got to a specific issue of RISKS Volume N o Issue N o Volume Index \nNB The dates and counts do not include the index issues for each volume. Index to the Index \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:AyW1NBs4p6IC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Domain-Specific Modeling-What Kinds of Nails Need a Domain-Specific Hammer?",
            "Publication year": 2009,
            "Publication url": "https://scholar.google.com/scholar?cluster=8651500096426916925&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:PoEJn1poz0QC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Cracking software reuse",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4052543/",
            "Abstract": "The Unix system and its pipelines are a model of software reuse. Although many subsequent developments weren't similarly successful, by looking at Wikipedia and its MediaWiki engine, we find many levels of successful reuse. It seems that software repositories, package-management systems, shared-library technologies, and language platforms have increased reuse's return on investment. The Internet has also catalyzed software reuse by bringing both developer groups and development efforts closer to their users",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:5ugPr518TE4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Agility drivers",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5929529/",
            "Abstract": "Our growing ability to swiftly put together sophisticated software affords us the luxury to listen to our customers, to try out new things, to make mistakes, to redesign as we move along\u2014in short to be agile. On the technological front, the main driving forces are powerful operating systems, the widespread availability database management systems, a wide selection of libraries, interoperability standards, versatile programming languages, ample processing power, and sophisticated development tools. On the environment front, agility is driven by specialized education, informal management structures, Web access, open source software, shifting user expectations, and the ubiquitous availability of IT infrastructures. Where agility drivers are present, we must adjust our development processes, demand more from our software suppliers, and develop in-house capacity to organically grow applications and services that will \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:qStMeLs7OP8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "The carbon footprint of conference papers",
            "Publication year": 2013,
            "Publication url": "https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0066508",
            "Abstract": "The action required to stem the environmental and social implications of climate change depends crucially on how humankind shapes technology, economy, lifestyle and policy. With transport CO2 emissions accounting for about a quarter of the total, we examine the contribution of CO2 output by scientific travel. Thankfully for the reputation of the scientific community, CO2 emissions associated with the trips required to present a paper at a scientific conference account for just 0.003% of the yearly total. However, with CO2 emissions for a single conference trip amounting to 7% of an average individual\u2019s total CO2 emissions, scientists should lead by example by demonstrating leadership in addressing the issue.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:fbc8zXXH2BUC",
            "Publisher": "Public Library of Science"
        },
        {
            "Title": "Practical fault detection in puppet programs",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3377811.3380384",
            "Abstract": "Puppet is a popular computer system configuration management tool. By providing abstractions that model system resources it allows administrators to set up computer systems in a reliable, predictable, and documented fashion. Its use suffers from two potential pitfalls. First, if ordering constraints are not correctly specified whenever a Puppet resource depends on another, the non-deterministic application of resources can lead to race conditions and consequent failures. Second, if a service is not tied to its resources (through the notification construct), the system may operate in a stale state whenever a resource gets modified. Such faults can degrade a computing infrastructure's availability and functionality.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:4sHRCyKql0sC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Refactoring--does it improve software quality?",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4273477/",
            "Abstract": "Software systems undergo modifications, improvements and enhancements to cope with evolving requirements. This maintenance can cause their quality to decrease. Various metrics can be used to evaluate the way the quality is affected. Refactoring is one of the most important and commonly used techniques of transforming a piece of software in order to improve its quality. However, although it would be expected that the increase in quality achieved via refactoring is reflected in the various metrics, measurements on real life systems indicate the opposite. We analyzed source code version control system logs of popular open source software systems to detect changes marked as refactorings and examine how the software metrics are affected by this process, in order to evaluate whether refactoring is effectively used as a means to improve software quality within the open source community.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:M3ejUd6NZC8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "A market-based approach to managing the risk of peer-to-peer transactions",
            "Publication year": 2010,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1389128609003107",
            "Abstract": "Market-based principles can be used to manage the risk of distributed peer-to-peer transactions. This is demonstrated by Ptrim, a system that builds a transaction default market on top of a main transaction processing system, within which peers offer to underwrite the transaction risk for a slight increase in the transaction cost. The insurance cost, determined through market-based mechanisms, is a way of identifying untrustworthy peers and perilous transactions. The risk of the transactions is contained, and at the same time members of the peer-to-peer network capitalise on their market knowledge by profiting as transaction insurers. We evaluated the approach through trials with the deployed Ptrim prototype, as well as composite experiments involving real online transaction data and real subjects participating in the transaction default market. We examine the efficacy of our approach both from a theoretical and an \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:WqliGbK-hY8C",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Drawing tools",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4814952/",
            "Abstract": "A drawing is often the best way to describe a large, complex artifact. In software development, you can easily derive pictures from code through tools that automate diagram creation. With the Graphviz tools you can draw directed and undirected relations between elements using a simple declarative language. Pic features a procedural drawing language that lets you define your own domain-specific drawing language. Gnuplot can plot data and functions in a wide variety of 2D and 3D styles. Finally, you can plot geographical data through the Generic Mapping Tools (GMT) or by generating KML files. You can obtain additional leverage by having one graphics tool or script generate output for another and by using the appropriate output format.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:kRWSkSYxWN8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Word embeddings for the software engineering domain",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3196398.3196448",
            "Abstract": "The software development process produces vast amounts of textual data expressed in natural language. Outcomes from the natural language processing community have been adapted in software engineering research for leveraging this rich textual information; these include methods and readily available tools, often furnished with pre-trained models. State of the art pre-trained models however, capture general, common sense knowledge, with limited value when it comes to handling data specific to a specialized domain. There is currently a lack of domain-specific pre-trained models that would further enhance the processing of natural language artefacts related to software engineering. To this end, we release a word2vec model trained over 15GB of textual data from Stack Overflow posts. We illustrate how the model disambiguates polysemous words by interpreting them within their software engineering context \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:gAJFiZdMcUIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Developer-centric knowledge mining from large open-source software repositories (CROSSMINER)",
            "Publication year": 2017,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-319-74730-9_33",
            "Abstract": "Deciding if an OSS project meets the required standards for adoption is hard, and keeping up-to-date with a rapidly evolving project is even harder. Making decisions about quality and adoption involves analysing code, documentation, online discussions, and issue trackers. There is too much information to process manually and it is common that uninformed decisions have to be made with detrimental effects. CROSSMINER aims to remedy this by automatically extracting the required knowledge and injecting it into the developers\u2019 Integrated Development Environments (IDE), at the time they need it to make design decisions. This allows them to reduce their effort in knowledge acquisition and to increase the quality of their code. CROSSMINER uniquely combines advanced software project analyses with online IDE monitoring. Developers will be monitored to infer which information is timely, based on \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:sFh2DmJudxsC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Conducting quantitative software engineering studies with Alitheia Core",
            "Publication year": 2014,
            "Publication url": "https://link.springer.com/article/10.1007/s10664-013-9242-3",
            "Abstract": "Quantitative empirical software engineering research benefits mightily from processing large open source software repository data sets. The diversity of repository management tools and the long history of some projects, renders the task of working with those datasets a tedious and error-prone exercise. The Alitheia Core analysis platform preprocesses repository data into an intermediate format that allows researchers to provide custom analysis tools. Alitheia Core automatically distributes the processing load on multiple processors while enabling programmatic access to the raw data, the metadata, and the analysis results. The tool has been successfully applied on hundreds of medium to large-sized open-source projects, enabling large-scale empirical studies.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:4vMrXwiscB8C",
            "Publisher": "Springer US"
        },
        {
            "Title": "Division of Effort, Productivity, Quality, and Relationships in FLOSS Virtual Teams: Evidence from the FreeBSD Project.",
            "Publication year": 2012,
            "Publication url": "http://www.jucs.org/jucs_18_19/division_of_effort_productivity/jucs_18_19_2625_2645_giaglis.pdf",
            "Abstract": "Research in virtual teams and distributed work argues that the lack of collocation places an overhead on the performance potential of large, globally distributed teams. In this paper, we revisit this tenet through a case study of Free/Libre Open Source Software (FLOSS) development to demonstrate how globally dispersed FLOSS communities manage to overcome the problem of geographic separation of their members. Our results show that successful FLOSS teams demonstrate a truly global distribution of members, who perform different types of work so as to achieve consistent round-the-clock development, without any apparent ill effects on team productivity and the quality of the resulting outcomes. Cooperation between team members is abundant, especially at more complex work items, and does not seem to be affected by distance; only mentoring relationships appear in some cases to be easier to cultivate \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:dBIO0h50nwkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Information systems in the living room: A case study of personalized interactive TV design",
            "Publication year": 2001,
            "Publication url": "https://aisel.aisnet.org/cgi/viewcontent.cgi?article=1067&context=ecis2001",
            "Abstract": "The birth of the World Wide Web (WWW) in 1993, particularly its graphical user interface, offered marketers opportunities that were previously unimaginable. The WWW allows advanced marketing activities and more particularly interactive marketing, as the user is actively involved in responding to the vendor\u2019s promotion campaign. Interactive TV, also referred to as iTV, combines the appeal and mass audience of traditional TV with the interactive features such as those currently available on the Web. Although personalisation is a practice used widely on the Internet by many sites, applying personalisation techniques over interactive television presents a number of difficulties. In this paper we focus on the design and testing process of the User Interface (UI) for the Interactive & Personalized Advertisement TV viewer. We argue that there are a lot of challenges involved in the designing of interactive TV applications \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:eQOLeE2rZwMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Wireless value-added services in exhibition shows",
            "Publication year": 2006,
            "Publication url": "https://www.inderscienceonline.com/doi/abs/10.1504/IJMC.2006.008609",
            "Abstract": "This paper discusses the development and trial of a Wireless Exhibition Guide that employs mobile, wireless, and indoor positioning technologies to introduce sophisticated information, communication, and navigation exhibition services, thus, leveraging the value proposition of exhibition stakeholders. Results indicate user acceptance of the system and provide guidance towards the future of portable location-sensitive systems.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:zA6iFVUQeVQC",
            "Publisher": "Inderscience Publishers"
        },
        {
            "Title": "Outwit: Unix tool-based programming meets the Windows world",
            "Publication year": 2000,
            "Publication url": "https://www.usenix.org/legacy/events/usenix2000/general/full_papers/spinellis/spinellis.pdf",
            "Abstract": "The ubiquity of Windows-based desktop environments has not been matched by a corresponding emergence of tools supporting the Unix tool composition paradigm. Outwit is a suite of tools based on the Unix tool design principles allowing the processing of Windows application data with sophisticated data manipulation pipelines. The outwit tools offer access to the Windows clipboard, the registry, relational databases, document properties, and shell links. We demonstrate a number of applications of the outwit tools used in conjuction with existing Unix commands, and discuss future directions of our work.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ns9cj8rnVeAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "How to train your browser: Preventing XSS attacks using contextual script fingerprints",
            "Publication year": 2016,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2939374",
            "Abstract": "Cross-Site Scripting (XSS) is one of the most common web application vulnerabilities. It is therefore sometimes referred to as the \u201cbuffer overflow of the web.\u201d Drawing a parallel from the current state of practice in preventing unauthorized native code execution (the typical goal in a code injection), we propose a script whitelisting approach to tame JavaScript-driven XSS attacks. Our scheme involves a transparent script interception layer placed in the browser\u2019s JavaScript engine. This layer is designed to detect every script that reaches the browser, from every possible route, and compare it to a list of valid scripts for the site or page being accessed; scripts not on the list are prevented from executing. To avoid the false positives caused by minor syntactic changes (e.g., due to dynamic code generation), our layer uses the concept of contextual fingerprints when comparing scripts.Contextual fingerprints are identifiers \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:3eH_u9Md8IkC",
            "Publisher": "ACM"
        },
        {
            "Title": "The Antikythera Mechanism: Hacking with Gears",
            "Publication year": 2009,
            "Publication url": "https://www.usenix.org/conference/usenix-09/antikythera-mechanism-hacking-gears",
            "Abstract": "The Mechanism of Antikythera is an astronomical calculator from the first century BC Its currently agreed-on model consists of 35 gears. Its back face contains four dials tracing a luni-solar calendar and an eclipse prediction table. A number of interlocked gears calculate the ratios required for moving the four dials. The front face shows the sun's and the moon's positions in the zodiac. The elliptical anomaly of the moon is calculated by advancing one gear eccentrically through another and mounting that assembly on a gear rotating according to the moon's long axis precession period. The mechanism's design eerily foreshadows a number of modern computing concepts from the fields of digital design, programming, and software engineering.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Hx6RvaqUy9IC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Rational metaprogramming",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4420074/",
            "Abstract": "Metaprogramming, using programs to manipulate other programs, is as old as programming. From self-modifying machine code in early computers to expressions involving partially applied functions in modern functional-programming languages, metaprogramming is an essential part of an advanced programmer's arsenal. Everyday metaprogramming involves on-the-fly code production. Representative examples include dynamically generated SQL statements and code created for evaluation at runtime in interpreted languages. Metaprogramming also occurs in programs that spew out HTML or XML. Although we can't classify these markup languages as code, their rich syntactic structure qualifies their generation as metaprogramming. Unfortunately, we commonly produce code on the fly by simply pasting together character strings. This means that it's difficult to verify essential properties of the generated code \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:blknAaTinKkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "A Replication Package for PyCG: Practical Call Graph Generation in Python",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9402520/",
            "Abstract": "The ICSE 2021 paper titled \"PyCG: Practical Call Graph Generation in Python\" comes with a replication package with the purpose of providing open access to (1) our prototype call graph generator, namely PyCG, and (2) the data and scripts that replicate the results of the paper. The Artifact Evaluation Committee found that this package leads to the reproduction of the results outlined in the paper and is openly available 1 . The replication package contains the following: 1) A Docker image which can be either built manually or downloaded from DockerHub. It contains the source code and installation of PyCG, as well as the installations of two other call graph generators (i.e., Pyan and Depends ), which we compare PyCG with. 2) A micro-benchmark suite of 112 Python modules ( Section I-A ). 3) A macro-benchmark suite of 5 popular Python packages ( Section I-B ). 4) Python and Bash scripts used to execute PyCG \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:-WH5uU-2cuwC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Affective usability evaluation for an interactive music television channel",
            "Publication year": 2004,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/1027154.1027177",
            "Abstract": "Computer-mediated television brings new requirements for user interface design and evaluation, since interactive television applications are deployed in a relaxed domestic setting and aim to gratify the need for entertainment. Digital video recorders, the generation of custom computer graphics on each digital set-top box, and the introduction of new advertising formats are important issues for research and practice. We explore the employment of an animated character and the dynamic insertion of advertising in the design of an intuitive user interface for interactive music-video television. We found that the animated character and the skippable videoclip feature seamlessly enhanced consumer satisfaction, as shown by affective usability questionnaires.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ULOm3_A8WrAC",
            "Publisher": "ACM"
        },
        {
            "Title": "The information furnace: consolidated home control",
            "Publication year": 2003,
            "Publication url": "https://link.springer.com/article/10.1007/s00779-002-0213-8",
            "Abstract": "\u2002The Information Furnace is a basement-installed PC-type device that integrates existing consumer home-control, infotainment, security and communication technologies to transparently provide accessible and value-added services. A modern home contains a large number of sophisticated devices and technologies. Access to these devices is currently provided through a wide variety of disparate interfaces. As a result, end users face a bewildering array of confusing user-interfaces, access modes and price structures. In addition, as most devices function in isolation, important opportunities to exploit synergies between their functionalities are lost. The information furnace distributes data, provides services, and controls an apartment's digital devices. Emphasis is placed on accessibility and on exploiting the synergies that inevitably come up when these technologies and services are housed under a single \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:5nxA0vEk-isC",
            "Publisher": "Springer-Verlag London Limited"
        },
        {
            "Title": "Elyts edoc",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5720718/",
            "Abstract": "This paper presents a elytS edoC - a software used in writing source codes. The code's style encompasses formatting, things like indentation and spacing, commenting, program element order and identifier names. Although most style choices won't affect the compiled code or the program's run time behavior, style is a key aspect of the code's maintainability. And be cause we write code once, but over its life, we read it many times, it pays to keep the code in style that's easy to analyze, compehend, review, test and change.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:HE397vMXCloC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Echoes from space: grouping commands with large-scale telemetry data",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3183519.3183545",
            "Abstract": "Background: As evolving desktop applications continuously accrue new features and grow more complex with denser user interfaces and deeply-nested commands, it becomes inefficient to use simple heuristic processes for grouping gui commands in multi-level menus. Existing search-based software engineering studies on user performance prediction and command grouping optimization lack evidence-based answers on choosing a systematic grouping method.Research Questions: We investigate the scope of command grouping optimization methods to reduce a user's average task completion time and improve their relative performance, as well as the benefit of using detailed interaction logs compared to sampling.Method: We introduce seven grouping methods and compare their performance based on extensive telemetry data, collected from program runs of a cad application.Results: We find that methods \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:_b9rsmHxKOYC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Energy-delay investigation of remote inter-process communication technologies",
            "Publication year": 2020,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0164121219302808",
            "Abstract": "Most modern information technology devices use the Internet for creating, reading, updating, and deleting shared data through remote inter-process communication (ipc). To evaluate the energy consumption of ipc technologies and the corresponding run-time performance implications, we performed an empirical study on popular ipc systems implemented in Go, Java, JavaScript, Python, php, Ruby, and C#. We performed our experiments on computer platforms equipped with Intel and arm processors. We observed that JavaScript and Go implementations of grpcoffer the lowest energy consumption and execution time. Furthermore, by analysing their system call traces, we found that inefficient use of system calls can contribute to increased energy consumption and poor execution time.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:bxNerZLeg9kC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Intelligent cokes and diapers: MyGrocer ubiquitous computing environment",
            "Publication year": 2002,
            "Publication url": "https://www2.dmst.aueb.gr/dds/pubs/conf/2002-MBus-MyGrocer/html/paper.pdf",
            "Abstract": "Over the past years, significant developments in mobile technologies and associated economies of scale via mature manufacturing processes have made the construction of ubiquitous computing applications possible in specific domains. This paper presents the business rationale and the architectural framework of an innovative ubiquitous computing application for the grocery sector (MyGROCER). MyGROCER exploits the opportunities provided by emerging wireless and mobile commerce technologies, coupled with automatic product identification technologies (RF-Id), in order to enable an efficient home replenishment schema, enhance the quality of service provided by retailers, and ultimately add value to the end-consumer. We present the architectural elements of the application by identifying the design challenges and the way they were dealt with. The paper concludes with a critical appraisal of ubiquitous computing applications in supermarket environments and identifies future research challenges.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:LkGwnXOMwfcC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Farewell to Disks",
            "Publication year": 2010,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5604363/",
            "Abstract": "Sophisticated processing of huge, complex datasets requires us to rethink the relationship between disk-based storage and main-memory processing. Some features of modern systems\u2014namely, 64-bit architectures, memory-mapped sparse files, virtual memory, and copy on write support\u2014let us process our data with readable and efficient RAM-based algorithms, using slow disks and file systems only for their large capacity and to secure the data's persistence. The author demonstrates this approach through a short C++ program that locates the shortest path on very large graphs, like that of Wikipedia. Although RAM-based processing opens up again many problems that database systems already solve, the author believes that this is the right move because it provides us with a unified programming and performance model for all our data operations, irrespective of where the data resides.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:tzM49s52ZIMC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Handling and reporting security advisories: A scorecard approach",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1492338/",
            "Abstract": "Vendors and independent response centers have vastly different views regarding security advisories - what to publish and how to organize the information. The authors' scorecard approach aims to provide a practical guide for how to publish, read, evaluate, and handle advisories.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:pqnbT2bcN3wC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Software Heritage graph dataset: public software development under one roof",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8816748/",
            "Abstract": "Software Heritage is the largest existing public archive of software source code and accompanying development history: it currently spans more than five billion unique source code files and one billion unique commits, coming from more than 80 million software projects. This paper introduces the Software Heritage graph dataset: a fully-deduplicated Merkle DAG representation of the Software Heritage archive. The dataset links together file content identifiers, source code directories, Version Control System (VCS) commits tracking evolution over time, up to the full states of VCS repositories as observed by Software Heritage during periodic crawls. The dataset's contents come from major development forges (including GitHub and GitLab), FOSS distributions (e.g., Debian), and language-specific package managers (e.g., PyPI). Crawling information is also included, providing timestamps about when and where all \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:Qwfv3SoyJx4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Athens Affair: How some extremely smart hackers pulled off the most audacious cell-network break-in ever",
            "Publication year": 2007,
            "Publication url": "https://scholar.google.com/scholar?cluster=4423665267517526709&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:041faMmbr2QC",
            "Publisher": "Unknown"
        },
        {
            "Title": "User\u2010level operating system transactions",
            "Publication year": 2009,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.935",
            "Abstract": "User\u2010level operating system transactions allow system administrators and ordinary users to perform a sequence of file operations and then commit them as a group, or abort them without leaving any trace behind. Such a facility can aid many system administration and software development tasks. The snapshot isolation concurrency control mechanism allows transactions to be implemented without locking individual system calls; conflicts are detected when the transaction is ready to commit. Along these lines we have implemented a user\u2010space transaction monitor that is based on ZFS snapshots and a file system event monitor. Transactions are committed through a robust and efficient algorithm that merges the operations performed on a file system's clone back to its parent. Both the performance impact and the implementation cost of the transaction monitor we describe are fairly small. Copyright \u00a9 2009 John \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:Fu2w8maKXqMC",
            "Publisher": "John Wiley & Sons, Ltd."
        },
        {
            "Title": "The Athens affair",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4263124/",
            "Abstract": "How some extremely smart hackers pulled off the most audacious cell-network break-in ever. On 9 march 2005, a 38-year-old Greek electrical engineer named Costas Tsalikidis was found hanged in his Athens loft apartment, an apparent suicide. It would prove to be merely the first public news of a scandal that would roil Greece for months. The next day, the prime minister of Greece was told that his cellphone was being bugged, as were those of the mayor of Athens and at least 100 other high-ranking dignitaries, including an employee of the U.S. embassy. The victims were customers of Athens based Vodafone-Panafon, generally known as Vodafone Greece, the country's largest cellular service provider. Tsalikidis was in charge of network planning at the company. A connection seemed obvious. Given the list of people and their positions at the time of the tapping, we can only imagine the sensitive political and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:Tyk-4Ss8FVUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "On the dichotomy of debugging behavior among programmers",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3180155.3180175",
            "Abstract": "Debugging is an inevitable activity in most software projects, often difficult and more time-consuming than expected, giving it the nickname the\" dirty little secret of computer science.\" Surprisingly, we have little knowledge on how software engineers debug software problems in the real world, whether they use dedicated debugging tools, and how knowledgeable they are about debugging. This study aims to shed light on these aspects by following a mixed-methods research approach. We conduct an online survey capturing how 176 developers reflect on debugging. We augment this subjective survey data with objective observations on how 458 developers use the debugger included in their integrated development environments (IDEs) by instrumenting the popular Eclipse and IntelliJ IDEs with the purpose-built plugin WatchDog 2.0. To clarify the insights and discrepancies observed in the previous steps, we \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:QBUPEh0AvVMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Generating the blueprints of the Java ecosystem",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7180130/",
            "Abstract": "Examining a large number of software artifacts can provide the research community with data regarding quality and design. We present a dataset obtained by statically analyzing 22730 jar files taken from the Maven central archive, which is the de-facto application library repository for the Java ecosystem. For our analysis we used three popular static analysis tools that calculate metrics regarding object-oriented design, program size, and package design. The dataset contains the metrics results that every tool reports for every selected jar of the ecosystem. Our dataset can be used to produce interesting research results, such as measure the domain-specific language usage.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Fp1gVP7Oym8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Dismal code: Studying the evolution of security bugs",
            "Publication year": 2013,
            "Publication url": "https://www.usenix.org/laser2013/program/mitropoulos",
            "Abstract": "Background. Security bugs are critical programming errors that can lead to serious vulnerabilities in software. Such bugs may allow an attacker to take over an application, steal data or prevent the application from working at all.Aim. We used the projects stored in the Maven repository to study the characteristics of security bugs individually and in relation to other software bugs. Specifically, we studied the evolution of security bugs through time. In addition, we examined their persistence and their relationship with a) the size of the corresponding version, and b) other bug categories.Method. We analyzed every project version of the Maven repository by using FindBugs, a popular static analysis tool. To see how security bugs evolve over time we took advantage of the repository's project history and dependency data.Results. Our results indicate that there is no simple rule governing the number of security bugs as a project evolves. In particular, we cannot say that across projects security-related defect counts increase or decrease significantly over time. Furthermore, security bugs are not eliminated in a way that is particularly different from the other bugs. In addition, the relation of security bugs with a project's size appears to be different from the relation of the bugs coming from other categories. Finally, even if bugs seem to have similar behaviour, severe security bugs seem to be unassociated with other bug categories.Conclusions. Our findings indicate that further research should be done to analyze the evolution of security bugs. Given the fact that our experiment included only Java projects, similar research could be done for another ecosystem \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:nVrZBo8bIpAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Replication Package for Article: Data-Oriented Differential Testing of Object-Relational Mapping Systems",
            "Publication year": 2021,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9402577/",
            "Abstract": "The ICSE 2021 paper titled \"Data-Oriented Differential Testing Object-Relational Mapping Systems\" [1] comes with a replication package, which has been awarded with the \"Available\" badge by the Artifact Evaluation Committee. The artifact contains scripts, and step-by-step instructions to (1) get yourself familiar with the corresponding bug-finding tool (namely CYNTHIA), (2) reproduce the results of the main paper, and (3) re-run the bugs discovered by CYNTHIA. Specifically, the artifact has the following structure: \u2022 scripts/: This is the directory that contains the scripts needed to re-run the experiments presented in our paper. \u2022 bugs/bug_schema.sql: This is the database schema that contains the bugs discovered by CYNTHIA. \u2022 bugs/bugdb.sqlite3: This is the SQLite database file corresponding to the schema defined in bugs/bug_schema.sql . \u2022 example_bugs/: Contains test cases that trigger the two ORM bugs \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:tntj4plCNvAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Antikythera mechanism: A computer science perspective",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4519931/",
            "Abstract": "Two thousand years separate us from an ancient Greek computing device known as the Antikythera mechanism. The Antikythera mechanism is an ancient astronomical calculator that contains a lunisolar calendar, predicts eclipses, and indicates the moon's position and phase. Its use of multiple dials and interlocking gears eerily foreshadows modern computing concepts from the fields of digital design, programming, and software engineering. In this article, the author explains the mechanism's operation based on its reconstruction in Squeak Etoys, a multimedia authoring environment primarily designed to help high school students learn scientific and engineering concepts. This paper aims to present the functioning of this remarkable device using working code, the language of our community.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:VOx2b1Wkg3QC",
            "Publisher": "IEEE"
        },
        {
            "Title": "What Kinds of Nails Need a Domain-Specific Hammer?: Domain-Specific Modeling",
            "Publication year": 2009,
            "Publication url": "https://pascal-francis.inist.fr/vibad/index.php?action=getRecordDetail&idt=21793360",
            "Abstract": "Sauf mention contraire ci-dessus, le contenu de cette notice bibliographique peut \u00eatre utilis\u00e9 dans le cadre d\u2019une licence CC BY 4.0 Inist-CNRS/Unless otherwise stated above, the content of this bibliographic record may be used under a CC BY 4.0 licence by Inist-CNRS/A menos que se haya se\u00f1alado antes, el contenido de este registro bibliogr\u00e1fico puede ser utilizado al amparo de una licencia CC BY 4.0 Inist-CNRS",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:xIQbs6uk08UC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Towards a context dependent java exceptions hierarchy",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7965354/",
            "Abstract": "The role of exceptions is crucial for the robustness of modern applications and critical systems. Despite this, there is a long debate among researchers, programming language designers, and practitioners regarding the usefulness and appropriateness of the available exception types and their classification. In this paper, we examine Java exceptions and propose a new class hierarchy and compile-time mechanisms that take into account the context in which exceptions can arise. We believe that the increased specificity of exception handling based on our proposal can boost its effectiveness and lead to fewer application failures.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:8bEfNjzhQ0EC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Comparative language fuzz testing: programming languages vs. fat fingers",
            "Publication year": 2012,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2414721.2414727",
            "Abstract": "We explore how programs written in ten popular programming languages are affected by small changes of their source code. This allows us to analyze the extend to which these languages allow the detection of simple errors at compile or at run time. Our study is based on a diverse corpus of programs written in several programming languages systematically perturbed using a mutation-based fuzz generator. The results we obtained prove that languages with weak type systems are significantly likelier than languages that enforce strong typing to let fuzzed programs compile and run, and, in the end, produce erroneous results. More importantly, our study also demonstrates the potential of comparative language fuzz testing for evaluating programming language designs.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:OTTXONDVkokC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Relational access to unix kernel data structures",
            "Publication year": 2014,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2592798.2592802",
            "Abstract": "State of the art kernel diagnostic tools like DTrace and Systemtap provide a procedural interface for expressing analysis tasks. We argue that a relational interface to kernel data structures can offer complementary benefits for kernel diagnostics.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:cwugQcE3IssC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Information systems security in the Greek public sector",
            "Publication year": 2001,
            "Publication url": "https://www.emerald.com/insight/content/doi/10.1108/09685220110366740/full/html",
            "Abstract": "The security aspects of public sector information systems are important as the respective systems are often part of critical infrastructures or deal with personal or sensitive data. A set of 53 Greek public sector organizations were investigated by means of a structured questionnaire concerning important aspects of information systems security. We present the relevant theoretical background, the methodology of our research, and an analysis of the obtained results. Greek public sector organizations have only a basic level of information system security awareness. Most care about digital data confidentiality; however, only a small percentage have developed a systematic, complete, and integrated approach towards the security of their information system, including internal audit procedures. The importance of proper training and generally the importance of the human factor for achieving high levels of information systems \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:bEWYMUwI8FkC",
            "Publisher": "MCB UP Ltd"
        },
        {
            "Title": "A domain-specific language for intrusion detection",
            "Publication year": 2000,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.4888&rep=rep1&type=pdf",
            "Abstract": "We describe the use of a domain-specific language (DSL) for expressing critical design values and constraints in an intrusion detection application. Through the use of this specialised language information that is critical to the correct operation of the software can be expressed in a form that can be easily drafted, verified, and maintained by domain experts (security officers) thus minimising the risk inherent from the mediation of software engineers. Our application, panoptis is a DSL-based low-cost, easy-to-use intrusion detection system using the process accounting records kept by most Unix systems. A set of databases contain resource usage profiles for processes, terminals, users, and time intervals. Panoptis monitors new process data against the recorded profiles and reports on entities diverging from the established resource usage envelopes implying possible data security threats.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:tkaPQYYpVKoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Applying contextual inquiry for capturing end-users behaviour requirements for mobile exhibition services",
            "Publication year": 2002,
            "Publication url": "https://www.academia.edu/download/54636363/FPSV02.pdf",
            "Abstract": "We investigate the use of Contextual Design, and in particular the process of Contextual Inquiry, for designing complex and innovative systems. Contextual Inquiry is an emerging practice used for investigating behavioural requirements of users in their work environment. The advantage of Contextual Design over other requirements elicitation methodologies, such as Requirements Engineering and User Task Analysis, is the focus on observation and in-work interviews for extracting requirements and designing customer-centred systems. Based on that, we have applied and adapted this methodology to the special case of gathering user requirements for a mobile exhibition system. The major part of this paper discusses the experience and results of this research with the purpose of providing background knowledge and guidelines to future implementors of Contextual Inquiry.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:mVmsd5A6BfQC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Refactoring on the Cheap",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6111371/",
            "Abstract": "Refactoring with ad hoc methods increases the scope of possible refactorings, allows you to use the same approaches on various languages, and opens your mind to more refactoring possibilities. The basic tool for performing a refactoring within a file is the editor's substitution command used in conjunction with regular expressions. To apply substitution commands to all files in a directory or throughout your project use the stream editor sed. The Perl and Ruby scripting languages also offer in-place substitution functionality through command-line invocation options, and their expression evaluators allow you to perform more sophisticated processing. Finally, you can easily change file names or move files around by using find to locate the corresponding files and sed to craft the text of a command that will accomplish the action you want. You can increase your effectiveness in this approach by building expressions \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:TIZ-Mc8IlK0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Being a devops developer",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7458759/",
            "Abstract": "In many IT sectors, DevOps is here to stay, helping deliver higher-quality services more efficiently. Thinking like a DevOps developer is an essential trait of an enlightened software professional. This article is part of a theme issue on DevOps.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:T4xR6ACgc60C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Digital Transformation-A Primer for Practitioners",
            "Publication year": 2020,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/9173638/",
            "Abstract": "Digital Transformation (DX) has revolutionized entire industries, propelled IT start-ups to stratospheric stock market valuations, and is sustaining legions of consultants evangelizing its message. Yet, beyond the creative disruption, hype, and lip service, we see that many organizations ignore or misapply its principles, ideas, and methods. This gap between theory and practice raises an important responsibility for software engineers and particularly for requirements engineers and software architects. If as a professional you specify and design software-intensive systems that ignore how modern digital technology radically transforms customer experience, business processes, business models, and whole organizations, you are short-changing your employer or client. Based on our industry consulting, government service, and volunteering experience, we provide a taxonomy, a road map, and examples of DX \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:Nd0en6mz4yEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "User interface development for interactive television: Extending a commercial DTV platform to the virtual channel API",
            "Publication year": 2004,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0097849303002590",
            "Abstract": "We explore the generation of interactive computer graphics at digital set-top boxes in place of the fixed graphics that were embedded to the television video before the broadcast. This direction raises new requirements for user interface development, since the graphics are merged with video at each set-top box dynamically, without the traditional quality control from the television producers. Besides the technical issues, interactive computer graphics for television should be evaluated by television viewers. We employ an animated character in an interactive music television application that was evaluated by consumers, and was developed using the Virtual Channel Control Library, a custom high-level API, that was built using Microsoft Windows and TV technologies.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:QIV2ME_5wuYC",
            "Publisher": "Pergamon"
        },
        {
            "Title": "On the declarative specification of models",
            "Publication year": 2003,
            "Publication url": "https://www.spinellis.gr/pubs/jrnl/2003-IEEESW-umlgraph/html/article.pdf",
            "Abstract": "architectural or mechanical-engineering models, the appearance of a software system\u2019s model diagram is only marginally related to the represented software design\u2019s quality. The drawing activity is, however, a creative task providing immediate feedback; software engineers thus often focus on delivering a nice picture rather than an effective design. Furthermore, the model\u2019s internal representation is typically opaque or under the drawing-editor tool\u2019s control, and thus at odds with vertical software process activities such as configuration and revision control. Finally, the semantic distance between the model and the artifact is large enough to burden activities that are naturally performed on software code such as refactoring, automatic code generation, and metric extraction. This is true even for design tools that support round-trip engineering of models, such as Rational XDE and Jbuilder 6.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:MXK_kJrjxJIC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "PROMISing steps towards computer hygiene",
            "Publication year": 2006,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.80.856&rep=rep1&type=pdf",
            "Abstract": "Recent worm epidemics proved beyond any doubt that the existing centralized worm containment mechanisms are no longer adequate to protect vulnerable systems, resulting in a shift towards distributed cooperative systems that aim to safeguard and immunize the susceptible population by automatically vaccinating them. We present PROMIS, a P2P based algorithm that provides its participants with early information regarding the existence of a worm epidemic and lets them automatically adjust their security level. We argue that our approach is based on the principles of hygiene: taking the basic precautions to avoid infection when an epidemic is on the rise.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:NhqRSupF_l8C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Time present and time past: analyzing the evolution of JavaScript code in the wild",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8816751/",
            "Abstract": "JavaScript is one of the web's key building blocks. It is used by the majority of web sites and it is supported by all modern browsers. We present the first large-scale study of client-side JavaScript code over time. Specifically, we have collected and analyzed a dataset containing daily snapshots of JavaScript code coming from Alexa's Top 10000 web sites (~7.5 GB per day) for nine consecutive months, to study different temporal aspects of web client code. We found that scripts change often; typically every few days, indicating a rapid pace in web applications development. We also found that the lifetime of web sites themselves, measured as the time between JavaScript changes, is also short, in the same time scale. We then performed a qualitative analysis to investigate the nature of the changes that take place. We found that apart from standard changes such as the introduction of new functions, many changes are \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:lD5Rj62EkMEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Building an e-business platform: an experience report",
            "Publication year": 2005,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.449.1303&rep=rep1&type=pdf",
            "Abstract": "The PRAXIS project has been designed to facilitate the interchange of data between government and business entities through direct enterprise application interconnection. The system architecture has been entirely based on emerging technologies, including web services and XML, allowing independent client systems to operate asynchronously with a central server orchestrating and controlling the workflow. An original business document exchange protocol has been developed from the ground up in order to address the specific needs of business to government transactions in the Greek business sector. This paper elaborates on the methodologies and tools used for the development of the project\u2019s coordination point (the server) and its clients, and present the experiences gained during the system\u2019s design, as well as results obtained from the preliminary integration and testing phases.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:GnPB-g6toBAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Counting the cost of virtual teams",
            "Publication year": 2007,
            "Publication url": "https://dl.acm.org/doi/fullHtml/10.1145/1323688.1323714",
            "Abstract": "Studying the performance, satisfaction, and group dynamics of virtual and face-to-face teams.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:lLDkS9sB7dAC",
            "Publisher": "ACM"
        },
        {
            "Title": "The importance of being declarative",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6401117/",
            "Abstract": "A declarative programming style focuses on what you want your program to do rather than how to perform the task. Through diverse programming techniques, libraries, and specialized languages, you end up with code that sidesteps nitty-gritty implementation details, dealing instead with a task's big picture.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:QYdC8u9Cj1oC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Guest editors' introduction: What kinds of nails need a domain-specific hammer?",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5076453/",
            "Abstract": "Domain-specific techniques, languages, tools, and models, such as Fortran and Cobol can easily be viewed as domain-specific languages for scientific and business computing, respectively. Their domain is just very wide. What has changed is the technology for creating domain-specific languages (DSLs). Now it is easier to define languages and get tool support for narrower domains. Such focus offers increased abstraction, making development faster and easier. In domain-specific approaches, developers construct solutions from concepts representing things in the problem domain, not concepts of a given general-purpose programming language. Ideally, a DSL follows the domain abstractions and semantics as closely as possible, letting developers perceive themselves as working directly with domain concepts. The created specifications might then represent simultaneously the design, implementation, and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:3fE2CSJIrl8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "The Challenges and Practices of Release Engineering",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8314162/",
            "Abstract": "Release-engineering teams are responsible for building and delivering software to the customer and for enabling its development on an industrial scale. This has always been a tall order. In modern software development, a number of factors make release engineering even more challenging. Thankfully, following a handful of established practices lets us address these challenges and deliver software reliably, dependably, and efficiently.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:adgdM4TzidAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The buffer allocation problem",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_5",
            "Abstract": "The buffer allocation problem, BAP, is concerned with the allocation of a certain fixed number of buffer slots, N, among the K\u22121 intermediate buffer locations of a production line in order to meet some specified objective. The number of stations of the line is fixed at K, the number of servers assigned to each station is fixed and the work allocation  is also fixed.The buffer allocation problem is of particular interest to operations management in that in many practical production line situations, the allocation of buffer space may be the primary flexibility available to the organization. Clearly, buffer space is an expensive resource and so, ideally models involving cost considerations are very desirable. Of course, there are also plant layout issues involved.At least three buffer allocation problems have been identified in the literature and these are described in Section 5.1. Solutions of the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:PR6Y55bgFSsC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Abstraction and variation",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4302681/",
            "Abstract": "This paper presents similarities in data by expressing them as a new type. Instead of copy-pasting a group of similar data elements, it is packed up in a class or structure and then many instances of it is created.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:V3AGJWp-ZtQC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Towards an affordable brain computer interface for the assessment of programmers\u2019 mental workload",
            "Publication year": 2018,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1071581918300934",
            "Abstract": "This paper provides a proof of concept for the use of wearable technology, and specifically wearable Electroencephalography (EEG), in the field of Empirical Software Engineering. Particularly, we investigated the brain activity of Software Engineers (SEngs) while performing two distinct but related mental tasks: understanding and inspecting code for syntax errors. By comparing the emerging EEG patterns of activity and neural synchrony, we identified brain signatures that are specific to code comprehension. Moreover, using the programmer's rating about the difficulty of each code snippet shown, we identified neural correlates of subjective difficulty during code comprehension. Finally, we attempted to build a model of subjective difficulty based on the recorded brainwave patterns. The reported results show promise towards novel alternatives to programmers\u2019 training and education. Findings of this kind may \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:DIP-VHrGjvwC",
            "Publisher": "Academic Press"
        },
        {
            "Title": "Software Engineering in Practice",
            "Publication year": 2021,
            "Publication url": "https://www2.dmst.aueb.gr/dds/sweng-en/2-design-en.pdf",
            "Abstract": "\u2022 The number of the objects that participate in a relationship between two entities (multiplicity) should be defined as a number (ie 3), or a range (ie 1\u2026* for one to many) over the appropriate edge of the relationship.\u2022 An X on the edge of a line states that navigation towards that direction is not provided.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:r8lgQMkXaCEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Tools and techniques for analyzing product and process data",
            "Publication year": 2015,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/B9780124115194000070",
            "Abstract": "The analysis of data from software products and their development process is tempting, but often non-trivial. A flexible, extensible, scalable, and efficient way for performing this analysis is through the use of line-oriented textual data streams, which are the lowest useful common denominator for many software analysis tasks. Using this technique, Unix tool-chest programs are combined into a pipeline that forms the pattern: fetching, selecting, processing, and summarizing. Product artifacts that can be handled in this way include source code (using heuristics, lexical analysis, or full-blown parsing and semantic analysis) as well as compiled code, which spans assembly code, machine code, byte code, and libraries. On the process front, data that can be analyzed includes configuration management metadata, time series snapshots, and checked repositories. The resulting data can then be visualized as graphs \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:sRzLl6AghiAC",
            "Publisher": "Morgan Kaufmann"
        },
        {
            "Title": "Cost Considerations",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_7",
            "Abstract": "A major consideration in the management of production is to understand the cost impact of various designs. Much of the work relating to overall production management including the design of facilities would seem to indicate that the decision processes are serial rather than concurrent or iterative feedback. The classical idea would appear to be that the engineering designers decide on the layout of the line with primary interest in the engineering performance measures of the stations and subsequently this design is costed and justified on some concept closely related to discounted cash flow. There are a number of papers discussing the inadequacy of the approach just outlined, particularly in relation to systems with inherent flexibility and the justification of which may be more strategic rather than tactical.An appropriate philosophy for world-class companies is for the company to re-invent itself from \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:4MWp96NkSFoC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Extending unix pipelines to dags",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7903579/",
            "Abstract": "The Unix shell dgsh provides an expressive way to construct sophisticated and efficient non-linear pipelines. Such pipelines can use standard Unix tools, as well as third-party and custom-built components. Dgsh allows the specification of pipelines that perform non-uniform non-linear processing. These form a directed acyclic process graph, which is typically executed by multiple processor cores, thus increasing the processing task's throughput. A number of existing Unix tools have been adapted to take advantage of the new shell's multiple pipe input/output capabilities. The shell supports visualization of the process graphs, which can also aid debugging. Dgsh was evaluated through a number of common data processing and domain-specific examples, and was found to offer an expressive way to specify processing topologies, while also generally increasing processing throughput.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:2Km5FFimHwEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software tools research: a matter of scale and scope-or commoditization?",
            "Publication year": 2012,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/2384716.2384740",
            "Abstract": "Tools emerge as the result of necessity-a job needs to be done, automated, and scaled. In the\"\" early days\"-compilers, code management, bug tracking, and the like-resulted in mostly local home-grown tools-and when broadly successful-spawn (from either industry or university origins) independent tools companies-for example Klocwork from Nortel and Coverity from Stanford University. This panel will bring together academics and industry professionals to discuss challenges in tools research.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:WJVC3Jt7v1AC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A taxonomy of Certificate Status Information mechanisms",
            "Publication year": 2000,
            "Publication url": "https://www.spinellis.gr/pubs/conf/2000-ISSE-CSI-Taxon/html/csi_taxonomy.pdf",
            "Abstract": "A number of mechanisms have been proposed for generating and disseminating information on the status of certificates. Their operation is different, if not contradicting sometimes, and advantages and disadvantages depend on the requirements of the underlying PKI. PKI designers and implementors should perform a small scale study before deploying such a mechanism in a specific PKI, in order to select the most suitable mechanism for their environment. This paper presents a method for categorising Certificate Status Information mechanisms, depending on their elementary functionality. This taxonomy can be used as a guide for selecting CSI mechanisms to be used in large-scale PKI deployment efforts.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:bFI3QPDXJZMC",
            "Publisher": "Unknown"
        },
        {
            "Title": "PANOPTIS: Intrusion detection using process accounting records",
            "Publication year": 2002,
            "Publication url": "https://scholar.google.com/scholar?cluster=5417680032427384408&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:y2egTTA-ddEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Site-specific versus general purpose web search engines: a comparative evaluation",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4621535/",
            "Abstract": "We can distinguish two types of web search engines: general use ones that index and search all the web, and site-specific ones that are provided by individual websites for local searching. A comparison of the effectiveness of the two types allows search engine users to choose the right engine and organizations to decide whether they should develop their own search software or purchase the search function as a service. We evaluate the performance of two general purpose search engines and 10 site-specific ones. The criteria we used are precision and relative recall. We entered 20 queries in each websitepsilas search engine and evaluated the first 10 links. According to the results, Google is in most cases the most efficient search engine. However, in some cases general purpose search engines do not index the websitepsilas content as well as a site-specific engine.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:eJXPG6dFmWUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The evolution of C programming practices: a study of the unix operating system 1973-2015",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7886953/",
            "Abstract": "Tracking long-term progress in engineering and applied science allows us to take stock of things we have achieved, appreciate the factors that led to them, and set realistic goals for where we want to go. We formulate seven hypotheses associated with the long term evolution of C programming in the Unix operating system, and examine them by extracting, aggregating, and synthesising metrics from 66 snapshots obtained from a synthetic software configuration management repository covering a period of four decades. We found that over the years developers of the Unix operating system appear to have evolved their coding style in tandem with advancements in hardware technology, promoted modularity to tame rising complexity, adopted valuable new language features, allowed compilers to allocate registers on their behalf, and reached broad agreement regarding code formatting. The progress we have \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:pf0VL3QzzAAC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Semantic source code models using identifier embeddings",
            "Publication year": 2019,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8816775/",
            "Abstract": "The emergence of online open source repositories in the recent years has led to an explosion in the volume of openly available source code, coupled with metadata that relate to a variety of software development activities. As an effect, in line with recent advances in machine learning research, software maintenance activities are switching from symbolic formal methods to data-driven methods. In this context, the rich semantics hidden in source code identifiers provide opportunities for building semantic representations of code which can assist tasks of code search and reuse. To this end, we deliver in the form of pretrained vector space models, distributed code representations for six popular programming languages, namely, Java, Python, PHP, C, C++, and C#. The models are produced using fastText, a state-of-the-art library for learning word representations. Each model is trained on data from a single \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:1q1G2TXS1G0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Multi-technology distributed objects and their integration",
            "Publication year": 2001,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0920548901000708",
            "Abstract": "Research on software objects, components, middleware, and component-based applications concerns among others ActiveX controls, JavaBeans (JBs), the Microsoft Transaction Server (MTS), Enterprise JavaBeans (EJBs), and how they can interoperate with each other. Is their interoperation possible? Which elements are responsible for the software objects' incompatibility? Is compatibility a responsibility of the objects or of their underlying architectures? In this article, we discuss object compatibility problems by outlining three basic middleware remoting technologies: the OMG's Common Object Request Broker Architecture (CORBA), Microsoft's Distributed Component Object Model (DCOM), and Sun's Java Remote Method Invocation (RMI), discussing the basic incompatibility points, and overviewing the basic strategies for bridging the gap between CORBA, DCOM, and RMI.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:7PzlFSSx8tAC",
            "Publisher": "North-Holland"
        },
        {
            "Title": "Bespoke infrastructures",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6750427/",
            "Abstract": "Infrastructure developed within an organization for its own internal use can take many forms. The obvious reason for creating a bespoke solution is that it can be tailored to fit an organization's unique needs, which offers many advantages: better performance, increased flexibility, and tactical or strategic advantages over the competition. However, such solutions are associated with a steep learning curve for newcomers, maintenance and support costs, and the risk of hijacking by groups with vested interests. Given that investment in bespoke infrastructures is a sunk cost and that these polarize the types of employees that stay in the organization, rational approaches for building an organization's infrastructure include customizing a general-purpose solution or adopting an open source tool and improving it to address the organization's requirements. The Web extra at http://youtu.be/n4TrVaA2VF8 is an audio podcast of \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:LyOydA3uxaIC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Differential debugging",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6588528/",
            "Abstract": "Finding yourself in a situation with a working and a buggy system is quite common. Differential debugging methodically can help by comparing a known good system with a buggy one, working toward the problem source. Some simple steps include applying differential debugging by looking at log files and increasing a system's log verbosity when needed. If the system doesn't offer a sufficiently detailed logging mechanism, you can tease out its runtime behavior with tools that trace calls to the operating system or that trace network packets. You can also compare carefully the two environments where the systems operate. The Web extra at http://youtu.be/qnXS6b4hakg is an audio podcast of author Diomidis Spinellis reading his Tools of the Trade column, in which he discusses how comparing a good system with a buggy one can help locate the source of the problem.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:5MTHONV0fEkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Debuggers and logging frameworks",
            "Publication year": 2006,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1628947/",
            "Abstract": "The testing, diagnostic, and repair equipment of many professions is horrendously expensive. Assuming that the bug-finding systems the author discussed that program code a clean bill of health, our next alternatives for productively pinpointing errors that have crept into our code are debuggers or logging instrumentation. Our toolbag is full of useful debugging tools. Being an expert user of a debugger and a logging framework is a sign of professional maturity",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:08ZZubdj9fEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Towards a framework for evaluating certificate status information mechanisms",
            "Publication year": 2003,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0140366403000793",
            "Abstract": "A wide spectrum of certificate revocation mechanisms is currently in use. A number of them have been proposed by standardisation bodies, while some others have originated from academic or private institutions. What is still missing is a systematic and robust framework for the sound evaluation of these mechanisms. We present a mechanism-neutral framework for the evaluation of certificate status information (CSI) mechanisms. These mechanisms collect, process and distribute CSI. A detailed demonstration of its exploitation is also provided. The demonstration is mainly based on the evaluation of Certificate Revocation Lists, as well as of the Online Certificate Status Protocol. Other well-known CSI mechanisms are also mentioned for completeness.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:8k81kl-MbHgC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "VulinOSS: a dataset of security vulnerabilities in open-source systems",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3196398.3196454",
            "Abstract": "Examining the different characteristics of open-source software in relation to security vulnerabilities, can provide the research community with findings that can lead to the development of more secure systems. We present a dataset where the reported vulnerabilities of 8694 open-source project versions, can be correlated with the corresponding source code and a number of software metrics. The metrics were obtained by analyzing the project's source code via well-established tools. Apart from commonly used metrics (eg loc), we also provide data related to modern development trends such as continuous integration and testing. We outline motivational examples based on the dataset we describe.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:vkG2KsohqNgC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A dataset of enterprise-driven open source software",
            "Publication year": 2020,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3379597.3387495",
            "Abstract": "We present a dataset of open source software developed mainly by enterprises rather than volunteers. This can be used to address known generalizability concerns, and, also, to perform research on open source business software development. Based on the premise that an enterprise's employees are likely to contribute to a project developed by their organization using the email account provided by it, we mine domain names associated with enterprises from open data sources as well as through white-and blacklisting, and use them through three heuristics to identify 17 264 enterprise GitHub projects. We provide these as a dataset detailing their provenance and properties. A manual evaluation of a dataset sample shows an identification accuracy of 89%. Through an exploratory data analysis we found that projects are staffed by a plurality of enterprise insiders, who appear to be pulling more than their weight \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:4Bh_hC5jS3YC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Performing peer-to-peer e-business transactions: A requirements analysis and preliminary design proposal",
            "Publication year": 2004,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.74.7687&rep=rep1&type=pdf",
            "Abstract": "On-line business transaction processing systems have so far been based on centralized or client-server architectures. It is our firm belief\u2013and it has also been recognized by the research and industrial community\u2013that such systems may also be based on the constantly evolving decentralized peer-to-peer architectures. The first step in this direction, which constitutes the core of our paper, is a detailed requirements definition and analysis. We discuss requirements preceding the actual collaborations, such as support for discovery of services, merchandise or trading parties, authentication and access control, and negotiating collaboration parameters; requirements referring to the actual collaboration and transaction phases, such as support for workflow and collaboration orchestration, logging and non-repudiation; requirements following the collaboration, such as user ranking and reputation management; and generic non-functional requirements including security, availability and anonymity. A preliminary design proposal is presented, based on our proposed set of requirements, and on implementation solutions from the recent literature. We conclude that current peerto-peer technology has evolved to the extent that it is able to fulfill many of these requirements to a large extent.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:dhFuZR0502QC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Guest Editors' Introduction: Advanced Heuristics in Transportation and Logistics",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1492311/",
            "Abstract": "Transportation and logistics organizations often face large-scale combinatorial problems on both operational and strategic levels. By exploiting problem-specific characteristics, classical heuristic methods--such as constructive and iterative local search methods--aim at a relatively limited exploration of the search space, thereby producing acceptable-quality solutions in modest computing times. In a major departure from a classical heuristic, a metaheuristic method exploits not only the problem characteristics but also ideas based on artificial intelligence methodologies, such as different types of memory structures and learning mechanisms, as well as analogies with optimization methods found in nature. Solutions produced by metaheuristics typically are of a much higher quality than those obtained with classical heuristic approaches.This article is part of a special issue on advanced heuristics in transportation and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:HoB7MX3m0LUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Lessons from space",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6055660/",
            "Abstract": "Given the parallels between the complexity of human spaceflight and large software systems, there are many things we developers can learn from successful space programs, such as the Soyuz. First, limiting a project's scope and complexity early on can have a dramatic payoff in its success and longevity. In addition, adding generous margins to early estimates (and any subsequent revisions) will ease the pain of development and deployment. Furthermore, gradual evolution with a working program at each step, rather than massive rewrites, benefits from successful architectures and teams, while also retaining the software's customer base and third-party contributors. Finally, a well-defined modular structure can increase the software's versatility yielding economies of scope and scale over its lifetime.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:2KloaMYe4IUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Biological aspects of computer virology",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-642-11631-5_20",
            "Abstract": "Recent malware epidemics proved beyond any doubt that frightful predictions of fast-spreading worms have been well founded. While we can identify and neutralize many types of malicious code, often we are not able to do that in a timely enough manner to suppress its uncontrolled propagation. In this paper we discuss the decisive factors that affect the propagation of a worm and evaluate their effectiveness.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:ML0RJ9NH7IQC",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Prerint",
            "Publication year": 2021,
            "Publication url": "https://dimitro.gr/assets/papers/CSDMMS21.pdf",
            "Abstract": "Over the past decade, we have witnessed tremendous advances in techniques for improving compiler reliability. Dozens of methods have emerged to validate compilers\u2019 correctness or facilitate compiler testing and debugging: from program generators [Livinskii et al. 2020; Nagai et al. 2012, 2014; Yang et al. 2011] and transformation-based techniques [Le et al. 2014, 2015; Sun et al. 2016b; Zhang et al. 2017], to test-case reduction [Regehr et al. 2012] and test-case prioritization approaches [Chen et al. 2016a, 2017]. Although the initial focus was on C/C++ compilers, researchers have also invested much effort on testing other compilers [Dewey et al. 2015; Donaldson et al. 2017; Lidbury et al. 2015], runtime systems [Chen et al. 2016b, 2019], and even dynamic programming languages [Holler et al. 2012; Park et al. 2020; Wang et al. 2019]. This exciting research work has led to the discovery and fixing of thousands of bugs in industrial-strength compilers, and has assisted compiler developers in preventing crashes and miscompilations (ie, generation of incorrect machine instructions) from happening.Most of the proposed techniques though, focus on finding bugs in optimizing compilers. For example, Nagai et al.[2012, 2014] craft C programs that exercise optimizations on arithmetic expressions. Another example is the most recent program generator for C/C++ programs [Livinskii et al. 2020], which adopts a set of program generation policies that are tailored to triggering specific buggy optimizations.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:PDAgwb0ELvkC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Another level of indirection",
            "Publication year": 2007,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=gJrmszNHQV4C&oi=fnd&pg=PA279&dq=info:Yg9iddrhak4J:scholar.google.com&ots=rOR0syTath&sig=T7OzM4m7SUwuDeH5UVJanKEUyM4",
            "Abstract": "LL PROBLEMS IN COMPUTER SCIENCE CAN BE SOLVED BY ANOTHER LEVEL OF INDIRECTION,\u201d is a famous quote attributed to Butler Lampson, the scientist who in 1972 envisioned the modern personal computer. The quote rings in my head on various occasions: when I am forced to talk to a secretary instead of the person I wish to communicate with, when I first travel east to Frankfurt in order to finally fly west to Shanghai or Bangalore, and\u2014yes\u2014when I examine a complex system\u2019s source code.Let\u2019s start this particular journey by considering the problem of a typical operating system that supports disparate filesystem formats. An operating system may use data residing on its native filesystem, a CD-ROM, or a USB stick. These storage devices may, in turn, employ different filesystem organizations: NTFS or ext3fs for a Windows or Linux native filesystem, ISO-9660 for the CD-ROM, and, often, the legacy FAT-32 filesystem for the USB stick. Each filesystem uses different data structures for managing free space, for storing file metadata, and for organizing files into directories. Therefore, each filesystem requires different code for each operation on a file (open, read, write, seek, close, delete, and so on).",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:rO6llkc54NcC",
            "Publisher": "O\u2019Reilly and Associates"
        },
        {
            "Title": "The tools we use",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4267595/",
            "Abstract": "What's the state of the art in the tools we use to build software? To answer this question, I let a powerful server build from source code about 7,000 open source packages over a period of a month. The packages I built form a subset of the FreeBSD operating system ports collection, comprising a wide spectrum of application domains: from desktop utilities and biology applications to databases and development tools. The collection is representative of modern software because, unlike say a random sample of SourceForge.net projects, FreeBSD developers have found these programs useful enough to port to FreeBSD.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:4fKUyHm3Qg0C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software-engineering the Internet of Things",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7819398/",
            "Abstract": "New wiring transformed ENIAC into a versatile stored-program computer. Rewiring Internet of Things infrastructures into a general-purpose computing fabric can similarly change how modern computation interfaces with our environment.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:2adpFNImVzkC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Work-Load and Server Allocation Problems",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_4",
            "Abstract": "In this chapter, two separate design problems are considered, viz., the work-load allocation problem and the server allocation problem in production lines. In a broad sense both design problems are related to the allocation of work from the point of view of the operators. Section 4.1 of the chapter describes what is classically known as the work-load allocation problem, i.e., the allocation of work to each station of the line so that all the required work is undertaken having in mind any precedence requirements. A well-known empirically observed phenomenon, namely the bowl phenomenon, is described. Some computational issues are then discussed. In Section 4.2, the server allocation problem is described. In Section 4.3, the simultaneous optimization of the work allocation and server allocation problems is considered. Associated with this double optimal problem is the so-called L-phenomenon.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:BUYA1_V_uYcC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Analysis and design of discrete part production lines",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/content/pdf/10.1007/978-0-387-89494-2.pdf",
            "Abstract": "Initially, during discussions among the four colleagues about this writing project, we used \u201con the optimal design of production lines\u201d as the working title of the book. However, it must be understood that all models involve assumptions and unless these assumptions are valid, the results could not be described as optimal. So basically, what this text is offering is a set of best solutions to the models as described in the various chapters. The models and the algorithms presented are generally accepted by internationally respected scholars to give very good solutions following extensive simulation and comparison with actual systems. We, therefore, see the process of the optimal design of production lines as a complementary activity between the scholars and the practitioners. The scholars provide models and associated algorithms and the practitioners, in their turn, ensure the appropriateness of the assumptions of the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:NaGl4SEjCO4C",
            "Publisher": "Springer"
        },
        {
            "Title": "Recruiting a Star Team.",
            "Publication year": 2015,
            "Publication url": "http://search.ebscohost.com/login.aspx?direct=true&profile=ehost&scope=site&authtype=crawler&jrnl=07407459&AN=102288013&h=%2FY8wF08t0Ln3S7ombeejf%2B%2Bm2OhsQI0i7LSBPxGAFxGCVkEwHpRpCySy%2F%2BGdA0PM4%2Fed0jRlYU6pabzC%2B0jJpg%3D%3D&crl=c",
            "Abstract": "Editor in chief Diomidis Spinellis explains how IEEE Software recruited volunteers for the magazine.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:e6AMIDGT8rIC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The Editor\u2019s Retrospective",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8552645/",
            "Abstract": "Outgoing Editor in Chief Diomidis Spinellis reviews the past four years, looking on what went well for the magazine, what could be improved, and what the magazine\u2019s volunteers can do to make IEEE Software an even better publication over the coming years.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:VoB_afVdn6EC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Java as distributed object glue",
            "Publication year": 2000,
            "Publication url": "https://www2.dmst.aueb.gr/dds/pubs/conf/2000-WCC-JGlue/html/jdog.html",
            "Abstract": "An important aspect of research on software objects, components, and component-based applications concerns their interoperation. When there is a need for two or more software components, based on different technologies, to interoperate the mission target is to make the components hide the fact that the other components are functioning under a different technology without changing their characteristics and behavior. In this paper we describe basic strategies for bridging the gap between the three basic middleware remoting technologies (CORBA, DCOM, and RMI) and present our approach for a Java-based Object Mediator architecture.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:3s1wT3WcHBgC",
            "Publisher": "Unknown"
        },
        {
            "Title": "FIRE/J\u2014optimizing regular expression searches with generative programming",
            "Publication year": 2008,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.841",
            "Abstract": "Regular expressions are a powerful tool for analyzing and manipulating text. Their theoretical background lies within automata theory and formal languages. The FIRE/J (fast implementation of regular expressions for Java) regular expression library is designed to provide maximum execution speed while remaining portable across different machine architectures. To achieve that, FIRE/J transforms each regular expression into a tailor\u2010made class file, which is compiled directly to Java virtual machine (JVM) bytecodes. The library is compatible with the POSIX standard. Copyright \u00a9 2007 John Wiley & Sons, Ltd.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:N5tVd3kTz84C",
            "Publisher": "John Wiley & Sons, Ltd."
        },
        {
            "Title": "A metaphor for personalized television programming",
            "Publication year": 2002,
            "Publication url": "https://link.springer.com/chapter/10.1007/3-540-36572-9_15",
            "Abstract": "Traditional human-computer interaction settings involve a taskoriented approach where the human interacts with an application to accomplish a particular goal. The emergence of media-rich computer-mediated leisure applications requires a fresh view of the current paradigms and a careful examination of how this change of perspective affects their relevance. This paper proposes a metaphor for accessing personalized television programming and suggests an approach for integrating the metaphor into the design of a television user interface. The proposed metaphor is tested in the design of a personalized advertising service. The results of the empirical research are discussed and the suitability of the metaphor for other television programs is examined.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:hFOr9nPyWt4C",
            "Publisher": "Springer, Berlin, Heidelberg"
        },
        {
            "Title": "Virtualize me",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6276301/",
            "Abstract": "Modern virtualization technology allows us to run operating systems in a virtual machine that can be hosted on facilities ranging from our laptop to a datacenter in the cloud. It's thus possible to create a virtualized development environment that contains all the tools, applications, and libraries that a programmer requires. This speeds up developer setup time, brings economies of scale, introduces parity between development and production environments, allows the use of platform-specific tools, and simplifies embedded-system development. Using VMs, testers can ensure a pristine environment and access to diverse (virtual) platforms. Deployment is also simplified by packaging all the system's components and setup into a VM appliance. Finally, on the operations side, VMs make it easier for a system to support application provisioning, maintenance windows, high availability, and disaster recovery.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:GtLg2Ama23sC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software development tooling: Information, opinion, guidelines, and tools",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6949502/",
            "Abstract": "The article depicts in two infographics a summary of what has been presented in the Tools of the Trade column over the past 10 years. The first figure categorizes the major points of each column into information, opinion, and prescriptive guidelines. The second figure associates with each broad theme specific indicative tools.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:IEPzPICaOQQC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Bug busters",
            "Publication year": 2006,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1605184/",
            "Abstract": "One way to deal with bugs is to avoid them entirely. The approach would be wasteful because we'd be underutilizing the many automated tools and techniques that can catch bugs for us. Most tools for eliminating bugs work by tightening the specifications of what we build. At the program code level, tighter specifications affect the operations allowed on various data types, our program's behavior, and our code's style. Furthermore, we can use many different approaches to verify that our code is on track: the programming language, its compiler, specialized tools, libraries, and embedded tests are our most obvious friends. We can delegate bug busting to code. Many libraries come with hooks or specialized builds that can catch questionable argument values, resource leaks, and wrong ordering of function calls. Bugs many be a fact of life, but they're not inevitable. We have some powerful tools to find them before they \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:vRqMK49ujn8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Portability: Goodies vs. the Hair Shirt",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6547638/",
            "Abstract": "Deciding whether to write portable code or not should be the outcome of a cost-benefit analysis. The key reason to favor portable code is that it opens up the selection of resources available to our project. Diverse technology choices free us from vendor lock-in, allowing us to select the best technology in each area based on quality and price, and minimize technology risks. However, portable code can degrade functionality, expressiveness, and efficiency. A middle course involves drawing boundaries around the non-portable code to isolate it from the rest of the application. Another approach is to admit defeat and write code that gives the best native experience. In the long term, separately maintained code bases can be less complex than a unified one. The Web extra at http://youtu.be/Lgqu_9Kc2Sc is an audio podcast of author Diomidis Spinellis reading his Tools of the Trade column, in which he discusses how \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:u-coK7KVo8oC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Intelligent user interfaces in the living room: usability design for personalized television applications",
            "Publication year": 2003,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/604045.604083",
            "Abstract": "The purpose of this paper is to present our experience from the design of a personalized television application, and the implications for the design of interactive television applications in general. Personalized advertising is a gentle introduction to interactive television applications through a push paradigm that is closer to the established patterns of television use. While personalization is a practice widely used on the Internet, applying personalization techniques over digital television infrastructures presents significant obstacles, which we address with explicit design moves",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:kNdYIx-mwKoC",
            "Publisher": "Unknown"
        },
        {
            "Title": "An empirical analysis of vulnerabilities in virtualization technologies",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7830734/",
            "Abstract": "Cloud computing relies on virtualization technologies to provide computer resource elasticity and scalability. Despite its benefits, virtualization technologies come with serious concerns in terms of security. Although existing work focuses on specific vulnerabilities and attack models related to virtualization, a systematic analysis of known vulnerabilities for different virtualization models, including hypervisor-based and container-based solutions is not present in the literature. In this paper, we present an overview of the existing known vulnerabilities for hypervisor and container solutions reported in the CVE database and classified under CWE categories. Given the vulnerability identification and categorization, we analyze our results with respect to different virtualization models and license schemes (open source/commercial). Our findings show among others that hypervisors and containers share common weaknesses \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:q2fMW1XeUkEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Faking it",
            "Publication year": 2011,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5984801/",
            "Abstract": "CPUs are no longer getting faster. Instead, CPU manufacturers now package multiple cores in each CPU and ask us developers to put them to good use. Writing parallel code using multiple threads or even a higher-level API is a fiendishly difficult task. An alternative approach involves using a programming language that can easily exploit multiple cores, but it requires substantial effort. A third way involves faking your application's multicore-handling dexterity by handing over this responsibility. At the highest level, it's easy to put multiple cores to work if your application serves Web requests (pass them to a Web application server) or dishes out SQL statements (via a commercial RDBMS). Another high-level way to utilize multiple cores is to let the operating system do it for you by splitting your processing among independent processes. You can do this by using pipelines of communicating processes, by splitting the \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:D03iK_w7-QYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Enabling B2B transactions over the internet through application interconnection: The PRAXIS project",
            "Publication year": 2004,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.81.7889&rep=rep1&type=pdf",
            "Abstract": "The paper elaborates on an approach that will enable the typical Small and Medium Enterprise (SME) to carry out a large subset of its business transactions with other enterprises, the public administration or financial institutions over the internet, gaining significant resources that nowadays are wasted on editing, printing, transferring and re-typing business documents. The present approach can be characterised as a depth-first, pilotoriented attempt to provide practical solutions to the Enterprise Application Interoperability problems of European SME\u2019s and do so in a paradigmbuilding way. Part of the approach stems out of PRAXIS, a project cofunded by the 3rd Community Support Framework (CSF) under the Information Society Programme. The project, coordinated by Singular Software SA, brings together software vendors, research centres, public administration bodies, banking institutions and user companies in Greece, aiming to provide a solution that will allow the automation of the aforementioned transactions with significant productivity results for all the represented communities.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:r0BpntZqJG4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Working with Unix tools",
            "Publication year": 2005,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/1524906/",
            "Abstract": "Line-oriented textual data streams are the lowest useful common denominator for a lot of data that passes through our hands. We can use such streams to represent program source code, Web server log data, version control history, file lists, symbol tables, archive contents, error messages, profiling data, and so on. For many routine, everyday tasks, we might be tempted to process the data using a \"Swiss army knife\" scripting language such as Perl, Python, or Ruby. However, doing that often requires writing a small, self-contained program and saving it into a file. By that point, we've lost interest in the task and end up doing the work manually, if at all. Often, it's more effective to combine Unix tool chest programs into a short and sweet pipeline that we can run from our shell's command prompt. With modern shell command-line editing facilities, we can build our command bit by bit, until it molds into exactly the form that \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:z_wVstp3MssC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Clonos: Consistent Causal Recovery for Highly-Available Streaming Dataflows",
            "Publication year": 2021,
            "Publication url": "https://repository.tudelft.nl/islandora/object/uuid:1a4d7ea8-2c3b-468b-b4fc-10841657dd57",
            "Abstract": "Stream processing lies in the backbone of modern businesses, being employed for mission critical applications such as real-time fraud detection, car-trip fare calculations, traffic management, and stock trading. Large-scale applications are executed by scale-out stream processing systems on thousands of long-lived operators, which are subject to failures. Recovering from failures fast and consistently are both top priorities, yet they are only partly satisfied by existing fault tolerance methods due to the strong assumptions these make. In particular, prior solutions fail to address consistency in the presence of nondeterminism, such as calls to external services, asynchronous timers and processing-time windows. This paper describes Clonos, a fault tolerance approach that achieves fast, local operator recovery with exactly-once guarantees and high availability by instantly switching to passive standby operators. Clonos enforces causally consistent recovery, including output deduplication, by tracking nondeterminism within the system through causal logging. To implement Clonos we re-engineered many of the internal subsystems of a state of the art stream processor. We evaluate Clonos' overhead and recovery on the Nexmark benchmark against Apache Flink. Clonos achieves instant recovery with negligible overhead and, unlike previous work, does not make assumptions on the deterministic nature of operators.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:oQdNcxnU9dAC",
            "Publisher": "Association for Computing Machinery (ACM)"
        },
        {
            "Title": "Fear of coding, and how to reduce it",
            "Publication year": 2001,
            "Publication url": "https://www.spinellis.gr/pubs/jrnl/2001-05-Computer-Fear-of-Coding/html/foc.pdf",
            "Abstract": "Continued from page 100 these classes I would need to fetch and push back lexical items into their upstream link. I could therefore embed that common functionality into a superclass. Being a cautious type, I decided to completely implement a single class and thereby test my design\u2019s principles. That\u2019s when things started to get ugly. The return type of the subclasses would not match that of the superclass. Nor could the class I intended to use as a stack for frozen included files handle open files gracefully. At the same time, I began to feel uneasy because I was reimplementing functionality already available, albeit with additional baggage, as part of the C++ standard template library.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:u9iWguZQMMsC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "An interactive SQL relational interface for querying main-memory data structures",
            "Publication year": 2015,
            "Publication url": "https://link.springer.com/article/10.1007/s00607-015-0452-y",
            "Abstract": "Query formalisms and facilities have received significant attention in the past decades resulting in the development of query languages with varying characteristics; many of them resemble sql. Query facilities typically ship as part of database management systems or, sometimes, bundled with programming languages. For applications written in imperative programming languages, database management systems impose an expensive model transformation. In-memory data structures can represent sophisticated relationships in a manner that is efficient in terms of storage and processing overhead, but most general purpose programming languages lack an interpreter and/or an expressive query language for manipulating interactive queries. Issuing interactive ad-hoc queries on program data structures is tough. This work presents a method and an implementation for representing an application\u2019s arbitrary \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:2lgwpy1Hu6IC",
            "Publisher": "Springer Vienna"
        },
        {
            "Title": "Modern debugging: the art of finding a needle in a haystack",
            "Publication year": 2018,
            "Publication url": "https://dl.acm.org/doi/abs/10.1145/3186278",
            "Abstract": "Systematic use of proven debugging approaches and tools lets programmers address even apparently intractable bugs.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:9AjqDp0R1qcC",
            "Publisher": "ACM"
        },
        {
            "Title": "PDGuard: an architecture for the control and secure processing of personal data",
            "Publication year": 2020,
            "Publication url": "https://link.springer.com/article/10.1007/s10207-019-00468-5",
            "Abstract": "Online personal data are rarely, if ever, effectively controlled by the users they concern. Worse, as demonstrated by the numerous leaks reported each week, the organizations that store and process them fail to adequately safeguard the required confidentiality. In this paper, we propose pdguard, a framework that defines prototypes and demonstrates an architecture and an implementation that address both problems. In the context of pdguard, personal data are always stored encrypted as opaque objects. Processing them can only be performed through the pdguard application programming interface (api), under data and action-specific authorizations supplied online by third party agents. Through these agents, end-users can easily and reliably authorize and audit how organizations use their personal data. A static verifier can be employed to identify accidental api misuses. Following a security by design approach \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:6APfbPi00UoC",
            "Publisher": "Springer Berlin Heidelberg"
        },
        {
            "Title": "Evaluating the quality of open source software",
            "Publication year": 2009,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S1571066109000632",
            "Abstract": "Traditionally, research on quality attributes was either kept under wraps within the organization that performed it, or carried out by outsiders using narrow, black-box techniques. The emergence of open source software has changed this picture allowing us to evaluate both software products and the processes that yield them. Thus, the software source code and the associated data stored in the version control system, the bug tracking databases, the mailing lists, and the wikis allow us to evaluate quality in a transparent way. Even better, the large number of (often competing) open source projects makes it possible to contrast the quality of comparable systems serving the same domain. Furthermore, by combining historical source code snapshots with significant events, such as bug discoveries and fixes, we can further dig into the causes and effects of problems. Here we present motivating examples, tools, and \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:R3hNpaxXUhUC",
            "Publisher": "Elsevier"
        },
        {
            "Title": "Securing e-voting against MITM attacks",
            "Publication year": 2009,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.158.4792&rep=rep1&type=pdf",
            "Abstract": "Man in the middle attacks involve the interception and retransmission of electronic messages in a way that the original parties will presume that their communication is secure. Such an attack could be a threat to any electronic voting scenario. This paper proposes a novel method for preventing this kind of attacks by including in the transaction a challenge-response test. The human end-user is asked to vote through an image-based challenge that will foil a typical automated software-based attack. The image is crafted so as to include multiple challenge nonces as a way to select the user\u2019s vote. The approach\u2019s strength is based on the difficulty of malicious software to falsify the image or emulate the user\u2019s response.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:EYYDruWGBe4C",
            "Publisher": "Unknown"
        },
        {
            "Title": "Evaluative Models of Discrete Part Production Lines",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_2",
            "Abstract": "The focus here is on discrete part production lines with asynchronous movement where each part produced is distinct. Production lines processing fluids and other continuous materials are not considered. From here on, when reference is made to production lines, discrete part production lines will be understood. In a production or flow line, all jobs are required to pass through each station in the same sequence once. These lines are usually associated with scale rather than scope, and a major advantage of production lines is the associated simple materials handling requirements.A production line consists of work-stations, materials, human resources, and inter-work-station storage facilities. Storage facilities have a finite capacity. Randomness is introduced due to random processing times and the random behavior of work-stations in relation to failure and repair. In terms of classical queueing theory \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:EkHepimYqZsC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Coping with plagiarism and grading load: Randomized programming assignments and reflective grading",
            "Publication year": 2007,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/cae.20096",
            "Abstract": "Programming assignments often suffer from plagiarism and lack of feedback. The Jarpeb system creates individually randomized assignments, grades the students' programs by utilizing Java's reflective evaluation capabilities, and allows students to submit their grade through the web by signing their grade with a cryptographically strong checksum. Jarpeb's empirical evaluation included as the dependent variables important learners' dimensions: plagiarism, understanding, learning, fairness, difficulty, fun, and interest. The results indicate that Jarpeb contributes to the reduction of plagiarism, increases the understanding, and learning of the course subject while also increasing the perceived fairness, fun, and interest of the learners. The system, however, proved to increase the difficulty of the related exercises. We discuss the implications for educators and outline specific future research directions. \u00a9 2007 Wiley \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:abG-DnoFyZgC",
            "Publisher": "Wiley Subscription Services, Inc., A Wiley Company"
        },
        {
            "Title": "Simulating Bandwidth-Limited Worms, One Graph to Rule Them All?",
            "Publication year": 2007,
            "Publication url": "https://www.spinellis.gr/pubs/conf/2007-PCI-Network/html/VKS07.pdf",
            "Abstract": "Due to ethical and practical limitations, simulations are the de facto approach to measure and predict the propagation of malicious code on the Internet. A crucial part of every simulation is the network graph that is used to perform the experiments. Though recent evidence brought to light the nature of many technological and socio-technical networks such as the web links, the physical connectivity of the Internet and the e-mail correspondents, we argue that the interpretation of these findings has to be strongly correlated with specific malware properties. Furthermore, we question whether these graphs are accurate enough to model the fastest spreading type of malicious activity, bandwidth-limited worms. Finally, we propose some workarounds, by introducing a new Bandwidth-Aware Graphs Generation Algorithm, in order to generate specially crafted network graphs for the simulation of this type of malicious activity.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:fQNAKQ3IYiAC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Software builders",
            "Publication year": 2008,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4497759/",
            "Abstract": "The tools and processes we use to transform our system's source code into an application that we can deploy or ship have always been important, but nowadays they can mean the difference between success and failure. The reasons are simple: larger code bodies; teams that are bigger, more fluid, and more widely distributed; richer interactions with other code; and sophisticated tool chains. All these mean that a slapdash software build process will be an endless drain on productivity and an embarrassing source of bugs, while a high-quality one will give us developers more time and traction to build better software.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:mvPsJ3kp5DgC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Context aware services in an Exhibition Environment-the mEXPRESS approach",
            "Publication year": 2002,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.194.9317&rep=rep1&type=pdf",
            "Abstract": "The mEXPRESS system addresses the needs of the professional exhibition industry supporting and facilitating context aware services in the indoor exhibition environment. The three goals served by the platform are the enhancement and facilitation of the visitor experience, the improvement of business communications, and the provision of management and operations data. Our distributed architecture relies on an application server, mobile access systems, location positioning technology, and mobile terminals. Using a contextual inquiry requirement capture method we created an application scenario that forms our system's guiding metaphor.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:-f6ydRqryjwC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The Success of a Heavenly Marriage",
            "Publication year": 2018,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8474499/",
            "Abstract": "For a field that sprang out of a so-called software crisis, software engineering has done rather well over the past half-century. By riding on the coattails of Moore\u2019s law, it has progressed phenomenally. The field\u2019s achievements are visible through the large, complex, yet effective software systems that power our everyday lives. By looking at the drivers of the field\u2019s progress and taking stock of its achievements, we can appreciate the challenges in front of us and confidently plan for the future. This article is part of a theme issue on software engineering\u2019s 50th anniversary.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:Dqu_ECg3lNoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The social responsibility of software development",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7888390/",
            "Abstract": "For better or worse, software developers are building the fabric of tomorrow's world. So, they need to realize that many of the things they do have ethical, social, and political implications.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:6zSeHT1sY2IC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Code finessing",
            "Publication year": 2006,
            "Publication url": "https://scholar.google.com/scholar?cluster=14309651031633768953&hl=en&oi=scholarr",
            "Abstract": "Unknown",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:r_AWSJRzSzQC",
            "Publisher": "Redwood City, CA: M&T Pub., 1989-"
        },
        {
            "Title": "Distributed object bridges and Java-based object mediator",
            "Publication year": 2000,
            "Publication url": "https://www.academia.edu/download/40755064/dobjom.pdf",
            "Abstract": "An important aspect of research on software objects, components, and component-based applications concerns their interoperation. Is their interoperation technically possible? Which elements are responsible for the software objects\u2019 incompatibility? Is compatibility a responsibility of the objects or of their underlying architectures? In this article we discuss the object compatibility problems, we describe basic strategies for bridging the gap between the three basic middleware remoting technologies (CORBA, DCOM, and RMI), and present our approach for a Java-based Object Mediator architecture.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:SP6oXDckpogC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The frictionless development environment scorecard",
            "Publication year": 2013,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6648593/",
            "Abstract": "The environment in which we work as developers can make a tremendous difference on our productivity and well-being. Yet it's easy to get trapped in an unproductive setup by inertia, and thus suffer death by a thousand cuts. A scorecard we can use to evaluate and fix the environment we work in covers the setup of our workstation and working environment, our ability to access remote hosts, general-purpose tools, editing, debugging, application development, and the specific problem at hand. Some fixes involve tweaks in our setup, and others might require us to install new tools, learn new skills, and negotiate with our managers. They're all worthwhile investments. The Web extra at http://youtu.be/AhMETa0tvkw is an audio podcast of author Diomidis Spinellis reading his Tools of the Trade column, in which he discusses how a scorecard can help evaluate and fix the environment you work in by covering the setup \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:5icHVeHT4IsC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Version Control, Part I",
            "Publication year": 2005,
            "Publication url": "https://search.proquest.com/openview/6e73aafa56744b6a2bd1c4ea87c6e9d2/1?pq-origsite=gscholar&cbl=37787",
            "Abstract": "Editor: Richard H. Thayer\u25a0 California State Univ., Sacramento\u25a0 thayer@ csus. edu Technical Reviewer: Merlin Dorfman\u25a0 Cisco Systems\u25a0 dorfman@ computer. org annotate: A command used for listing the latest version of each program\u2019s source code line, along with the date, the file version it was introduced, and the person who committed it. backout: To undo the effects of a commit, often by introducing a new commit that restores things to their previous state. bike shed discussion: A discussion about a simple and trivial issue where everybody can (and often does) have an opinion. branch: A set of evolving source file versions. Every branch is identified by a tag. Often, a branch identifies the file versions that have been or will be released as a product release. code freeze: A period during which noncritical changes to the code aren\u2019t allowed. collapse: To terminate development on one branch by integrating it with \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:q3oQSFYPqjQC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Cryptographic Protocols over Open Distributed Systems: A Taxonomy of Flaws",
            "Publication year": 2012,
            "Publication url": "https://books.google.com/books?hl=en&lr=&id=-VLSBwAAQBAJ&oi=fnd&pg=PA123&dq=info:CZBYpzcRuk4J:scholar.google.com&ots=zbZ0wU-vYu&sig=fqu8e7_OyplnJ1NJRululzROYks",
            "Abstract": "When designing and implementing cryptographic protocols one must avoid a number of possible flaws. In this paper we divide possible flaws based on the flaw pathology and the corresponding attack method, into elementary protocol flaws, password/key guessing flaws, stale message flaws, parallel session flaws, internal protocol flaws, and cryptosystem flaws. We then outline and comment on different attack construction and inference-based formal methods, protocol analysis tools, and process integration techniques and their effectiveness in aiding the cryptographic protocol design process by discovering protocol flaws with regard to the aforementioned proposed taxonomy of them.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:PQm_lTwdG-sC",
            "Publisher": "Springer Science & Business Media"
        },
        {
            "Title": "Modular production line optimization: The exPLORE architecture",
            "Publication year": 2001,
            "Publication url": "https://www.hindawi.com/journals/mpe/2001/531895/",
            "Abstract": "The general design problem in serial production lines concerns the allocation of resources such as the number of servers, their service rates, and buffers given production-specific constraints, associated costs, and revenue projections. We describe the design of exPLOre: a modular, object-oriented, production line optimization software architecture. An abstract optimization module can be instantiated using a variety of stochastic optimization methods such as simulated annealing and genetic algorithms. Its search space is constrained by a constraint checker while its search direction is guided by a cost analyser which combines the output of a throughput evaluator with the business model. The throughput evaluator can be instantiated using Markovian, generalised queueing network methods, a decomposition, or an expansion method algorithm.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:gsN89kCJA0AC",
            "Publisher": "Hindawi"
        },
        {
            "Title": "Developer, debug thyself",
            "Publication year": 2015,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7368033/",
            "Abstract": "The risks of misbehaving software have been with us for decades but are now becoming too ubiquitous to casually brush under the carpet. We must act now; otherwise, the next software scandal might take down software development as we know it.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:0GenKHZIuKYC",
            "Publisher": "IEEE"
        },
        {
            "Title": "The changing role of the software architect",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7725213/",
            "Abstract": "Being a good software architect has never been easy. Changes in the software industry are making the job even more challenging. The key drivers are the rising role of software in systems and their operation; more emphasis on reuse, agility, and testability during software development; and several quality elements increasingly affected by architectural choices.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:8k3R5ScbChQC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Service orchestration with rundeck",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6834683/",
            "Abstract": "Managing and controlling a service's provision is tricky, but tools for service orchestration, like Rundeck, can make our lives easier. Rundeck bridges the gap between software building and system configuration by allowing us to define tasks to deploy the software or configure its operation. After installing Rundeck, administrators typically define the characteristics of the computing nodes (hosts) where jobs will run, as well as the jobs themselves. Defining a job involves specifying its options and its workflow. Administrators define workflows in terms of node steps, which run on each node, or steps that execute once for the entire workflow. When a job is run, administrators have to enter its options and can control the nodes where it will execute. All job activity reports are stored in a queryable database. Sophisticated access control allows administrators to define groups and access control policies by project, group, or job \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:rv71eUSj1K8C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Wireless Info-communication and navigation services in exhibition shows",
            "Publication year": 2004,
            "Publication url": "http://users.ionio.gr/~pateli/publications/Conferences/PDFs/(Pateli%20et%20al.,%202004)%20Wireless%20Info-Communications%20and%20Navig.pdf",
            "Abstract": "Assistant Professor ELTRUN: The E-Business Center Athens University of Economics and Business 47A Evelpidon Street, 11362, Athens, Greece Tel:+ 3-210 8203658, Fax:+ 3-210 8203685, E-mail: giaglis@ aueb. gr",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:uWQEDVKXjbEC",
            "Publisher": "Unknown"
        },
        {
            "Title": "A double-edged sword? software reuse and potential security vulnerabilities",
            "Publication year": 2019,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-3-030-22888-0_13",
            "Abstract": "Reuse is a common and often-advocated software development practice. Significant efforts have been invested into facilitating it, leading to advancements such as software forges, package managers, and the widespread integration of open source components into proprietary software systems. Reused software can make a system more secure through its maturity and extended vetting, or increase its vulnerabilities through a larger attack surface or insecure coding practices. To shed more light on this issue, we investigate the relationship between software reuse and potential security vulnerabilities, as assessed through static analysis. We empirically investigated 301 open source projects in a holistic multiple-case methods study. In particular, we examined the distribution of potential vulnerabilities between the native code created by a project\u2019s development team and external code reused through \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:SCE0ypLQHGcC",
            "Publisher": "Springer, Cham"
        },
        {
            "Title": "Double and Triple Optimization",
            "Publication year": 2009,
            "Publication url": "https://link.springer.com/chapter/10.1007/978-0-387-89494-2_6",
            "Abstract": "There are three pure allocation problems, viz., the work-load allocation problem, the server allocation problem and the buffer allocation problem, all concerned with maximizing throughput. Mathematically, these problems may be described as follows:The work-load allocation problem, WAP:$$\\max X({\\bf w}) =\\max X({w}_{1},{w}_{2}, \\ldots ,{w}_{K})$$ subject to:$$\\sum _{i=1}^{K}{w}_{ i} = 1,\\ \\ \\ \\mbox{ for ${w}_{i} > 0$}$$ for normalized total work-load equal to unity and fixed allocation of servers and fixed buffer allocation.The server allocation problem, SAP:$$\\max X({\\bf s}) =\\max X({S}_{1},{S}_{2}, \\ldots ,{S}_{K}))$$ subject to:$$\\sum _{i=1}^{K}{S}_{ i} = S,\\ \\ \\ \\mbox{ for ${S}_{i} \\geq 1$ and integer}$$ for fixed allocation of work to each station and fixed buffer allocation.The buffer allocation problem, BAP:$$\\max X({\\bf n}) = X({N}_{2}, \\ldots ,{N}_{K})$$ subject to:$$\\sum _{i=2}^{K}{N}_{ i} = N \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:t6usbXjVLHcC",
            "Publisher": "Springer, New York, NY"
        },
        {
            "Title": "Alitheia core: An extensible software quality monitoring platform",
            "Publication year": 2009,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/5070560/",
            "Abstract": "Research in the fields of software quality and maintainability requires the analysis of large quantities of data, which often originate from open source software projects. Pre-processing data, calculating metrics, and synthesizing composite results from a large corpus of project artefacts is a tedious and error prone task lacking direct scientific value. The Alitheia Core tool is an extensible platform for software quality analysis that is designed specifically to facilitate software engineering research on large and diverse data sources, by integrating data collection and preprocessing phases with an array of analysis services, and presenting the researcher with an easy to use extension mechanism. The system has been used to process several projects successfully, forming the basis of an emerging ecosystem of quality analysis tools.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:qUcmZB5y_30C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Software Quality Assessment of Open Source Software1, 2",
            "Publication year": 2007,
            "Publication url": "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.878.5478&rep=rep1&type=pdf",
            "Abstract": "The open source software ecosystem comprises more than a hundred thousand applications of varying quality. Individuals and organizations wishing to use open source software packages have scarce objective data to evaluate their quality. However, open source development projects by definition allow anybody to read, and therefore evaluate their source code. In addition, most projects also publish process-related artefacts, such as bug databases, mailing lists, and configuration management system logs. The software quality observatory is a platform that uses these product and process data sources to automatically evaluate the quality of open source projects. A plugin-based service-oriented architecture allows the mixing and matching of metrics extraction suites, source code repositories, and transformation filters. The resulting platform is aimed at IT consultants and managers, the open source community, and researchers.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:TFP_iSt0sucC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The elusiveness of smart healthcare",
            "Publication year": 2017,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/8106889/",
            "Abstract": "To realize smart healthcare\u2019s many benefits, researchers and practitioners must overcome significant hurdles. The problems they face mirror the challenges of the field of software engineering in a world gradually eaten up by software.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:W26WQ4UGDhEC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Bookshelf-Software engineering for the rest of us",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4267611/",
            "Abstract": "Book reviews of CMMI for Outsourcing: Guidelines for Software, Systems, and IT Acquisition by Hubert F. Hofmann, Deborah K. Yedlin, John W. Mishler, and Susan Kushner; Code Craft: The Practice of Writing Excellent Code by Pete Goodliffe; and Software Specification and Design: An Engineering Approach by John C. Munson.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:nrS8eym_YfUC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Practical programming advice-The Pragmatic Programmer: From Journeyman to Master [Book Review]",
            "Publication year": 2000,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/895178/",
            "Abstract": "Thomas\u2019s The Pragmatic Programmer (www. pragmaticprogrammer. com). The progress of technology has brought with it new tools and approaches. Scripting languages, client\u2013server computing, graphical user interfaces, integrated development environments, object orientation, Web applications, and Internet time all provide new opportunities and challenges for today\u2019s programmer. The Pragmatic Programmer addresses these issues and more, making the authors\u2019 experience accessible to all programmers.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:uc_IGeMz5qoC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Unix tools as visual programming components in a GUI\u2010builder environment",
            "Publication year": 2002,
            "Publication url": "https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.428",
            "Abstract": "Development environments based on ActiveX controls and JavaBeans are marketed as \u2018visual programming\u2019 platforms; in practice their visual dimension is limited to the design and implementation of an application's graphical user interface (GUI). The availability of sophisticated GUI development environments and visual component development frameworks is now providing viable platforms for implementing visual programming within general\u2010purpose platforms, i.e. for the specification of non\u2010GUI program functionality using visual representations. We describe how specially designed reflective components can be used in an industry\u2010standard visual programming environment to graphically specify sophisticated data transformation pipelines that interact with GUI elements. The components are based on Unix\u2010style filters repackaged as ActiveX controls. Their visual layout on the development environment canvas \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:isC4tDSrTZIC",
            "Publisher": "John Wiley & Sons, Ltd."
        },
        {
            "Title": "Self-Evolving Software Architectures",
            "Publication year": 2018,
            "Publication url": "https://www.computer.org/csdl/magazine/so/2018/03/mso2018030004/13rRUygT7kZ",
            "Abstract": "Nature provides the inspiration for self-evolving software architectures that can deal with the increasing size and complexity of software systems.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:lIeuKFitLToC",
            "Publisher": "IEEE Computer Society"
        },
        {
            "Title": "Review of\" Sustainable Software Development: An Agile Perspective by Kevin Tate,\" Addison-Wesley Professional, 2005, $39.99, ISBN: 0321286081. Review of\" Sustainable Software Development: An Agile Perspective by Kevin Tate,\" Addison-Wesley Professional, 2005, $39.99, ISBN: 0321286081.",
            "Publication year": 2006,
            "Publication url": "https://dl.acm.org/doi/pdf/10.1145/1189276.1189292",
            "Abstract": "Review of \"Sustainable Software Development: An Agile Perspective by Kevin Tate,\" Addison-Wesley Professional, 2005, $39.99, ISBN: 0321286081.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:BwyfMAYsbu0C",
            "Publisher": "ACM"
        },
        {
            "Title": "Research priorities in the area of software technologies",
            "Publication year": 2016,
            "Publication url": "https://www.sitsi.com/sites/pac-online.com/files/upload_path/20161006_ExpertsWorkshopBruss/02_20161006_Workshop_Summary_ResearchPriorities.pdf",
            "Abstract": "In the words of the web\u2019s inventor Marc Andreessen,\u201csoftware is eating the world\u201d. Ever more products, services, and entire industries, existing ones as well as new, are running on software. Based on studies surveying the evolution of technology as well as journal articles, conference papers, and talks covering the future of software engineering, I argue that significant investment in software engineering research can help Europe stay on top and even lead a world that is increasingly defined and shaped by software. The need for targeted research in software engineering is prompted by developments in three broad areas.First, the computing landscape is changing from top to bottom. Technology influences the way we develop software both through the affordances it provides (for example ample directly addressable main memory and multiple computing cores) and through the requirements it imposes (for instance \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:tltQ_bo2KloC",
            "Publisher": "Unknown"
        },
        {
            "Title": "The Vulnerability Dataset of a Large Software Ecosystem",
            "Publication year": 2014,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7446036/",
            "Abstract": "Security bugs are critical programming errors that can lead to serious vulnerabilities in software. Examining their behaviour and characteristics within a software ecosystem can provide the research community with data regarding their evolution, persistence and others. We present a dataset that we produced by applying static analysis to the Maven Central Repository (approximately 265GB of data) in order to detect potential security bugs. For our analysis we used FindBugs, a tool that examines Java bytecode to detect numerous types of bugs. The dataset contains the metrics' results that FindBugs reports for every project version (a JAR) included in the ecosystem. For every version in our data repository, we also store specific metadata, such as the JAR's size, its dependencies and others. Our dataset can be used to produce interesting research results involving security bugs, as we show in specific examples.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:tVzLobxzA7YC",
            "Publisher": "IEEE"
        },
        {
            "Title": "APIs, Libraries, and Code",
            "Publication year": 2012,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/6336728/",
            "Abstract": "The choice between using the functionality of the application's platform (Java EE or .NET), calling one of several available external libraries, or writing code on your own involves numerous factors. When you write your own code, you control its quality. If some alternatives come in the form of external libraries, start by looking at the licensing terms. Next, judge the usability of the library or the platform API and the library's compatibility with your system. Elements with diverse naming conventions are an open invitation for disorder and style abuses. Other compatibility areas you should investigate include error handling, memory management, multithreading, and build management. Finish your examination by looking into the library's dependencies, quality, and support.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:IRz6iEL74y4C",
            "Publisher": "IEEE"
        },
        {
            "Title": "Applying mda in enterprise application interoperability: The praxis project",
            "Publication year": 2004,
            "Publication url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.89.4438&rep=rep1&type=pdf#page=76",
            "Abstract": "This paper elaborates on the application of the MDA approach for achieve interoperability among existing Enterprise Applications, such as Enterprise Resource Planning (ERP) and Customer Relationship Management (CRM) systems, through utilizing XML/B2B interconnection standards, developing components and modifying existing systems where necessary. We present the PRAXIS project design as a specific case study of this approach, describing the way in which interoperability-oriented high level model mappings are providing the means for guiding the model-driven development of interoperable Enterprise Applications. Specifically, we focus on the transformation processes that drive the Computation Independent System model into the Platform independent and finally the Platform Specific Model, including our final design decisions for the PRAXIS system.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:P5F9QuxV20EC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Coping with TiVo: Opportunities of the networked digital video recorder",
            "Publication year": 2007,
            "Publication url": "https://www.sciencedirect.com/science/article/pii/S0736585305000663",
            "Abstract": "Despite the progressive switch to digital TV, there has not been any significant change to the value chain of the TV industry. At the same time, the introduction of novel information and communication technologies, such as the digital video recorder (DVR) and efficient Peer-to-Peer (P2P) content distribution, have been regarded as a threat to the established broadcast business players. Previous research has described these threats and has suggested competitive strategies, but it has not investigated the opportunities. This work aims to identify a framework of new business models that take advantage of the networked DVR. For this purpose, we examined the TV literature from diverse academic disciplines, such as mass communication, computer engineering and advertising research. We have also collaborated with network and multimedia engineers, with broadcasters, and we examined novel interactive television \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:M3NEmzRMIkIC",
            "Publisher": "Pergamon"
        },
        {
            "Title": "On paper",
            "Publication year": 2007,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/4375237/",
            "Abstract": "This paper tries to devise an algorithm for analyzing initializers for C arrays and structures. The CScout refactoring browser is used to look for possible differences between closed and open source code. Unlike the other code bases, Sun's code didn't appear to use any exotic compiler extensions, so CScout uncomplainingly devoured one file after the next. Then, after approximately six hours of processing and 80 percent along the way, it reported a syntax error. Most errors encountered when processing C code with CScout are easy to handle. A macro definition is added to simulate a compiler built-in-function.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:eq2jaN3J8jMC",
            "Publisher": "IEEE"
        },
        {
            "Title": "Working Group on Health Measurement of Open Source Projects and Ecosystems",
            "Publication year": 2018,
            "Publication url": "https://www.diva-portal.org/smash/record.jsf?pid=diva2:1283346",
            "Abstract": "Open source projects and ecosystems can be studied due to the public availability of their data. The main reasons for studying this data is to collect operationalizable metrics that can be used for the improvement of the project or ecosystem. We can for instance use these metrics to do prediction, study adoption rates, and perform scenario modeling. Presently, in literature, the reigning health factors that are acknowledged are Robustness, Productivity, Niche creation. It is also common to look at ecosystem health from two dimensions: the partner/network level versus the system/project level. Each dimension provides a unique perspective on open source health and enables improvement in a different manner: one focuses on the activity within the platform, whereas the other focuses on the activity outside of it. Typically, in open source ecosystem health research the metrics are characterized along several axes: they are evaluated for availability, collectability, generalizability, comparability, user friendliness, etc. Examples of metrics are interactions between developers, clones, branches, and numbers of commits. We also find that metrics that are typically easy to collect are not very meaningful. Also, the need arises for a meaningful compact subset of metrics, instead of throwing the kitchen sink at evaluation projects. Also, we suspect that \u201ctypical\u201d developer behaviors can be extracted from the correlations between different metrics. Finally, we find that the goal-question-metric approach is insufficiently employed in the study of the health of ecosystems. One of the bigger challenges in assessing ecosystem health is the myriad of perspectives on \u2026",
            "Abstract entirety": 0,
            "Author pub id": "RjXNgA8AAAAJ:boGf3zyra0UC",
            "Publisher": "Unknown"
        },
        {
            "Title": "Managing a software business",
            "Publication year": 2016,
            "Publication url": "https://ieeexplore.ieee.org/abstract/document/7548910/",
            "Abstract": "Huge industries, from the automotive and healthcare industries to finance and entertainment, center increasingly on software. Managing such a software business is tough because software's ethereal nature offers infinite lucrative or catastrophic choices. The main things to manage are the business model, the execution strategy, the product or service, and the development process.",
            "Abstract entirety": 1,
            "Author pub id": "RjXNgA8AAAAJ:FTNwVkz-CAMC",
            "Publisher": "IEEE"
        }
    ]
}]